module.exports =
/******/ (function(modules) { // webpackBootstrap
/*******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "assets/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	exports.transform = transform;
	exports.getApplication = getApplication;
	exports.getMemo = getMemo;
	exports.getSnapShot = getSnapShot;
	exports.getUploadInfo = getUploadInfo;
	exports.validate = validate;
	
	var _fp = __webpack_require__(3);
	
	var _fp2 = _interopRequireDefault(_fp);
	
	var _redux = __webpack_require__(8);
	
	var _moment = __webpack_require__(27);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _selectors = __webpack_require__(34);
	
	var _reducers = __webpack_require__(40);
	
	var _FormReducer = __webpack_require__(48);
	
	var _FormReducer2 = _interopRequireDefault(_FormReducer);
	
	var _utils = __webpack_require__(38);
	
	var _validate = __webpack_require__(49);
	
	var _validate2 = _interopRequireDefault(_validate);
	
	var _memo = __webpack_require__(54);
	
	var _memo2 = _interopRequireDefault(_memo);
	
	var _upload = __webpack_require__(55);
	
	var _upload2 = _interopRequireDefault(_upload);
	
	var _filterAnswer = __webpack_require__(56);
	
	var _filterAnswer2 = _interopRequireDefault(_filterAnswer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	_.mixin({
	    deepReduce: function deepReduce(object, callback, initValue) {
	        var propertyPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
	
	        var deepMapValuesIteratee = function deepMapValuesIteratee(initValue, value, key) {
	            return _.deepReduce(value, callback, initValue, _.concat(propertyPath, key));
	        };
	
	        if (_.isArray(object)) {
	            return _.reduce(object, deepMapValuesIteratee, initValue);
	        } else if (_.isObject(object) && !_.isDate(object) && !_.isRegExp(object) && !_.isFunction(object)) {
	            return _.extend({}, initValue, _.reduce(object, deepMapValuesIteratee, initValue));
	        } else {
	            return callback(initValue, object, propertyPath);
	        }
	    }
	});
	
	var reducers = (0, _redux.combineReducers)(_reducers.EappReducer);
	
	var EXCLUDE_KEYS = ['ProSelection', 'ProResult', 'tempReferenceAddress'];
	
	var MAPPING_VALUES = {
	    IsPA: _selectors.isFormTypePA,
	    IsJuvenile: _selectors.isJuvenile,
	    ContractTypeCode: 'ProSelection.ContractType',
	    Basic_ProductCodeId: 'ProSelection.ProdCode',
	    Basic_ProductPlanId: 'ProSelection.PlanCode',
	    Basic_ProductGrpId: 'ProSelection.ProdGrpCode',
	    Basic_ProductLabel: 'ProSelection.label.th',
	    Basic_ProductLabelEn: 'ProSelection.label.en',
	    Basic_SumAssured: 'ProSelection.SA',
	    Basic_ProductCoverTerm: 'ProSelection.PlanCoverTerm',
	    Basic_ProductPremiumTerm: 'ProSelection.PlanPremiumTerm',
	    Basic_ActualPremium: 'ProSelection.PREMIUM',
	    Basic_Screen: 'ProSelection.ScreenCode',
	    Riders: function Riders(obj) {
	        return _(obj).chain().get('ProSelection.RIDERS').values().value();
	    }
	};
	var MAPPING_FORMAT = {
	    Basic_ProductCoverTerm: function Basic_ProductCoverTerm(value, state) {
	        var prefix = _.get(state, ['ProSelection', 'PlanCoverType']) === 'FIX' ? 'A' : '';
	        return prefix + _.toString(value);
	    },
	    Basic_ProductPremiumTerm: function Basic_ProductPremiumTerm(value, state) {
	        var prefix = _.get(state, ['ProSelection', 'PlanPremiumType']) === 'FIX' ? 'A' : '';
	        return prefix + _.toString(value);
	    }
	};
	var MAPPING_KEYS = {
	    ProdCode: 'ProductCodeId',
	    // PlanCode: 'ProductPlanId',
	    ProdGrpId: 'ProductGrpId',
	    SA: 'SumAssured',
	    PREMIUM: 'ActualPremium'
	};
	
	var MASTER_KEY = ['Value', 'Label', 'Id', 'Th', 'En', 'Level'];
	var DATEPICKER_KEY = ['Insured_IdExpiryDateId', 'Insured_BirthDateId', 'Payer_IdExpiryDateId', 'Payer_BirthDateId', 'Insured_Diabetes_LastTreatmentId', 'Insured_Diabetes_LastUrineTestId', 'Insured_Diabetes_CxrDateId', 'Insured_Diabetes_EkgDateId',
	// 'Insured_Diabetes_DiagnosedId',
	// 'Insured_Diabetes_TreatmentStartedId',
	'Insured_Hbp_TreatmentStartedDateId', 'Insured_Hbp_DiagnosedDateId',
	// 'Insured_Hbp_PretreatedBpDateId',
	'Insured_Hbp_LastBpDateId', 'Insured_Hbp_CurrentFirstVisitDateId', 'Insured_Hbp_CxrDateId', 'Insured_Hbp_EkgDateId', 'Insured_Hbp_SmokeQuitDateId', 'Insured_Hepatitis_DiagnosedDateId', 'Insured_Hepatitis_BloodTestDateId', 'Insured_Hepatitis_UltrasoundTestDateId', 'Insured_Tumor_DiscoveryDateId', 'Insured_Tumor_FollowupDateId'];
	
	var Insured_HasSymptom = ['Insured_HasSymptom_Main', 'Insured_HasSymptom_PastSixMonth', 'Insured_HasSymptom_Female'];
	
	var Payer_HasSymptom = ['Payer_HasSymptom_Main', 'Payer_HasSymptom_PastSixMonth', 'Payer_HasSymptom_Female'];
	
	var Insured_Symptom = ['Insured_Symptoms_Main', 'Insured_Symptoms_PastSixMonth', 'Insured_Symptoms_Female'];
	
	var Payer_Symptom = ['Payer_Symptoms_Main', 'Payer_Symptoms_PastSixMonth', 'Payer_Symptoms_Female'];
	
	var SYMPTOM_KEY = [].concat(Insured_Symptom, Insured_HasSymptom, Payer_Symptom, Payer_HasSymptom);
	
	var getHasSymptom = function getHasSymptom(state, keys) {
	    var filterd = _.filter(state, function (val, key) {
	        return _.includes(keys, key);
	    });
	    if (_.isEmpty(filterd)) {
	        return undefined;
	    }
	    var result = _.some(filterd, function (val) {
	        return val === 'Y';
	    });
	    return result ? 'Y' : 'N';
	};
	
	var getSymptom = function getSymptom(state, keys) {
	    return _.chain(state).filter(function (val, key) {
	        return _.includes(keys, key);
	    }).flatten().map(function (item) {
	        return _.omit(item, ['value']);
	    }).value();
	};
	
	var getAlcoholKey = function getAlcoholKey(form) {
	    var unit = _.get(form, 'Insured_AlcoholQuantityUnit');
	    var quantity = _.get(form, 'Insured_AlcoholQuantity');
	    if (_.some([unit, quantity], _.isNil)) {
	        return form;
	    } else {
	        var unitName = unit.value === '0' ? 'AlcoholQuantityCan' : 'AlcoholQuantityBottle';
	        var key = 'Insured_' + unitName;
	        return _extends({}, form, _defineProperty({}, key, _.get(quantity, 'value')));
	    }
	};
	
	var capitalize = function capitalize(value) {
	    if (_.isString(value)) {
	        var _value = _toArray(value),
	            capital = _value[0],
	            name = _value.slice(1);
	
	        return _.toUpper(capital) + _.join(name, '');
	    }
	
	    return value;
	};
	
	var transformData = function transformData(state) {
	    var Insured_Symptom_Result = getSymptom(state, Insured_Symptom);
	    var Insured_HasSymptom_Result = getHasSymptom(state, Insured_HasSymptom);
	    var Payer_Symptom_Result = getSymptom(state, Payer_Symptom);
	    var Payer_HasSymptom_Result = getHasSymptom(state, Payer_HasSymptom);
	    var result = _({}).chain().extend(MAPPING_VALUES).mapValues(function (key, name) {
	        if (_.isFunction(key)) {
	            var fn = key;
	
	            return fn(state);
	        }
	
	        return _.get(state, key);
	    }).extend(state).omit(EXCLUDE_KEYS).thru(function (obj) {
	        var riders = _.get(obj, 'Riders');
	        var RCCRiders = ['RCC3', 'RCC4', 'RCC5'];
	        var Riders = _(riders)
	        // .orderBy(['ProdGrpId', 'ProdCode', 'PlanCode'], ['asc', 'asc', 'asc'])
	        .map(function (rider) {
	            return _.reduce(rider, function (result, val, key) {
	                if (key === 'planCode') {
	                    if (_.endsWith(val, 'HS2N') || _.endsWith(val, 'HSHC') || _.endsWith(val, 'HS-N')) {
	                        var _extends3;
	
	                        return _extends({}, result, (_extends3 = {}, _defineProperty(_extends3, key, val.substring(0, 2)), _defineProperty(_extends3, 'ProductPlanId', val), _extends3));
	                    } else {
	                        var _extends4;
	
	                        return _extends({}, result, (_extends4 = {}, _defineProperty(_extends4, key, ''), _defineProperty(_extends4, 'ProductPlanId', val), _extends4));
	                    }
	                }
	                return _extends({}, result, _defineProperty({}, key, val));
	            }, {});
	        }).reduce(function (result, val) {
	            if (_.includes(RCCRiders, val.ProdCode)) {
	                return result;
	            }
	            if (!_.isNil(val.AttachProductCode) && _.isArray(JSON.parse(val.AttachProductCode))) {
	                var list = _.filter(JSON.parse(val.AttachProductCode), function (p) {
	                    return _.includes(RCCRiders, p);
	                });
	                return _.chain([].concat(_toConsumableArray(result), [val, _.map(list, function (ProdCode) {
	                    return _.find(riders, { ProdCode: ProdCode });
	                })])).compact().flatten().value();
	            }
	            return [].concat(_toConsumableArray(result), [val]);
	        }, []);
	        return _extends({}, obj, {
	            Riders: Riders,
	            AppId: _.get(obj, 'appId')
	        });
	    }).thru(getAlcoholKey).omit(SYMPTOM_KEY).set('Insured_HasSymptom', Insured_HasSymptom_Result).set('Insured_Symptoms', Insured_Symptom_Result).set('Payer_HasSymptom', Payer_HasSymptom_Result).set('Payer_Symptoms', Payer_Symptom_Result).deepReduce(function (result, value, path) {
	        var getFlatPath = function getFlatPath(path) {
	            return _(path).map(function (name) {
	                if (!isNaN(name)) {
	                    return '[' + name + ']';
	                }
	
	                return _.get(MAPPING_KEYS, name, name);
	            }).thru(function (path) {
	                var result = _(path).join('_');
	                if (_.includes(MASTER_KEY, _.last(path))) {
	                    result = _(path).slice(0, -2).concat(_(path).slice(-2).join('')).join('_');
	                }
	                if (_.includes(result, ']') && !_.includes(result, ']_') && !_.endsWith(result, ']')) {
	                    result = _.replace(result, ']', ']_');
	                }
	
	                return result;
	            }).value();
	        };
	
	        var name = _(path).chain().thru(function (path) {
	            // if (_.last(path) === 'label') {
	
	            //     return _.dropRight(path);
	            // }
	
	            if (_.last(path) === 'value') {
	                var _name = _.slice(path, 0, -1);
	                var label = _.get(state, _.concat(_name, 'label'));
	
	                if (_.isPlainObject(label)) {
	                    return _(path).dropRight().concat('id').value();
	                } else {
	                    return _.dropRight(path);
	                }
	            }
	
	            return path;
	        }).map(capitalize).thru(function (path) {
	            if (_.size(path) > 1) {
	                return getFlatPath(path);
	            }
	
	            return path;
	        }).value();
	        return _extends({}, result, _defineProperty({}, name, value));
	    }, {}).mapKeys(function (value, key) {
	        if (_.includes(key, '_[')) {
	            key = _.replace(key, /_\[/g, '[');
	        }
	
	        if (_.endsWith('ScreenCode')) {
	            return _.replace(key, 'ScreenCode', 'Screen');
	        }
	
	        if (_.startsWith(key, 'Riders')) {
	            if (_.endsWith(key, 'LabelTh')) {
	                return _.replace(key, 'LabelTh', 'ProductLabel');
	            }
	            if (_.endsWith(key, 'LabelEn')) {
	                return _.replace(key, 'LabelEn', 'ProductLabelEn');
	            }
	        }
	
	        if (_.endsWith(key, ']_LabelTh')) {
	            return _.replace(key, '_LabelTh', '_Label');
	        }
	        if (_.endsWith(key, ']_LabelEn')) {
	            return _.replace(key, '_LabelEn', '_LabelEn');
	        }
	
	        if (_.endsWith(key, '_LabelTh')) {
	            return _.replace(key, '_LabelTh', 'Label');
	        }
	        if (_.endsWith(key, '_LabelEn')) {
	            return _.replace(key, '_LabelEn', 'LabelEn');
	        }
	
	        if (_.includes(key, '_CutOut')) {
	            return _.replace(key, '_CutOut', '');
	        }
	
	        if (key === 'Dividend_PaymentOption') {
	            return key.concat('Id');
	        }
	        if (key === 'Insured_MotorcycleFlagId') {
	            return _.replace(key, 'Id', '');
	        }
	
	        if (_.includes(DATEPICKER_KEY, key)) {
	            return _.chain(key).slice(0, key.length - 2).join('').value();
	        }
	
	        return key;
	    }).omitBy(_.isNil).omitBy(function (value, key) {
	        return _.endsWith(key, '__id');
	    }).mapValues(function (value, key, data) {
	        if (_.endsWith(key, 'Id')) {
	            return _.toString(value);
	        }
	        if (key === 'IsPA' || key === 'IsJuvenile') {
	            return value === true ? 'Y' : 'N';
	        }
	
	        var fn = MAPPING_FORMAT[key];
	        if (_.isFunction(fn)) {
	            return fn(value, state);
	        }
	
	        if (_.endsWith(key, '_Income')) {
	            return Number(value);
	        }
	
	        if (_.endsWith(key, '_Age')) {
	            return Number(value);
	        }
	
	        if (_.includes(['Created', 'Modified', 'Submitted'], key)) {
	            return (0, _moment2.default)(value).format('YYYY-MM-DD');
	        }
	
	        return value;
	    }).omit(['AppId', 'Insured_Hepatitis_Diagnoseds_Other', 'Insured_Tumor_Treatments_TreatmentStarted_Radio', 'Insured_Tumor_Treatments_LastTreatment_Radio', 'Insured_Tumor_Treatments_TreatmentStarted_Chemo', 'Insured_Tumor_Treatments_LastTreatment_Chemo']).mapKeys(function (val, key) {
	        if (_.isEqual(key, 'AppPayer_OccupationLabel')) {
	            return 'AppPayer_Occupation';
	        }
	
	        if (_.isEqual(key, 'AppPayer_RelationToInsured')) {
	            return 'AppPayer_RelationToInsuredId';
	        }
	
	        if (key === 'AppNo') {
	            return 'AppId';
	        }
	        return key;
	    }).omitBy(function (val, key) {
	        return !_.isEqual(key, 'AppPayer_Occupation') && _.startsWith(key, 'AppPayer_Occupation') || _.endsWith(key, ']') || _.startsWith(key, 'Insured_Tumor_Treatments_');
	    }).value();
	
	    return _extends({ AAA: '2.0.45' }, result);
	};
	
	function transform(state, callback) {
	    var result = _.chain(JSON.parse(state || null) || undefined).thru(_filterAnswer2.default).thru(transformData).value();
	
	    if (callback) {
	        callback(null, result || {});
	    }
	}
	
	function getApplication() {
	    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        state = _ref.state,
	        _ref$actions = _ref.actions,
	        actions = _ref$actions === undefined ? [] : _ref$actions,
	        _ref$transform = _ref.transform,
	        transform = _ref$transform === undefined ? false : _ref$transform;
	
	    var callback = arguments[1];
	
	    var result = _.chain(actions).map(JSON.parse).map(_utils.deserializeAction).reduce(_FormReducer2.default, JSON.parse(state || null) || undefined).thru(function (state) {
	        return transform ? transformData(state) : state;
	    }).value();
	
	    if (callback) {
	        callback(null, result || {});
	    }
	}
	
	function getMemo() {
	    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        state = _ref2.state,
	        _ref2$actions = _ref2.actions,
	        actions = _ref2$actions === undefined ? [] : _ref2$actions,
	        _ref2$transform = _ref2.transform,
	        transform = _ref2$transform === undefined ? false : _ref2$transform;
	
	    var callback = arguments[1];
	
	    var result = _(actions).chain().map(JSON.parse).map(_utils.deserializeAction).reduce(_FormReducer2.default, JSON.parse(state || null) || undefined).thru(_memo2.default).thru(function (state) {
	        return transform ? transformData(state) : state;
	    }).value();
	
	    if (callback) {
	        callback(null, result || {});
	    }
	}
	
	function getSnapShot() {
	    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        state = _ref3.state,
	        _ref3$actions = _ref3.actions,
	        actions = _ref3$actions === undefined ? [] : _ref3$actions;
	
	    var callback = arguments[1];
	
	    var initAction = [JSON.stringify({
	        type: '@@redux/INIT'
	    })];
	    var result = _(initAction).concat(actions).map(JSON.parse).map(_utils.deserializeAction).reduce(reducers, JSON.parse(state || null) || undefined);
	
	    if (callback) {
	        callback(null, result);
	    }
	}
	
	function getUploadInfo() {
	    var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (a) {
	        return a;
	    };
	
	    var result = (0, _upload2.default)(JSON.parse(form));
	    callback(null, result);
	}
	
	function validate() {
	    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        _ref4$state = _ref4.state,
	        state = _ref4$state === undefined ? {} : _ref4$state,
	        _ref4$transform = _ref4.transform,
	        transform = _ref4$transform === undefined ? false : _ref4$transform,
	        _ref4$doc = _ref4.doc,
	        doc = _ref4$doc === undefined ? {} : _ref4$doc;
	
	    var callback = arguments[1];
	
	    var _doc = _.isEmpty(doc) ? doc : JSON.parse(doc);
	    var result = _(JSON.parse(state)).chain().thru(_filterAnswer2.default).thru(function (state) {
	        return (0, _validate2.default)(_extends({}, state, { doc: _doc }));
	    }).thru(function (state) {
	        return transform ? transformData(state) : state;
	    }).value();
	    if (callback) {
	        callback(null, result);
	    }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, _) {/**
	 * @license
	 * lodash <https://lodash.com/>
	 * Copyright JS Foundation and other contributors <https://js.foundation/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	;(function() {
	
	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;
	
	  /** Used as the semantic version number. */
	  var VERSION = '4.16.6';
	
	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;
	
	  /** Error message constants. */
	  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://github.com/es-shims.',
	      FUNC_ERROR_TEXT = 'Expected a function';
	
	  /** Used to stand-in for `undefined` hash values. */
	  var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	  /** Used as the maximum memoize cache size. */
	  var MAX_MEMOIZE_SIZE = 500;
	
	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';
	
	  /** Used to compose bitmasks for function metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256,
	      FLIP_FLAG = 512;
	
	  /** Used to compose bitmasks for comparison styles. */
	  var UNORDERED_COMPARE_FLAG = 1,
	      PARTIAL_COMPARE_FLAG = 2;
	
	  /** Used as default options for `_.truncate`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';
	
	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
	  var HOT_COUNT = 800,
	      HOT_SPAN = 16;
	
	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2,
	      LAZY_WHILE_FLAG = 3;
	
	  /** Used as references for various `Number` constants. */
	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;
	
	  /** Used as references for the maximum length and index of an array. */
	  var MAX_ARRAY_LENGTH = 4294967295,
	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
	
	  /** Used to associate wrap methods with their bit flags. */
	  var wrapFlags = [
	    ['ary', ARY_FLAG],
	    ['bind', BIND_FLAG],
	    ['bindKey', BIND_KEY_FLAG],
	    ['curry', CURRY_FLAG],
	    ['curryRight', CURRY_RIGHT_FLAG],
	    ['flip', FLIP_FLAG],
	    ['partial', PARTIAL_FLAG],
	    ['partialRight', PARTIAL_RIGHT_FLAG],
	    ['rearg', REARG_FLAG]
	  ];
	
	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      asyncTag = '[object AsyncFunction]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      domExcTag = '[object DOMException]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      nullTag = '[object Null]',
	      objectTag = '[object Object]',
	      promiseTag = '[object Promise]',
	      proxyTag = '[object Proxy]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      undefinedTag = '[object Undefined]',
	      weakMapTag = '[object WeakMap]',
	      weakSetTag = '[object WeakSet]';
	
	  var arrayBufferTag = '[object ArrayBuffer]',
	      dataViewTag = '[object DataView]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';
	
	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
	
	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
	      reUnescapedHtml = /[&<>"']/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
	
	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;
	
	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      reLeadingDot = /^\./,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
	
	  /**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	   */
	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	      reHasRegExpChar = RegExp(reRegExpChar.source);
	
	  /** Used to match leading and trailing whitespace. */
	  var reTrim = /^\s+|\s+$/g,
	      reTrimStart = /^\s+/,
	      reTrimEnd = /\s+$/;
	
	  /** Used to match wrap detail comments. */
	  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
	      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	      reSplitDetails = /,? & /;
	
	  /** Used to match words composed of alphanumeric characters. */
	  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
	
	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;
	
	  /**
	   * Used to match
	   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
	
	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;
	
	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
	
	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;
	
	  /** Used to detect host constructors (Safari). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;
	
	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;
	
	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;
	
	  /** Used to match Latin Unicode letters (excluding mathematical operators). */
	  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
	
	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;
	
	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
	
	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff',
	      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
	      rsComboSymbolsRange = '\\u20d0-\\u20f0',
	      rsDingbatRange = '\\u2700-\\u27bf',
	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	      rsPunctuationRange = '\\u2000-\\u206f',
	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	      rsVarRange = '\\ufe0e\\ufe0f',
	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
	
	  /** Used to compose unicode capture groups. */
	  var rsApos = "['\u2019]",
	      rsAstral = '[' + rsAstralRange + ']',
	      rsBreak = '[' + rsBreakRange + ']',
	      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
	      rsDigits = '\\d+',
	      rsDingbat = '[' + rsDingbatRange + ']',
	      rsLower = '[' + rsLowerRange + ']',
	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	      rsNonAstral = '[^' + rsAstralRange + ']',
	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	      rsUpper = '[' + rsUpperRange + ']',
	      rsZWJ = '\\u200d';
	
	  /** Used to compose unicode regexes. */
	  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	      reOptMod = rsModifier + '?',
	      rsOptVar = '[' + rsVarRange + ']?',
	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
	      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
	
	  /** Used to match apostrophes. */
	  var reApos = RegExp(rsApos, 'g');
	
	  /**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */
	  var reComboMark = RegExp(rsCombo, 'g');
	
	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
	
	  /** Used to match complex or compound words. */
	  var reUnicodeWord = RegExp([
	    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
	    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
	    rsUpper + '+' + rsOptContrUpper,
	    rsOrdUpper,
	    rsOrdLower,
	    rsDigits,
	    rsEmoji
	  ].join('|'), 'g');
	
	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');
	
	  /** Used to detect strings that need a more robust regexp to match words. */
	  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
	
	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	  ];
	
	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;
	
	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
	  typedArrayTags[weakMapTag] = false;
	
	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	  cloneableTags[boolTag] = cloneableTags[dateTag] =
	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[setTag] =
	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[weakMapTag] = false;
	
	  /** Used to map Latin Unicode letters to basic Latin letters. */
	  var deburredLetters = {
	    // Latin-1 Supplement block.
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss',
	    // Latin Extended-A block.
	    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	    '\u0134': 'J',  '\u0135': 'j',
	    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	    '\u0174': 'W',  '\u0175': 'w',
	    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	    '\u0132': 'IJ', '\u0133': 'ij',
	    '\u0152': 'Oe', '\u0153': 'oe',
	    '\u0149': "'n", '\u017f': 's'
	  };
	
	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;'
	  };
	
	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'"
	  };
	
	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };
	
	  /** Built-in method references without a dependency on `root`. */
	  var freeParseFloat = parseFloat,
	      freeParseInt = parseInt;
	
	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
	
	  /** Detect free variable `self`. */
	  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
	
	  /** Used as a reference to the global object. */
	  var root = freeGlobal || freeSelf || Function('return this')();
	
	  /** Detect free variable `exports`. */
	  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
	
	  /** Detect free variable `module`. */
	  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
	
	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports;
	
	  /** Detect free variable `process` from Node.js. */
	  var freeProcess = moduleExports && freeGlobal.process;
	
	  /** Used to access faster Node.js helpers. */
	  var nodeUtil = (function() {
	    try {
	      return freeProcess && freeProcess.binding('util');
	    } catch (e) {}
	  }());
	
	  /* Node.js helper references. */
	  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
	      nodeIsDate = nodeUtil && nodeUtil.isDate,
	      nodeIsMap = nodeUtil && nodeUtil.isMap,
	      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
	      nodeIsSet = nodeUtil && nodeUtil.isSet,
	      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
	
	  /*--------------------------------------------------------------------------*/
	
	  /**
	   * Adds the key-value `pair` to `map`.
	   *
	   * @private
	   * @param {Object} map The map to modify.
	   * @param {Array} pair The key-value pair to add.
	   * @returns {Object} Returns `map`.
	   */
	  function addMapEntry(map, pair) {
	    // Don't return `map.set` because it's not chainable in IE 11.
	    map.set(pair[0], pair[1]);
	    return map;
	  }
	
	  /**
	   * Adds `value` to `set`.
	   *
	   * @private
	   * @param {Object} set The set to modify.
	   * @param {*} value The value to add.
	   * @returns {Object} Returns `set`.
	   */
	  function addSetEntry(set, value) {
	    // Don't return `set.add` because it's not chainable in IE 11.
	    set.add(value);
	    return set;
	  }
	
	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    switch (args.length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }
	
	  /**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
	  function arrayAggregator(array, setter, iteratee, accumulator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;
	
	    while (++index < length) {
	      var value = array[index];
	      setter(accumulator, value, iteratee(value), array);
	    }
	    return accumulator;
	  }
	
	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length;
	
	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }
	
	  /**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEachRight(array, iteratee) {
	    var length = array == null ? 0 : array.length;
	
	    while (length--) {
	      if (iteratee(array[length], length, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }
	
	  /**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */
	  function arrayEvery(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;
	
	    while (++index < length) {
	      if (!predicate(array[index], index, array)) {
	        return false;
	      }
	    }
	    return true;
	  }
	
	  /**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
	  function arrayFilter(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        resIndex = 0,
	        result = [];
	
	    while (++index < length) {
	      var value = array[index];
	      if (predicate(value, index, array)) {
	        result[resIndex++] = value;
	      }
	    }
	    return result;
	  }
	
	  /**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludes(array, value) {
	    var length = array == null ? 0 : array.length;
	    return !!length && baseIndexOf(array, value, 0) > -1;
	  }
	
	  /**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludesWith(array, value, comparator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;
	
	    while (++index < length) {
	      if (comparator(value, array[index])) {
	        return true;
	      }
	    }
	    return false;
	  }
	
	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        result = Array(length);
	
	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }
	
	  /**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayPush(array, values) {
	    var index = -1,
	        length = values.length,
	        offset = array.length;
	
	    while (++index < length) {
	      array[offset + index] = values[index];
	    }
	    return array;
	  }
	
	  /**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduce(array, iteratee, accumulator, initAccum) {
	    var index = -1,
	        length = array == null ? 0 : array.length;
	
	    if (initAccum && length) {
	      accumulator = array[++index];
	    }
	    while (++index < length) {
	      accumulator = iteratee(accumulator, array[index], index, array);
	    }
	    return accumulator;
	  }
	
	  /**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	    var length = array == null ? 0 : array.length;
	    if (initAccum && length) {
	      accumulator = array[--length];
	    }
	    while (length--) {
	      accumulator = iteratee(accumulator, array[length], length, array);
	    }
	    return accumulator;
	  }
	
	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */
	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;
	
	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }
	    return false;
	  }
	
	  /**
	   * Gets the size of an ASCII `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  var asciiSize = baseProperty('length');
	
	  /**
	   * Converts an ASCII `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function asciiToArray(string) {
	    return string.split('');
	  }
	
	  /**
	   * Splits an ASCII `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function asciiWords(string) {
	    return string.match(reAsciiWord) || [];
	  }
	
	  /**
	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
	   * without support for iteratee shorthands, which iterates over `collection`
	   * using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
	  function baseFindKey(collection, predicate, eachFunc) {
	    var result;
	    eachFunc(collection, function(value, key, collection) {
	      if (predicate(value, key, collection)) {
	        result = key;
	        return false;
	      }
	    });
	    return result;
	  }
	
	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 1 : -1);
	
	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }
	
	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    return value === value
	      ? strictIndexOf(array, value, fromIndex)
	      : baseFindIndex(array, baseIsNaN, fromIndex);
	  }
	
	  /**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOfWith(array, value, fromIndex, comparator) {
	    var index = fromIndex - 1,
	        length = array.length;
	
	    while (++index < length) {
	      if (comparator(array[index], value)) {
	        return index;
	      }
	    }
	    return -1;
	  }
	
	  /**
	   * The base implementation of `_.isNaN` without support for number objects.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	   */
	  function baseIsNaN(value) {
	    return value !== value;
	  }
	
	  /**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */
	  function baseMean(array, iteratee) {
	    var length = array == null ? 0 : array.length;
	    return length ? (baseSum(array, iteratee) / length) : NAN;
	  }
	
	  /**
	   * The base implementation of `_.property` without support for deep paths.
	   *
	   * @private
	   * @param {string} key The key of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function baseProperty(key) {
	    return function(object) {
	      return object == null ? undefined : object[key];
	    };
	  }
	
	  /**
	   * The base implementation of `_.propertyOf` without support for deep paths.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function basePropertyOf(object) {
	    return function(key) {
	      return object == null ? undefined : object[key];
	    };
	  }
	
	  /**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	    eachFunc(collection, function(value, index, collection) {
	      accumulator = initAccum
	        ? (initAccum = false, value)
	        : iteratee(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }
	
	  /**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;
	
	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }
	
	  /**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
	  function baseSum(array, iteratee) {
	    var result,
	        index = -1,
	        length = array.length;
	
	    while (++index < length) {
	      var current = iteratee(array[index]);
	      if (current !== undefined) {
	        result = result === undefined ? current : (result + current);
	      }
	    }
	    return result;
	  }
	
	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);
	
	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }
	
	  /**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the key-value pairs.
	   */
	  function baseToPairs(object, props) {
	    return arrayMap(props, function(key) {
	      return [key, object[key]];
	    });
	  }
	
	  /**
	   * The base implementation of `_.unary` without support for storing metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new capped function.
	   */
	  function baseUnary(func) {
	    return function(value) {
	      return func(value);
	    };
	  }
	
	  /**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
	  function baseValues(object, props) {
	    return arrayMap(props, function(key) {
	      return object[key];
	    });
	  }
	
	  /**
	   * Checks if a `cache` value for `key` exists.
	   *
	   * @private
	   * @param {Object} cache The cache to query.
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */
	  function cacheHas(cache, key) {
	    return cache.has(key);
	  }
	
	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;
	
	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }
	
	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;
	
	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }
	
	  /**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
	  function countHolders(array, placeholder) {
	    var length = array.length,
	        result = 0;
	
	    while (length--) {
	      if (array[length] === placeholder) {
	        ++result;
	      }
	    }
	    return result;
	  }
	
	  /**
	   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	   * letters to basic Latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  var deburrLetter = basePropertyOf(deburredLetters);
	
	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  var escapeHtmlChar = basePropertyOf(htmlEscapes);
	
	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }
	
	  /**
	   * Gets the value at `key` of `object`.
	   *
	   * @private
	   * @param {Object} [object] The object to query.
	   * @param {string} key The key of the property to get.
	   * @returns {*} Returns the property value.
	   */
	  function getValue(object, key) {
	    return object == null ? undefined : object[key];
	  }
	
	  /**
	   * Checks if `string` contains Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	   */
	  function hasUnicode(string) {
	    return reHasUnicode.test(string);
	  }
	
	  /**
	   * Checks if `string` contains a word composed of Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a word is found, else `false`.
	   */
	  function hasUnicodeWord(string) {
	    return reHasUnicodeWord.test(string);
	  }
	
	  /**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function iteratorToArray(iterator) {
	    var data,
	        result = [];
	
	    while (!(data = iterator.next()).done) {
	      result.push(data.value);
	    }
	    return result;
	  }
	
	  /**
	   * Converts `map` to its key-value pairs.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the key-value pairs.
	   */
	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);
	
	    map.forEach(function(value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }
	
	  /**
	   * Creates a unary function that invokes `func` with its argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */
	  function overArg(func, transform) {
	    return function(arg) {
	      return func(transform(arg));
	    };
	  }
	
	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];
	
	    while (++index < length) {
	      var value = array[index];
	      if (value === placeholder || value === PLACEHOLDER) {
	        array[index] = PLACEHOLDER;
	        result[resIndex++] = index;
	      }
	    }
	    return result;
	  }
	
	  /**
	   * Converts `set` to an array of its values.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the values.
	   */
	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);
	
	    set.forEach(function(value) {
	      result[++index] = value;
	    });
	    return result;
	  }
	
	  /**
	   * Converts `set` to its value-value pairs.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the value-value pairs.
	   */
	  function setToPairs(set) {
	    var index = -1,
	        result = Array(set.size);
	
	    set.forEach(function(value) {
	      result[++index] = [value, value];
	    });
	    return result;
	  }
	
	  /**
	   * A specialized version of `_.indexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictIndexOf(array, value, fromIndex) {
	    var index = fromIndex - 1,
	        length = array.length;
	
	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }
	
	  /**
	   * A specialized version of `_.lastIndexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictLastIndexOf(array, value, fromIndex) {
	    var index = fromIndex + 1;
	    while (index--) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return index;
	  }
	
	  /**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
	  function stringSize(string) {
	    return hasUnicode(string)
	      ? unicodeSize(string)
	      : asciiSize(string);
	  }
	
	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return hasUnicode(string)
	      ? unicodeToArray(string)
	      : asciiToArray(string);
	  }
	
	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
	
	  /**
	   * Gets the size of a Unicode `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  function unicodeSize(string) {
	    var result = reUnicode.lastIndex = 0;
	    while (reUnicode.test(string)) {
	      ++result;
	    }
	    return result;
	  }
	
	  /**
	   * Converts a Unicode `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function unicodeToArray(string) {
	    return string.match(reUnicode) || [];
	  }
	
	  /**
	   * Splits a Unicode `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function unicodeWords(string) {
	    return string.match(reUnicodeWord) || [];
	  }
	
	  /*--------------------------------------------------------------------------*/
	
	  /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  var runInContext = (function runInContext(context) {
	    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
	
	    /** Built-in constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;
	
	    /** Used for built-in method references. */
	    var arrayProto = Array.prototype,
	        funcProto = Function.prototype,
	        objectProto = Object.prototype;
	
	    /** Used to detect overreaching core-js shims. */
	    var coreJsData = context['__core-js_shared__'];
	
	    /** Used to resolve the decompiled source of functions. */
	    var funcToString = funcProto.toString;
	
	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;
	
	    /** Used to generate unique IDs. */
	    var idCounter = 0;
	
	    /** Used to detect methods masquerading as native. */
	    var maskSrcKey = (function() {
	      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	      return uid ? ('Symbol(src)_1.' + uid) : '';
	    }());
	
	    /**
	     * Used to resolve the
	     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var nativeObjectToString = objectProto.toString;
	
	    /** Used to infer the `Object` constructor. */
	    var objectCtorString = funcToString.call(Object);
	
	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;
	
	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );
	
	    /** Built-in value references. */
	    var Buffer = moduleExports ? context.Buffer : undefined,
	        Symbol = context.Symbol,
	        Uint8Array = context.Uint8Array,
	        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
	        getPrototype = overArg(Object.getPrototypeOf, Object),
	        objectCreate = Object.create,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        splice = arrayProto.splice,
	        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
	        symIterator = Symbol ? Symbol.iterator : undefined,
	        symToStringTag = Symbol ? Symbol.toStringTag : undefined;
	
	    var defineProperty = (function() {
	      try {
	        var func = getNative(Object, 'defineProperty');
	        func({}, '', {});
	        return func;
	      } catch (e) {}
	    }());
	
	    /** Mocked built-ins. */
	    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
	        ctxNow = Date && Date.now !== root.Date.now && Date.now,
	        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
	
	    /* Built-in method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeFloor = Math.floor,
	        nativeGetSymbols = Object.getOwnPropertySymbols,
	        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
	        nativeIsFinite = context.isFinite,
	        nativeJoin = arrayProto.join,
	        nativeKeys = overArg(Object.keys, Object),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = Date.now,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random,
	        nativeReverse = arrayProto.reverse;
	
	    /* Built-in method references that are verified to be native. */
	    var DataView = getNative(context, 'DataView'),
	        Map = getNative(context, 'Map'),
	        Promise = getNative(context, 'Promise'),
	        Set = getNative(context, 'Set'),
	        WeakMap = getNative(context, 'WeakMap'),
	        nativeCreate = getNative(Object, 'create');
	
	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;
	
	    /** Used to lookup unminified function names. */
	    var realNames = {};
	
	    /** Used to detect maps, sets, and weakmaps. */
	    var dataViewCtorString = toSource(DataView),
	        mapCtorString = toSource(Map),
	        promiseCtorString = toSource(Promise),
	        setCtorString = toSource(Set),
	        weakMapCtorString = toSource(WeakMap);
	
	    /** Used to convert symbols to primitives and strings. */
	    var symbolProto = Symbol ? Symbol.prototype : undefined,
	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
	        symbolToString = symbolProto ? symbolProto.toString : undefined;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array of at least `200` elements
	     * and any iteratees accept only one argument. The heuristic for whether a
	     * section qualifies for shortcut fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	     * `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }
	
	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} proto The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(proto) {
	        if (!isObject(proto)) {
	          return {};
	        }
	        if (objectCreate) {
	          return objectCreate(proto);
	        }
	        object.prototype = proto;
	        var result = new object;
	        object.prototype = undefined;
	        return result;
	      };
	    }());
	
	    /**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }
	
	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */
	    function LodashWrapper(value, chainAll) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__chain__ = !!chainAll;
	      this.__index__ = 0;
	      this.__values__ = undefined;
	    }
	
	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
	    lodash.templateSettings = {
	
	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'escape': reEscape,
	
	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'evaluate': reEvaluate,
	
	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'interpolate': reInterpolate,
	
	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
	      'variable': '',
	
	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
	      'imports': {
	
	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
	        '_': lodash
	      }
	    };
	
	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	    lodash.prototype.constructor = lodash;
	
	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = MAX_ARRAY_LENGTH;
	      this.__views__ = [];
	    }
	
	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = copyArray(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = copyArray(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = copyArray(this.__views__);
	      return result;
	    }
	
	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }
	
	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);
	
	      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||
	          (arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];
	
	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;
	
	        var iterIndex = -1,
	            value = array[index];
	
	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);
	
	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }
	
	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Hash(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;
	
	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }
	
	    /**
	     * Removes all key-value entries from the hash.
	     *
	     * @private
	     * @name clear
	     * @memberOf Hash
	     */
	    function hashClear() {
	      this.__data__ = nativeCreate ? nativeCreate(null) : {};
	      this.size = 0;
	    }
	
	    /**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @name delete
	     * @memberOf Hash
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function hashDelete(key) {
	      var result = this.has(key) && delete this.__data__[key];
	      this.size -= result ? 1 : 0;
	      return result;
	    }
	
	    /**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Hash
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function hashGet(key) {
	      var data = this.__data__;
	      if (nativeCreate) {
	        var result = data[key];
	        return result === HASH_UNDEFINED ? undefined : result;
	      }
	      return hasOwnProperty.call(data, key) ? data[key] : undefined;
	    }
	
	    /**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Hash
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function hashHas(key) {
	      var data = this.__data__;
	      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	    }
	
	    /**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Hash
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the hash instance.
	     */
	    function hashSet(key, value) {
	      var data = this.__data__;
	      this.size += this.has(key) ? 0 : 1;
	      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	      return this;
	    }
	
	    // Add methods to `Hash`.
	    Hash.prototype.clear = hashClear;
	    Hash.prototype['delete'] = hashDelete;
	    Hash.prototype.get = hashGet;
	    Hash.prototype.has = hashHas;
	    Hash.prototype.set = hashSet;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates an list cache object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function ListCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;
	
	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }
	
	    /**
	     * Removes all key-value entries from the list cache.
	     *
	     * @private
	     * @name clear
	     * @memberOf ListCache
	     */
	    function listCacheClear() {
	      this.__data__ = [];
	      this.size = 0;
	    }
	
	    /**
	     * Removes `key` and its value from the list cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf ListCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function listCacheDelete(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);
	
	      if (index < 0) {
	        return false;
	      }
	      var lastIndex = data.length - 1;
	      if (index == lastIndex) {
	        data.pop();
	      } else {
	        splice.call(data, index, 1);
	      }
	      --this.size;
	      return true;
	    }
	
	    /**
	     * Gets the list cache value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf ListCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function listCacheGet(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);
	
	      return index < 0 ? undefined : data[index][1];
	    }
	
	    /**
	     * Checks if a list cache value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf ListCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function listCacheHas(key) {
	      return assocIndexOf(this.__data__, key) > -1;
	    }
	
	    /**
	     * Sets the list cache `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf ListCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the list cache instance.
	     */
	    function listCacheSet(key, value) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);
	
	      if (index < 0) {
	        ++this.size;
	        data.push([key, value]);
	      } else {
	        data[index][1] = value;
	      }
	      return this;
	    }
	
	    // Add methods to `ListCache`.
	    ListCache.prototype.clear = listCacheClear;
	    ListCache.prototype['delete'] = listCacheDelete;
	    ListCache.prototype.get = listCacheGet;
	    ListCache.prototype.has = listCacheHas;
	    ListCache.prototype.set = listCacheSet;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function MapCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;
	
	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }
	
	    /**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
	    function mapCacheClear() {
	      this.size = 0;
	      this.__data__ = {
	        'hash': new Hash,
	        'map': new (Map || ListCache),
	        'string': new Hash
	      };
	    }
	
	    /**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function mapCacheDelete(key) {
	      var result = getMapData(this, key)['delete'](key);
	      this.size -= result ? 1 : 0;
	      return result;
	    }
	
	    /**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function mapCacheGet(key) {
	      return getMapData(this, key).get(key);
	    }
	
	    /**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapCacheHas(key) {
	      return getMapData(this, key).has(key);
	    }
	
	    /**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */
	    function mapCacheSet(key, value) {
	      var data = getMapData(this, key),
	          size = data.size;
	
	      data.set(key, value);
	      this.size += data.size == size ? 0 : 1;
	      return this;
	    }
	
	    // Add methods to `MapCache`.
	    MapCache.prototype.clear = mapCacheClear;
	    MapCache.prototype['delete'] = mapCacheDelete;
	    MapCache.prototype.get = mapCacheGet;
	    MapCache.prototype.has = mapCacheHas;
	    MapCache.prototype.set = mapCacheSet;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     *
	     * Creates an array cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var index = -1,
	          length = values == null ? 0 : values.length;
	
	      this.__data__ = new MapCache;
	      while (++index < length) {
	        this.add(values[index]);
	      }
	    }
	
	    /**
	     * Adds `value` to the array cache.
	     *
	     * @private
	     * @name add
	     * @memberOf SetCache
	     * @alias push
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache instance.
	     */
	    function setCacheAdd(value) {
	      this.__data__.set(value, HASH_UNDEFINED);
	      return this;
	    }
	
	    /**
	     * Checks if `value` is in the array cache.
	     *
	     * @private
	     * @name has
	     * @memberOf SetCache
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
	    function setCacheHas(value) {
	      return this.__data__.has(value);
	    }
	
	    // Add methods to `SetCache`.
	    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	    SetCache.prototype.has = setCacheHas;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Stack(entries) {
	      var data = this.__data__ = new ListCache(entries);
	      this.size = data.size;
	    }
	
	    /**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
	    function stackClear() {
	      this.__data__ = new ListCache;
	      this.size = 0;
	    }
	
	    /**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function stackDelete(key) {
	      var data = this.__data__,
	          result = data['delete'](key);
	
	      this.size = data.size;
	      return result;
	    }
	
	    /**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function stackGet(key) {
	      return this.__data__.get(key);
	    }
	
	    /**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function stackHas(key) {
	      return this.__data__.has(key);
	    }
	
	    /**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */
	    function stackSet(key, value) {
	      var data = this.__data__;
	      if (data instanceof ListCache) {
	        var pairs = data.__data__;
	        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	          pairs.push([key, value]);
	          this.size = ++data.size;
	          return this;
	        }
	        data = this.__data__ = new MapCache(pairs);
	      }
	      data.set(key, value);
	      this.size = data.size;
	      return this;
	    }
	
	    // Add methods to `Stack`.
	    Stack.prototype.clear = stackClear;
	    Stack.prototype['delete'] = stackDelete;
	    Stack.prototype.get = stackGet;
	    Stack.prototype.has = stackHas;
	    Stack.prototype.set = stackSet;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates an array of the enumerable property names of the array-like `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @param {boolean} inherited Specify returning inherited property names.
	     * @returns {Array} Returns the array of property names.
	     */
	    function arrayLikeKeys(value, inherited) {
	      var isArr = isArray(value),
	          isArg = !isArr && isArguments(value),
	          isBuff = !isArr && !isArg && isBuffer(value),
	          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	          skipIndexes = isArr || isArg || isBuff || isType,
	          result = skipIndexes ? baseTimes(value.length, String) : [],
	          length = result.length;
	
	      for (var key in value) {
	        if ((inherited || hasOwnProperty.call(value, key)) &&
	            !(skipIndexes && (
	               // Safari 9 has enumerable `arguments.length` in strict mode.
	               key == 'length' ||
	               // Node.js 0.10 has enumerable non-index properties on buffers.
	               (isBuff && (key == 'offset' || key == 'parent')) ||
	               // PhantomJS 2 has enumerable non-index properties on typed arrays.
	               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	               // Skip index properties.
	               isIndex(key, length)
	            ))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * A specialized version of `_.sample` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @returns {*} Returns the random element.
	     */
	    function arraySample(array) {
	      var length = array.length;
	      return length ? array[baseRandom(0, length - 1)] : undefined;
	    }
	
	    /**
	     * A specialized version of `_.sampleSize` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function arraySampleSize(array, n) {
	      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
	    }
	
	    /**
	     * A specialized version of `_.shuffle` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function arrayShuffle(array) {
	      return shuffleSelf(copyArray(array));
	    }
	
	    /**
	     * Used by `_.defaults` to customize its `_.assignIn` use.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
	    function assignInDefaults(objValue, srcValue, key, object) {
	      if (objValue === undefined ||
	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        return srcValue;
	      }
	      return objValue;
	    }
	
	    /**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignMergeValue(object, key, value) {
	      if ((value !== undefined && !eq(object[key], value)) ||
	          (value === undefined && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }
	
	    /**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignValue(object, key, value) {
	      var objValue = object[key];
	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	          (value === undefined && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }
	
	    /**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
	    function assocIndexOf(array, key) {
	      var length = array.length;
	      while (length--) {
	        if (eq(array[length][0], key)) {
	          return length;
	        }
	      }
	      return -1;
	    }
	
	    /**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseAggregator(collection, setter, iteratee, accumulator) {
	      baseEach(collection, function(value, key, collection) {
	        setter(accumulator, value, iteratee(value), collection);
	      });
	      return accumulator;
	    }
	
	    /**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return object && copyObject(source, keys(source), object);
	    }
	
	    /**
	     * The base implementation of `assignValue` and `assignMergeValue` without
	     * value checks.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function baseAssignValue(object, key, value) {
	      if (key == '__proto__' && defineProperty) {
	        defineProperty(object, key, {
	          'configurable': true,
	          'enumerable': true,
	          'value': value,
	          'writable': true
	        });
	      } else {
	        object[key] = value;
	      }
	    }
	
	    /**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths of elements to pick.
	     * @returns {Array} Returns the picked elements.
	     */
	    function baseAt(object, paths) {
	      var index = -1,
	          length = paths.length,
	          result = Array(length),
	          skip = object == null;
	
	      while (++index < length) {
	        result[index] = skip ? undefined : get(object, paths[index]);
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.clamp` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
	    function baseClamp(number, lower, upper) {
	      if (number === number) {
	        if (upper !== undefined) {
	          number = number <= upper ? number : upper;
	        }
	        if (lower !== undefined) {
	          number = number >= lower ? number : lower;
	        }
	      }
	      return number;
	    }
	
	    /**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {boolean} [isFull] Specify a clone including symbols.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object, stack) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return copyArray(value, result);
	        }
	      } else {
	        var tag = getTag(value),
	            isFunc = tag == funcTag || tag == genTag;
	
	        if (isBuffer(value)) {
	          return cloneBuffer(value, isDeep);
	        }
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return copySymbols(value, baseAssign(result, value));
	          }
	        } else {
	          if (!cloneableTags[tag]) {
	            return object ? value : {};
	          }
	          result = initCloneByTag(value, tag, baseClone, isDeep);
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stack || (stack = new Stack);
	      var stacked = stack.get(value);
	      if (stacked) {
	        return stacked;
	      }
	      stack.set(value, result);
	
	      var props = isArr ? undefined : (isFull ? getAllKeys : keys)(value);
	      arrayEach(props || value, function(subValue, key) {
	        if (props) {
	          key = subValue;
	          subValue = value[key];
	        }
	        // Recursively populate clone (susceptible to call stack limits).
	        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseConforms(source) {
	      var props = keys(source);
	      return function(object) {
	        return baseConformsTo(object, source, props);
	      };
	    }
	
	    /**
	     * The base implementation of `_.conformsTo` which accepts `props` to check.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     */
	    function baseConformsTo(object, source, props) {
	      var length = props.length;
	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (length--) {
	        var key = props[length],
	            predicate = source[key],
	            value = object[key];
	
	        if ((value === undefined && !(key in object)) || !predicate(value)) {
	          return false;
	        }
	      }
	      return true;
	    }
	
	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts `args`
	     * to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Array} args The arguments to provide to `func`.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }
	
	    /**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          isCommon = true,
	          length = array.length,
	          result = [],
	          valuesLength = values.length;
	
	      if (!length) {
	        return result;
	      }
	      if (iteratee) {
	        values = arrayMap(values, baseUnary(iteratee));
	      }
	      if (comparator) {
	        includes = arrayIncludesWith;
	        isCommon = false;
	      }
	      else if (values.length >= LARGE_ARRAY_SIZE) {
	        includes = cacheHas;
	        isCommon = false;
	        values = new SetCache(values);
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee == null ? value : iteratee(value);
	
	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === computed) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (!includes(values, computed, comparator)) {
	          result.push(value);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);
	
	    /**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);
	
	    /**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of methods like `_.max` and `_.min` which accepts a
	     * `comparator` to determine the extremum value.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The iteratee invoked per iteration.
	     * @param {Function} comparator The comparator used to compare values.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(array, iteratee, comparator) {
	      var index = -1,
	          length = array.length;
	
	      while (++index < length) {
	        var value = array[index],
	            current = iteratee(value);
	
	        if (current != null && (computed === undefined
	              ? (current === current && !isSymbol(current))
	              : comparator(current, computed)
	            )) {
	          var computed = current,
	              result = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;
	
	      start = toInteger(start);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : toInteger(end);
	      if (end < 0) {
	        end += length;
	      }
	      end = start > end ? 0 : toLength(end);
	      while (start < end) {
	        array[start++] = value;
	      }
	      return array;
	    }
	
	    /**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, depth, predicate, isStrict, result) {
	      var index = -1,
	          length = array.length;
	
	      predicate || (predicate = isFlattenable);
	      result || (result = []);
	
	      while (++index < length) {
	        var value = array[index];
	        if (depth > 0 && predicate(value)) {
	          if (depth > 1) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, depth - 1, predicate, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();
	
	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);
	
	    /**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return object && baseFor(object, iteratee, keys);
	    }
	
	    /**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return object && baseForRight(object, iteratee, keys);
	    }
	
	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the function names.
	     */
	    function baseFunctions(object, props) {
	      return arrayFilter(props, function(key) {
	        return isFunction(object[key]);
	      });
	    }
	
	    /**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path) {
	      path = isKey(path, object) ? [path] : castPath(path);
	
	      var index = 0,
	          length = path.length;
	
	      while (object != null && index < length) {
	        object = object[toKey(path[index++])];
	      }
	      return (index && index == length) ? object : undefined;
	    }
	
	    /**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	      var result = keysFunc(object);
	      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	    }
	
	    /**
	     * The base implementation of `getTag` without fallbacks for buggy environments.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    function baseGetTag(value) {
	      if (value == null) {
	        return value === undefined ? undefinedTag : nullTag;
	      }
	      value = Object(value);
	      return (symToStringTag && symToStringTag in value)
	        ? getRawTag(value)
	        : objectToString(value);
	    }
	
	    /**
	     * The base implementation of `_.gt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     */
	    function baseGt(value, other) {
	      return value > other;
	    }
	
	    /**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHas(object, key) {
	      return object != null && hasOwnProperty.call(object, key);
	    }
	
	    /**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHasIn(object, key) {
	      return object != null && key in Object(object);
	    }
	
	    /**
	     * The base implementation of `_.inRange` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
	    function baseInRange(number, start, end) {
	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
	    }
	
	    /**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
	    function baseIntersection(arrays, iteratee, comparator) {
	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
	          length = arrays[0].length,
	          othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(othLength),
	          maxLength = Infinity,
	          result = [];
	
	      while (othIndex--) {
	        var array = arrays[othIndex];
	        if (othIndex && iteratee) {
	          array = arrayMap(array, baseUnary(iteratee));
	        }
	        maxLength = nativeMin(array.length, maxLength);
	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	          ? new SetCache(othIndex && array)
	          : undefined;
	      }
	      array = arrays[0];
	
	      var index = -1,
	          seen = caches[0];
	
	      outer:
	      while (++index < length && result.length < maxLength) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;
	
	        value = (comparator || value !== 0) ? value : 0;
	        if (!(seen
	              ? cacheHas(seen, computed)
	              : includes(result, computed, comparator)
	            )) {
	          othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if (!(cache
	                  ? cacheHas(cache, computed)
	                  : includes(arrays[othIndex], computed, comparator))
	                ) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseInverter(object, setter, iteratee, accumulator) {
	      baseForOwn(object, function(value, key, object) {
	        setter(accumulator, iteratee(value), key, object);
	      });
	      return accumulator;
	    }
	
	    /**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function baseInvoke(object, path, args) {
	      if (!isKey(path, object)) {
	        path = castPath(path);
	        object = parent(object, path);
	        path = last(path);
	      }
	      var func = object == null ? object : object[toKey(path)];
	      return func == null ? undefined : apply(func, object, args);
	    }
	
	    /**
	     * The base implementation of `_.isArguments`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     */
	    function baseIsArguments(value) {
	      return isObjectLike(value) && baseGetTag(value) == argsTag;
	    }
	
	    /**
	     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     */
	    function baseIsArrayBuffer(value) {
	      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
	    }
	
	    /**
	     * The base implementation of `_.isDate` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     */
	    function baseIsDate(value) {
	      return isObjectLike(value) && baseGetTag(value) == dateTag;
	    }
	
	    /**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {boolean} [bitmask] The bitmask of comparison flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - Unordered comparison
	     *     2 - Partial comparison
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, bitmask, stack) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
	    }
	
	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;
	
	      if (!objIsArr) {
	        objTag = getTag(object);
	        objTag = objTag == argsTag ? objectTag : objTag;
	      }
	      if (!othIsArr) {
	        othTag = getTag(other);
	        othTag = othTag == argsTag ? objectTag : othTag;
	      }
	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;
	
	      if (isSameTag && isBuffer(object)) {
	        if (!isBuffer(other)) {
	          return false;
	        }
	        objIsArr = true;
	        objIsObj = false;
	      }
	      if (isSameTag && !objIsObj) {
	        stack || (stack = new Stack);
	        return (objIsArr || isTypedArray(object))
	          ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
	          : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
	      }
	      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
	
	        if (objIsWrapped || othIsWrapped) {
	          var objUnwrapped = objIsWrapped ? object.value() : object,
	              othUnwrapped = othIsWrapped ? other.value() : other;
	
	          stack || (stack = new Stack);
	          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      stack || (stack = new Stack);
	      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
	    }
	
	    /**
	     * The base implementation of `_.isMap` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     */
	    function baseIsMap(value) {
	      return isObjectLike(value) && getTag(value) == mapTag;
	    }
	
	    /**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, source, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;
	
	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];
	
	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var stack = new Stack;
	          if (customizer) {
	            var result = customizer(objValue, srcValue, key, object, source, stack);
	          }
	          if (!(result === undefined
	                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
	                : result
	              )) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }
	
	    /**
	     * The base implementation of `_.isNative` without bad shim checks.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     */
	    function baseIsNative(value) {
	      if (!isObject(value) || isMasked(value)) {
	        return false;
	      }
	      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	      return pattern.test(toSource(value));
	    }
	
	    /**
	     * The base implementation of `_.isRegExp` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     */
	    function baseIsRegExp(value) {
	      return isObjectLike(value) && baseGetTag(value) == regexpTag;
	    }
	
	    /**
	     * The base implementation of `_.isSet` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     */
	    function baseIsSet(value) {
	      return isObjectLike(value) && getTag(value) == setTag;
	    }
	
	    /**
	     * The base implementation of `_.isTypedArray` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     */
	    function baseIsTypedArray(value) {
	      return isObjectLike(value) &&
	        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	    }
	
	    /**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
	    function baseIteratee(value) {
	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	      if (typeof value == 'function') {
	        return value;
	      }
	      if (value == null) {
	        return identity;
	      }
	      if (typeof value == 'object') {
	        return isArray(value)
	          ? baseMatchesProperty(value[0], value[1])
	          : baseMatches(value);
	      }
	      return property(value);
	    }
	
	    /**
	     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeys(object) {
	      if (!isPrototype(object)) {
	        return nativeKeys(object);
	      }
	      var result = [];
	      for (var key in Object(object)) {
	        if (hasOwnProperty.call(object, key) && key != 'constructor') {
	          result.push(key);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeysIn(object) {
	      if (!isObject(object)) {
	        return nativeKeysIn(object);
	      }
	      var isProto = isPrototype(object),
	          result = [];
	
	      for (var key in object) {
	        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.lt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     */
	    function baseLt(value, other) {
	      return value < other;
	    }
	
	    /**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];
	
	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	      }
	      return function(object) {
	        return object === source || baseIsMatch(object, source, matchData);
	      };
	    }
	
	    /**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      if (isKey(path) && isStrictComparable(srcValue)) {
	        return matchesStrictComparable(toKey(path), srcValue);
	      }
	      return function(object) {
	        var objValue = get(object, path);
	        return (objValue === undefined && objValue === srcValue)
	          ? hasIn(object, path)
	          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
	      };
	    }
	
	    /**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMerge(object, source, srcIndex, customizer, stack) {
	      if (object === source) {
	        return;
	      }
	      baseFor(source, function(srcValue, key) {
	        if (isObject(srcValue)) {
	          stack || (stack = new Stack);
	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	        }
	        else {
	          var newValue = customizer
	            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
	            : undefined;
	
	          if (newValue === undefined) {
	            newValue = srcValue;
	          }
	          assignMergeValue(object, key, newValue);
	        }
	      }, keysIn);
	    }
	
	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	      var objValue = object[key],
	          srcValue = source[key],
	          stacked = stack.get(srcValue);
	
	      if (stacked) {
	        assignMergeValue(object, key, stacked);
	        return;
	      }
	      var newValue = customizer
	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	        : undefined;
	
	      var isCommon = newValue === undefined;
	
	      if (isCommon) {
	        var isArr = isArray(srcValue),
	            isBuff = !isArr && isBuffer(srcValue),
	            isTyped = !isArr && !isBuff && isTypedArray(srcValue);
	
	        newValue = srcValue;
	        if (isArr || isBuff || isTyped) {
	          if (isArray(objValue)) {
	            newValue = objValue;
	          }
	          else if (isArrayLikeObject(objValue)) {
	            newValue = copyArray(objValue);
	          }
	          else if (isBuff) {
	            isCommon = false;
	            newValue = cloneBuffer(srcValue, true);
	          }
	          else if (isTyped) {
	            isCommon = false;
	            newValue = cloneTypedArray(srcValue, true);
	          }
	          else {
	            newValue = [];
	          }
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          newValue = objValue;
	          if (isArguments(objValue)) {
	            newValue = toPlainObject(objValue);
	          }
	          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
	            newValue = initCloneObject(srcValue);
	          }
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, newValue);
	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	        stack['delete'](srcValue);
	      }
	      assignMergeValue(object, key, newValue);
	    }
	
	    /**
	     * The base implementation of `_.nth` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */
	    function baseNth(array, n) {
	      var length = array.length;
	      if (!length) {
	        return;
	      }
	      n += n < 0 ? length : 0;
	      return isIndex(n, length) ? array[n] : undefined;
	    }
	
	    /**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseOrderBy(collection, iteratees, orders) {
	      var index = -1;
	      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
	
	      var result = baseMap(collection, function(value, key, collection) {
	        var criteria = arrayMap(iteratees, function(iteratee) {
	          return iteratee(value);
	        });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });
	
	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }
	
	    /**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property identifiers to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function basePick(object, props) {
	      object = Object(object);
	      return basePickBy(object, props, function(value, key) {
	        return key in object;
	      });
	    }
	
	    /**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property identifiers to pick from.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
	    function basePickBy(object, props, predicate) {
	      var index = -1,
	          length = props.length,
	          result = {};
	
	      while (++index < length) {
	        var key = props[index],
	            value = object[key];
	
	        if (predicate(value, key)) {
	          baseAssignValue(result, key, value);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */
	    function basePropertyDeep(path) {
	      return function(object) {
	        return baseGet(object, path);
	      };
	    }
	
	    /**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAll(array, values, iteratee, comparator) {
	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	          index = -1,
	          length = values.length,
	          seen = array;
	
	      if (array === values) {
	        values = copyArray(values);
	      }
	      if (iteratee) {
	        seen = arrayMap(array, baseUnary(iteratee));
	      }
	      while (++index < length) {
	        var fromIndex = 0,
	            value = values[index],
	            computed = iteratee ? iteratee(value) : value;
	
	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	          if (seen !== array) {
	            splice.call(seen, fromIndex, 1);
	          }
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }
	
	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0,
	          lastIndex = length - 1;
	
	      while (length--) {
	        var index = indexes[length];
	        if (length == lastIndex || index !== previous) {
	          var previous = index;
	          if (isIndex(index)) {
	            splice.call(array, index, 1);
	          }
	          else if (!isKey(index, array)) {
	            var path = castPath(index),
	                object = parent(array, path);
	
	            if (object != null) {
	              delete object[toKey(last(path))];
	            }
	          }
	          else {
	            delete array[toKey(index)];
	          }
	        }
	      }
	      return array;
	    }
	
	    /**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(lower, upper) {
	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
	    }
	
	    /**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the range of numbers.
	     */
	    function baseRange(start, end, step, fromRight) {
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);
	
	      while (length--) {
	        result[fromRight ? length : ++index] = start;
	        start += step;
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */
	    function baseRepeat(string, n) {
	      var result = '';
	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        if (n) {
	          string += string;
	        }
	      } while (n);
	
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     */
	    function baseRest(func, start) {
	      return setToString(overRest(func, start, identity), func + '');
	    }
	
	    /**
	     * The base implementation of `_.sample`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     */
	    function baseSample(collection) {
	      return arraySample(values(collection));
	    }
	
	    /**
	     * The base implementation of `_.sampleSize` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function baseSampleSize(collection, n) {
	      var array = values(collection);
	      return shuffleSelf(array, baseClamp(n, 0, array.length));
	    }
	
	    /**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseSet(object, path, value, customizer) {
	      if (!isObject(object)) {
	        return object;
	      }
	      path = isKey(path, object) ? [path] : castPath(path);
	
	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;
	
	      while (nested != null && ++index < length) {
	        var key = toKey(path[index]),
	            newValue = value;
	
	        if (index != lastIndex) {
	          var objValue = nested[key];
	          newValue = customizer ? customizer(objValue, key, nested) : undefined;
	          if (newValue === undefined) {
	            newValue = isObject(objValue)
	              ? objValue
	              : (isIndex(path[index + 1]) ? [] : {});
	          }
	        }
	        assignValue(nested, key, newValue);
	        nested = nested[key];
	      }
	      return object;
	    }
	
	    /**
	     * The base implementation of `setData` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };
	
	    /**
	     * The base implementation of `setToString` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetToString = !defineProperty ? identity : function(func, string) {
	      return defineProperty(func, 'toString', {
	        'configurable': true,
	        'enumerable': false,
	        'value': constant(string),
	        'writable': true
	      });
	    };
	
	    /**
	     * The base implementation of `_.shuffle`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function baseShuffle(collection) {
	      return shuffleSelf(values(collection));
	    }
	
	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;
	
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = end > length ? length : end;
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;
	
	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;
	
	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }
	
	    /**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndex(array, value, retHighest) {
	      var low = 0,
	          high = array == null ? low : array.length;
	
	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];
	
	          if (computed !== null && !isSymbol(computed) &&
	              (retHighest ? (computed <= value) : (computed < value))) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return baseSortedIndexBy(array, value, identity, retHighest);
	    }
	
	    /**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);
	
	      var low = 0,
	          high = array == null ? 0 : array.length,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsSymbol = isSymbol(value),
	          valIsUndefined = value === undefined;
	
	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            othIsDefined = computed !== undefined,
	            othIsNull = computed === null,
	            othIsReflexive = computed === computed,
	            othIsSymbol = isSymbol(computed);
	
	        if (valIsNaN) {
	          var setLow = retHighest || othIsReflexive;
	        } else if (valIsUndefined) {
	          setLow = othIsReflexive && (retHighest || othIsDefined);
	        } else if (valIsNull) {
	          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
	        } else if (valIsSymbol) {
	          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
	        } else if (othIsNull || othIsSymbol) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }
	
	    /**
	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
	     * support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniq(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          resIndex = 0,
	          result = [];
	
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;
	
	        if (!index || !eq(computed, seen)) {
	          var seen = computed;
	          result[resIndex++] = value === 0 ? 0 : value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.toNumber` which doesn't ensure correct
	     * conversions of binary, hexadecimal, or octal string values.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     */
	    function baseToNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      return +value;
	    }
	
	    /**
	     * The base implementation of `_.toString` which doesn't convert nullish
	     * values to empty strings.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     */
	    function baseToString(value) {
	      // Exit early for strings to avoid a performance hit in some environments.
	      if (typeof value == 'string') {
	        return value;
	      }
	      if (isArray(value)) {
	        // Recursively convert values (susceptible to call stack limits).
	        return arrayMap(value, baseToString) + '';
	      }
	      if (isSymbol(value)) {
	        return symbolToString ? symbolToString.call(value) : '';
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }
	
	    /**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          length = array.length,
	          isCommon = true,
	          result = [],
	          seen = result;
	
	      if (comparator) {
	        isCommon = false;
	        includes = arrayIncludesWith;
	      }
	      else if (length >= LARGE_ARRAY_SIZE) {
	        var set = iteratee ? null : createSet(array);
	        if (set) {
	          return setToArray(set);
	        }
	        isCommon = false;
	        includes = cacheHas;
	        seen = new SetCache;
	      }
	      else {
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;
	
	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (!includes(seen, computed, comparator)) {
	          if (seen !== result) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
	    function baseUnset(object, path) {
	      path = isKey(path, object) ? [path] : castPath(path);
	      object = parent(object, path);
	
	      var key = toKey(last(path));
	      return !(object != null && hasOwnProperty.call(object, key)) || delete object[key];
	    }
	
	    /**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseUpdate(object, path, updater, customizer) {
	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
	    }
	
	    /**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;
	
	      while ((fromRight ? index-- : ++index < length) &&
	        predicate(array[index], index, array)) {}
	
	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }
	
	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      return arrayReduce(actions, function(result, action) {
	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }, result);
	    }
	
	    /**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
	    function baseXor(arrays, iteratee, comparator) {
	      var length = arrays.length;
	      if (length < 2) {
	        return length ? baseUniq(arrays[0]) : [];
	      }
	      var index = -1,
	          result = Array(length);
	
	      while (++index < length) {
	        var array = arrays[index],
	            othIndex = -1;
	
	        while (++othIndex < length) {
	          if (othIndex != index) {
	            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
	          }
	        }
	      }
	      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
	    }
	
	    /**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
	    function baseZipObject(props, values, assignFunc) {
	      var index = -1,
	          length = props.length,
	          valsLength = values.length,
	          result = {};
	
	      while (++index < length) {
	        var value = index < valsLength ? values[index] : undefined;
	        assignFunc(result, props[index], value);
	      }
	      return result;
	    }
	
	    /**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */
	    function castArrayLikeObject(value) {
	      return isArrayLikeObject(value) ? value : [];
	    }
	
	    /**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */
	    function castFunction(value) {
	      return typeof value == 'function' ? value : identity;
	    }
	
	    /**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast property path array.
	     */
	    function castPath(value) {
	      return isArray(value) ? value : stringToPath(value);
	    }
	
	    /**
	     * A `baseRest` alias which can be replaced with `identity` by module
	     * replacement plugins.
	     *
	     * @private
	     * @type {Function}
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    var castRest = baseRest;
	
	    /**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */
	    function castSlice(array, start, end) {
	      var length = array.length;
	      end = end === undefined ? length : end;
	      return (!start && end >= length) ? array : baseSlice(array, start, end);
	    }
	
	    /**
	     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
	     *
	     * @private
	     * @param {number|Object} id The timer id or timeout object of the timer to clear.
	     */
	    var clearTimeout = ctxClearTimeout || function(id) {
	      return root.clearTimeout(id);
	    };
	
	    /**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
	    function cloneBuffer(buffer, isDeep) {
	      if (isDeep) {
	        return buffer.slice();
	      }
	      var length = buffer.length,
	          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
	
	      buffer.copy(result);
	      return result;
	    }
	
	    /**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function cloneArrayBuffer(arrayBuffer) {
	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	      return result;
	    }
	
	    /**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */
	    function cloneDataView(dataView, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	    }
	
	    /**
	     * Creates a clone of `map`.
	     *
	     * @private
	     * @param {Object} map The map to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned map.
	     */
	    function cloneMap(map, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
	      return arrayReduce(array, addMapEntry, new map.constructor);
	    }
	
	    /**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
	    function cloneRegExp(regexp) {
	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	      result.lastIndex = regexp.lastIndex;
	      return result;
	    }
	
	    /**
	     * Creates a clone of `set`.
	     *
	     * @private
	     * @param {Object} set The set to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned set.
	     */
	    function cloneSet(set, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
	      return arrayReduce(array, addSetEntry, new set.constructor);
	    }
	
	    /**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
	    function cloneSymbol(symbol) {
	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	    }
	
	    /**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
	    function cloneTypedArray(typedArray, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	    }
	
	    /**
	     * Compares values to sort them in ascending order.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {number} Returns the sort order indicator for `value`.
	     */
	    function compareAscending(value, other) {
	      if (value !== other) {
	        var valIsDefined = value !== undefined,
	            valIsNull = value === null,
	            valIsReflexive = value === value,
	            valIsSymbol = isSymbol(value);
	
	        var othIsDefined = other !== undefined,
	            othIsNull = other === null,
	            othIsReflexive = other === other,
	            othIsSymbol = isSymbol(other);
	
	        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	            (valIsNull && othIsDefined && othIsReflexive) ||
	            (!valIsDefined && othIsReflexive) ||
	            !valIsReflexive) {
	          return 1;
	        }
	        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	            (othIsNull && valIsDefined && valIsReflexive) ||
	            (!othIsDefined && valIsReflexive) ||
	            !othIsReflexive) {
	          return -1;
	        }
	      }
	      return 0;
	    }
	
	    /**
	     * Used by `_.orderBy` to compare multiple properties of a value to another
	     * and stable sort them.
	     *
	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	     * specify an order of "desc" for descending or "asc" for ascending sort order
	     * of corresponding values.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {boolean[]|string[]} orders The order to sort by for each property.
	     * @returns {number} Returns the sort order indicator for `object`.
	     */
	    function compareMultiple(object, other, orders) {
	      var index = -1,
	          objCriteria = object.criteria,
	          othCriteria = other.criteria,
	          length = objCriteria.length,
	          ordersLength = orders.length;
	
	      while (++index < length) {
	        var result = compareAscending(objCriteria[index], othCriteria[index]);
	        if (result) {
	          if (index >= ordersLength) {
	            return result;
	          }
	          var order = orders[index];
	          return result * (order == 'desc' ? -1 : 1);
	        }
	      }
	      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	      // that causes it, under certain circumstances, to provide the same value for
	      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	      // for more details.
	      //
	      // This also ensures a stable sort in V8 and other engines.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	      return object.index - other.index;
	    }
	
	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersLength = holders.length,
	          leftIndex = -1,
	          leftLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(leftLength + rangeLength),
	          isUncurried = !isCurried;
	
	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[holders[argsIndex]] = args[argsIndex];
	        }
	      }
	      while (rangeLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }
	
	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersIndex = -1,
	          holdersLength = holders.length,
	          rightIndex = -1,
	          rightLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(rangeLength + rightLength),
	          isUncurried = !isCurried;
	
	      while (++argsIndex < rangeLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[offset + holders[holdersIndex]] = args[argsIndex++];
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function copyArray(source, array) {
	      var index = -1,
	          length = source.length;
	
	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }
	
	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObject(source, props, object, customizer) {
	      var isNew = !object;
	      object || (object = {});
	
	      var index = -1,
	          length = props.length;
	
	      while (++index < length) {
	        var key = props[index];
	
	        var newValue = customizer
	          ? customizer(object[key], source[key], key, object, source)
	          : undefined;
	
	        if (newValue === undefined) {
	          newValue = source[key];
	        }
	        if (isNew) {
	          baseAssignValue(object, key, newValue);
	        } else {
	          assignValue(object, key, newValue);
	        }
	      }
	      return object;
	    }
	
	    /**
	     * Copies own symbol properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbols(source, object) {
	      return copyObject(source, getSymbols(source), object);
	    }
	
	    /**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};
	
	        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
	      };
	    }
	
	    /**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return baseRest(function(object, sources) {
	        var index = -1,
	            length = sources.length,
	            customizer = length > 1 ? sources[length - 1] : undefined,
	            guard = length > 2 ? sources[2] : undefined;
	
	        customizer = (assigner.length > 3 && typeof customizer == 'function')
	          ? (length--, customizer)
	          : undefined;
	
	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        object = Object(object);
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, index, customizer);
	          }
	        }
	        return object;
	      });
	    }
	
	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        if (collection == null) {
	          return collection;
	        }
	        if (!isArrayLike(collection)) {
	          return eachFunc(collection, iteratee);
	        }
	        var length = collection.length,
	            index = fromRight ? length : -1,
	            iterable = Object(collection);
	
	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }
	
	    /**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var index = -1,
	            iterable = Object(object),
	            props = keysFunc(object),
	            length = props.length;
	
	        while (length--) {
	          var key = props[fromRight ? length : ++index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }
	
	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createBind(func, bitmask, thisArg) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtor(func);
	
	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, arguments);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new case function.
	     */
	    function createCaseFirst(methodName) {
	      return function(string) {
	        string = toString(string);
	
	        var strSymbols = hasUnicode(string)
	          ? stringToArray(string)
	          : undefined;
	
	        var chr = strSymbols
	          ? strSymbols[0]
	          : string.charAt(0);
	
	        var trailing = strSymbols
	          ? castSlice(strSymbols, 1).join('')
	          : string.slice(1);
	
	        return chr[methodName]() + trailing;
	      };
	    }
	
	    /**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	      };
	    }
	
	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtor(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors. See
	        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);
	
	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }
	
	    /**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCurry(func, bitmask, arity) {
	      var Ctor = createCtor(func);
	
	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length,
	            placeholder = getHolder(wrapper);
	
	        while (index--) {
	          args[index] = arguments[index];
	        }
	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	          ? []
	          : replaceHolders(args, placeholder);
	
	        length -= holders.length;
	        if (length < arity) {
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, undefined,
	            args, holders, undefined, undefined, arity - length);
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return apply(fn, this, args);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} findIndexFunc The function to find the collection index.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(findIndexFunc) {
	      return function(collection, predicate, fromIndex) {
	        var iterable = Object(collection);
	        if (!isArrayLike(collection)) {
	          var iteratee = getIteratee(predicate, 3);
	          collection = keys(collection);
	          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
	        }
	        var index = findIndexFunc(collection, predicate, fromIndex);
	        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
	      };
	    }
	
	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return flatRest(function(funcs) {
	        var length = funcs.length,
	            index = length,
	            prereq = LodashWrapper.prototype.thru;
	
	        if (fromRight) {
	          funcs.reverse();
	        }
	        while (index--) {
	          var func = funcs[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	            var wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? index : length;
	        while (++index < length) {
	          func = funcs[index];
	
	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;
	
	          if (data && isLaziable(data[0]) &&
	                data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&
	                !data[4].length && data[9] == 1
	              ) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func))
	              ? wrapper[funcName]()
	              : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];
	
	          if (wrapper && args.length == 1 &&
	              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;
	
	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      });
	    }
	
	    /**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
	          isFlip = bitmask & FLIP_FLAG,
	          Ctor = isBindKey ? undefined : createCtor(func);
	
	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length;
	
	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (isCurried) {
	          var placeholder = getHolder(wrapper),
	              holdersCount = countHolders(args, placeholder);
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders, isCurried);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	        }
	        length -= holdersCount;
	        if (isCurried && length < arity) {
	          var newHolders = replaceHolders(args, placeholder);
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
	            args, newHolders, argPos, ary, arity - length
	          );
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;
	
	        length = args.length;
	        if (argPos) {
	          args = reorder(args, argPos);
	        } else if (isFlip && length > 1) {
	          args.reverse();
	        }
	        if (isAry && ary < length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtor(fn);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
	    function createInverter(setter, toIteratee) {
	      return function(object, iteratee) {
	        return baseInverter(object, setter, toIteratee(iteratee), {});
	      };
	    }
	
	    /**
	     * Creates a function that performs a mathematical operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @param {number} [defaultValue] The value used for `undefined` arguments.
	     * @returns {Function} Returns the new mathematical operation function.
	     */
	    function createMathOperation(operator, defaultValue) {
	      return function(value, other) {
	        var result;
	        if (value === undefined && other === undefined) {
	          return defaultValue;
	        }
	        if (value !== undefined) {
	          result = value;
	        }
	        if (other !== undefined) {
	          if (result === undefined) {
	            return other;
	          }
	          if (typeof value == 'string' || typeof other == 'string') {
	            value = baseToString(value);
	            other = baseToString(other);
	          } else {
	            value = baseToNumber(value);
	            other = baseToNumber(other);
	          }
	          result = operator(value, other);
	        }
	        return result;
	      };
	    }
	
	    /**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new over function.
	     */
	    function createOver(arrayFunc) {
	      return flatRest(function(iteratees) {
	        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
	        return baseRest(function(args) {
	          var thisArg = this;
	          return arrayFunc(iteratees, function(iteratee) {
	            return apply(iteratee, thisArg, args);
	          });
	        });
	      });
	    }
	
	    /**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
	    function createPadding(length, chars) {
	      chars = chars === undefined ? ' ' : baseToString(chars);
	
	      var charsLength = chars.length;
	      if (charsLength < 2) {
	        return charsLength ? baseRepeat(chars, length) : chars;
	      }
	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
	      return hasUnicode(chars)
	        ? castSlice(stringToArray(result), 0, length).join('')
	        : result.slice(0, length);
	    }
	
	    /**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createPartial(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtor(func);
	
	      function wrapper() {
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength),
	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	
	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return apply(fn, isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
	    function createRange(fromRight) {
	      return function(start, end, step) {
	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	          end = step = undefined;
	        }
	        // Ensure the sign of `-0` is preserved.
	        start = toFinite(start);
	        if (end === undefined) {
	          end = start;
	          start = 0;
	        } else {
	          end = toFinite(end);
	        }
	        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
	        return baseRange(start, end, step, fromRight);
	      };
	    }
	
	    /**
	     * Creates a function that performs a relational operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new relational operation function.
	     */
	    function createRelationalOperation(operator) {
	      return function(value, other) {
	        if (!(typeof value == 'string' && typeof other == 'string')) {
	          value = toNumber(value);
	          other = toNumber(other);
	        }
	        return operator(value, other);
	      };
	    }
	
	    /**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	      var isCurry = bitmask & CURRY_FLAG,
	          newHolders = isCurry ? holders : undefined,
	          newHoldersRight = isCurry ? undefined : holders,
	          newPartials = isCurry ? partials : undefined,
	          newPartialsRight = isCurry ? undefined : partials;
	
	      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);
	
	      if (!(bitmask & CURRY_BOUND_FLAG)) {
	        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	      }
	      var newData = [
	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	        newHoldersRight, argPos, ary, arity
	      ];
	
	      var result = wrapFunc.apply(undefined, newData);
	      if (isLaziable(func)) {
	        setData(result, newData);
	      }
	      result.placeholder = placeholder;
	      return setWrapToString(result, func, bitmask);
	    }
	
	    /**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        number = toNumber(number);
	        precision = nativeMin(toInteger(precision), 292);
	        if (precision) {
	          // Shift with exponential notation to avoid floating-point issues.
	          // See [MDN](https://mdn.io/round#Examples) for more details.
	          var pair = (toString(number) + 'e').split('e'),
	              value = func(pair[0] + 'e' + (+pair[1] + precision));
	
	          pair = (toString(value) + 'e').split('e');
	          return +(pair[0] + 'e' + (+pair[1] - precision));
	        }
	        return func(number);
	      };
	    }
	
	    /**
	     * Creates a set object of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */
	    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
	      return new Set(values);
	    };
	
	    /**
	     * Creates a `_.toPairs` or `_.toPairsIn` function.
	     *
	     * @private
	     * @param {Function} keysFunc The function to get the keys of a given object.
	     * @returns {Function} Returns the new pairs function.
	     */
	    function createToPairs(keysFunc) {
	      return function(object) {
	        var tag = getTag(object);
	        if (tag == mapTag) {
	          return mapToArray(object);
	        }
	        if (tag == setTag) {
	          return setToPairs(object);
	        }
	        return baseToPairs(object, keysFunc(object));
	      };
	    }
	
	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     *   512 - `_.flip`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
	      arity = arity === undefined ? arity : toInteger(arity);
	      length -= holders ? holders.length : 0;
	
	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;
	
	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func);
	
	      var newData = [
	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	        argPos, ary, arity
	      ];
	
	      if (data) {
	        mergeData(newData, data);
	      }
	      func = newData[0];
	      bitmask = newData[1];
	      thisArg = newData[2];
	      partials = newData[3];
	      holders = newData[4];
	      arity = newData[9] = newData[9] == null
	        ? (isBindKey ? 0 : func.length)
	        : nativeMax(newData[9] - length, 0);
	
	      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
	        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
	      }
	      if (!bitmask || bitmask == BIND_FLAG) {
	        var result = createBind(func, bitmask, thisArg);
	      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
	        result = createCurry(func, bitmask, arity);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
	        result = createPartial(func, bitmask, thisArg, partials);
	      } else {
	        result = createHybrid.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setWrapToString(setter(result, newData), func, bitmask);
	    }
	
	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	          arrLength = array.length,
	          othLength = other.length;
	
	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(array);
	      if (stacked && stack.get(other)) {
	        return stacked == other;
	      }
	      var index = -1,
	          result = true,
	          seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;
	
	      stack.set(array, other);
	      stack.set(other, array);
	
	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];
	
	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, arrValue, index, other, array, stack)
	            : customizer(arrValue, othValue, index, array, other, stack);
	        }
	        if (compared !== undefined) {
	          if (compared) {
	            continue;
	          }
	          result = false;
	          break;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (seen) {
	          if (!arraySome(other, function(othValue, othIndex) {
	                if (!cacheHas(seen, othIndex) &&
	                    (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
	                  return seen.push(othIndex);
	                }
	              })) {
	            result = false;
	            break;
	          }
	        } else if (!(
	              arrValue === othValue ||
	                equalFunc(arrValue, othValue, customizer, bitmask, stack)
	            )) {
	          result = false;
	          break;
	        }
	      }
	      stack['delete'](array);
	      stack['delete'](other);
	      return result;
	    }
	
	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
	      switch (tag) {
	        case dataViewTag:
	          if ((object.byteLength != other.byteLength) ||
	              (object.byteOffset != other.byteOffset)) {
	            return false;
	          }
	          object = object.buffer;
	          other = other.buffer;
	
	        case arrayBufferTag:
	          if ((object.byteLength != other.byteLength) ||
	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	            return false;
	          }
	          return true;
	
	        case boolTag:
	        case dateTag:
	        case numberTag:
	          // Coerce booleans to `1` or `0` and dates to milliseconds.
	          // Invalid dates are coerced to `NaN`.
	          return eq(+object, +other);
	
	        case errorTag:
	          return object.name == other.name && object.message == other.message;
	
	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings, primitives and objects,
	          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	          // for more details.
	          return object == (other + '');
	
	        case mapTag:
	          var convert = mapToArray;
	
	        case setTag:
	          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
	          convert || (convert = setToArray);
	
	          if (object.size != other.size && !isPartial) {
	            return false;
	          }
	          // Assume cyclic values are equal.
	          var stacked = stack.get(object);
	          if (stacked) {
	            return stacked == other;
	          }
	          bitmask |= UNORDERED_COMPARE_FLAG;
	
	          // Recursively compare objects (susceptible to call stack limits).
	          stack.set(object, other);
	          var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
	          stack['delete'](object);
	          return result;
	
	        case symbolTag:
	          if (symbolValueOf) {
	            return symbolValueOf.call(object) == symbolValueOf.call(other);
	          }
	      }
	      return false;
	    }
	
	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	          objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;
	
	      if (objLength != othLength && !isPartial) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked && stack.get(other)) {
	        return stacked == other;
	      }
	      var result = true;
	      stack.set(object, other);
	      stack.set(other, object);
	
	      var skipCtor = isPartial;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key];
	
	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, objValue, key, other, object, stack)
	            : customizer(objValue, othValue, key, object, other, stack);
	        }
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(compared === undefined
	              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
	              : compared
	            )) {
	          result = false;
	          break;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (result && !skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;
	
	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          result = false;
	        }
	      }
	      stack['delete'](object);
	      stack['delete'](other);
	      return result;
	    }
	
	    /**
	     * A specialized version of `baseRest` which flattens the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    function flatRest(func) {
	      return setToString(overRest(func, undefined, flatten), func + '');
	    }
	
	    /**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeys(object) {
	      return baseGetAllKeys(object, keys, getSymbols);
	    }
	
	    /**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeysIn(object) {
	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
	    }
	
	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };
	
	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;
	
	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
	    function getHolder(func) {
	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
	      return object.placeholder;
	    }
	
	    /**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getIteratee() {
	      var result = lodash.iteratee || iteratee;
	      result = result === iteratee ? baseIteratee : result;
	      return arguments.length ? result(arguments[0], arguments[1]) : result;
	    }
	
	    /**
	     * Gets the data for `map`.
	     *
	     * @private
	     * @param {Object} map The map to query.
	     * @param {string} key The reference key.
	     * @returns {*} Returns the map data.
	     */
	    function getMapData(map, key) {
	      var data = map.__data__;
	      return isKeyable(key)
	        ? data[typeof key == 'string' ? 'string' : 'hash']
	        : data.map;
	    }
	
	    /**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = keys(object),
	          length = result.length;
	
	      while (length--) {
	        var key = result[length],
	            value = object[key];
	
	        result[length] = [key, value, isStrictComparable(value)];
	      }
	      return result;
	    }
	
	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = getValue(object, key);
	      return baseIsNative(value) ? value : undefined;
	    }
	
	    /**
	     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the raw `toStringTag`.
	     */
	    function getRawTag(value) {
	      var isOwn = hasOwnProperty.call(value, symToStringTag),
	          tag = value[symToStringTag];
	
	      try {
	        value[symToStringTag] = undefined;
	        var unmasked = true;
	      } catch (e) {}
	
	      var result = nativeObjectToString.call(value);
	      if (unmasked) {
	        if (isOwn) {
	          value[symToStringTag] = tag;
	        } else {
	          delete value[symToStringTag];
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Creates an array of the own enumerable symbol properties of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
	
	    /**
	     * Creates an array of the own and inherited enumerable symbol properties
	     * of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
	      var result = [];
	      while (object) {
	        arrayPush(result, getSymbols(object));
	        object = getPrototype(object);
	      }
	      return result;
	    };
	
	    /**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    var getTag = baseGetTag;
	
	    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	        (Map && getTag(new Map) != mapTag) ||
	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
	        (Set && getTag(new Set) != setTag) ||
	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	      getTag = function(value) {
	        var result = baseGetTag(value),
	            Ctor = result == objectTag ? value.constructor : undefined,
	            ctorString = Ctor ? toSource(Ctor) : '';
	
	        if (ctorString) {
	          switch (ctorString) {
	            case dataViewCtorString: return dataViewTag;
	            case mapCtorString: return mapTag;
	            case promiseCtorString: return promiseTag;
	            case setCtorString: return setTag;
	            case weakMapCtorString: return weakMapTag;
	          }
	        }
	        return result;
	      };
	    }
	
	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;
	
	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;
	
	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }
	
	    /**
	     * Extracts wrapper details from the `source` body comment.
	     *
	     * @private
	     * @param {string} source The source to inspect.
	     * @returns {Array} Returns the wrapper details.
	     */
	    function getWrapDetails(source) {
	      var match = source.match(reWrapDetails);
	      return match ? match[1].split(reSplitDetails) : [];
	    }
	
	    /**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
	    function hasPath(object, path, hasFunc) {
	      path = isKey(path, object) ? [path] : castPath(path);
	
	      var index = -1,
	          length = path.length,
	          result = false;
	
	      while (++index < length) {
	        var key = toKey(path[index]);
	        if (!(result = object != null && hasFunc(object, key))) {
	          break;
	        }
	        object = object[key];
	      }
	      if (result || ++index != length) {
	        return result;
	      }
	      length = object == null ? 0 : object.length;
	      return !!length && isLength(length) && isIndex(key, length) &&
	        (isArray(object) || isArguments(object));
	    }
	
	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = array.constructor(length);
	
	      // Add properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }
	
	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      return (typeof object.constructor == 'function' && !isPrototype(object))
	        ? baseCreate(getPrototype(object))
	        : {};
	    }
	
	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, cloneFunc, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return cloneArrayBuffer(object);
	
	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);
	
	        case dataViewTag:
	          return cloneDataView(object, isDeep);
	
	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          return cloneTypedArray(object, isDeep);
	
	        case mapTag:
	          return cloneMap(object, isDeep, cloneFunc);
	
	        case numberTag:
	        case stringTag:
	          return new Ctor(object);
	
	        case regexpTag:
	          return cloneRegExp(object);
	
	        case setTag:
	          return cloneSet(object, isDeep, cloneFunc);
	
	        case symbolTag:
	          return cloneSymbol(object);
	      }
	    }
	
	    /**
	     * Inserts wrapper `details` in a comment at the top of the `source` body.
	     *
	     * @private
	     * @param {string} source The source to modify.
	     * @returns {Array} details The details to insert.
	     * @returns {string} Returns the modified source.
	     */
	    function insertWrapDetails(source, details) {
	      var length = details.length;
	      if (!length) {
	        return source;
	      }
	      var lastIndex = length - 1;
	      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	      details = details.join(length > 2 ? ', ' : ' ');
	      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	    }
	
	    /**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenable(value) {
	      return isArray(value) || isArguments(value) ||
	        !!(spreadableSymbol && value && value[spreadableSymbol]);
	    }
	
	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return !!length &&
	        (typeof value == 'number' || reIsUint.test(value)) &&
	        (value > -1 && value % 1 == 0 && value < length);
	    }
	
	    /**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	            ? (isArrayLike(object) && isIndex(index, object.length))
	            : (type == 'string' && index in object)
	          ) {
	        return eq(object[index], value);
	      }
	      return false;
	    }
	
	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      if (isArray(value)) {
	        return false;
	      }
	      var type = typeof value;
	      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	          value == null || isSymbol(value)) {
	        return true;
	      }
	      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	        (object != null && value in Object(object));
	    }
	
	    /**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
	    function isKeyable(value) {
	      var type = typeof value;
	      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	        ? (value !== '__proto__')
	        : (value === null);
	    }
	
	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];
	
	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }
	
	    /**
	     * Checks if `func` has its source masked.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	     */
	    function isMasked(func) {
	      return !!maskSrcKey && (maskSrcKey in func);
	    }
	
	    /**
	     * Checks if `func` is capable of being masked.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
	     */
	    var isMaskable = coreJsData ? isFunction : stubFalse;
	
	    /**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
	    function isPrototype(value) {
	      var Ctor = value && value.constructor,
	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
	
	      return value === proto;
	    }
	
	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }
	
	    /**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function matchesStrictComparable(key, srcValue) {
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        return object[key] === srcValue &&
	          (srcValue !== undefined || (key in Object(object)));
	      };
	    }
	
	    /**
	     * A specialized version of `_.memoize` which clears the memoized function's
	     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	     *
	     * @private
	     * @param {Function} func The function to have its output memoized.
	     * @returns {Function} Returns the new memoized function.
	     */
	    function memoizeCapped(func) {
	      var result = memoize(func, function(key) {
	        if (cache.size === MAX_MEMOIZE_SIZE) {
	          cache.clear();
	        }
	        return key;
	      });
	
	      var cache = result.cache;
	      return result;
	    }
	
	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);
	
	      var isCombo =
	        ((srcBitmask == ARY_FLAG) && (bitmask == CURRY_FLAG)) ||
	        ((srcBitmask == ARY_FLAG) && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||
	        ((srcBitmask == (ARY_FLAG | REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));
	
	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = value;
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;
	
	      return data;
	    }
	
	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */
	    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
	      if (isObject(objValue) && isObject(srcValue)) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, objValue);
	        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);
	        stack['delete'](srcValue);
	      }
	      return objValue;
	    }
	
	    /**
	     * This function is like
	     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * except that it includes inherited enumerable properties.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function nativeKeysIn(object) {
	      var result = [];
	      if (object != null) {
	        for (var key in Object(object)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Converts `value` to a string using `Object.prototype.toString`.
	     *
	     * @private
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     */
	    function objectToString(value) {
	      return nativeObjectToString.call(value);
	    }
	
	    /**
	     * A specialized version of `baseRest` which transforms the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @param {Function} transform The rest array transform.
	     * @returns {Function} Returns the new function.
	     */
	    function overRest(func, start, transform) {
	      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            array = Array(length);
	
	        while (++index < length) {
	          array[index] = args[start + index];
	        }
	        index = -1;
	        var otherArgs = Array(start + 1);
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = transform(array);
	        return apply(func, this, otherArgs);
	      };
	    }
	
	    /**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
	    function parent(object, path) {
	      return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	    }
	
	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = copyArray(array);
	
	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }
	
	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = shortOut(baseSetData);
	
	    /**
	     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    var setTimeout = ctxSetTimeout || function(func, wait) {
	      return root.setTimeout(func, wait);
	    };
	
	    /**
	     * Sets the `toString` method of `func` to return `string`.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var setToString = shortOut(baseSetToString);
	
	    /**
	     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	     * with wrapper details in a comment at the top of the source body.
	     *
	     * @private
	     * @param {Function} wrapper The function to modify.
	     * @param {Function} reference The reference function.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Function} Returns `wrapper`.
	     */
	    function setWrapToString(wrapper, reference, bitmask) {
	      var source = (reference + '');
	      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
	    }
	
	    /**
	     * Creates a function that'll short out and invoke `identity` instead
	     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	     * milliseconds.
	     *
	     * @private
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new shortable function.
	     */
	    function shortOut(func) {
	      var count = 0,
	          lastCalled = 0;
	
	      return function() {
	        var stamp = nativeNow(),
	            remaining = HOT_SPAN - (stamp - lastCalled);
	
	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return arguments[0];
	          }
	        } else {
	          count = 0;
	        }
	        return func.apply(undefined, arguments);
	      };
	    }
	
	    /**
	     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @param {number} [size=array.length] The size of `array`.
	     * @returns {Array} Returns `array`.
	     */
	    function shuffleSelf(array, size) {
	      var index = -1,
	          length = array.length,
	          lastIndex = length - 1;
	
	      size = size === undefined ? length : size;
	      while (++index < size) {
	        var rand = baseRandom(index, lastIndex),
	            value = array[rand];
	
	        array[rand] = array[index];
	        array[index] = value;
	      }
	      array.length = size;
	      return array;
	    }
	
	    /**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */
	    var stringToPath = memoizeCapped(function(string) {
	      string = toString(string);
	
	      var result = [];
	      if (reLeadingDot.test(string)) {
	        result.push('');
	      }
	      string.replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    });
	
	    /**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */
	    function toKey(value) {
	      if (typeof value == 'string' || isSymbol(value)) {
	        return value;
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }
	
	    /**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to convert.
	     * @returns {string} Returns the source code.
	     */
	    function toSource(func) {
	      if (func != null) {
	        try {
	          return funcToString.call(func);
	        } catch (e) {}
	        try {
	          return (func + '');
	        } catch (e) {}
	      }
	      return '';
	    }
	
	    /**
	     * Updates wrapper `details` based on `bitmask` flags.
	     *
	     * @private
	     * @returns {Array} details The details to modify.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Array} Returns `details`.
	     */
	    function updateWrapDetails(details, bitmask) {
	      arrayEach(wrapFlags, function(pair) {
	        var value = '_.' + pair[0];
	        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
	          details.push(value);
	        }
	      });
	      return details.sort();
	    }
	
	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      if (wrapper instanceof LazyWrapper) {
	        return wrapper.clone();
	      }
	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	      result.__actions__ = copyArray(wrapper.__actions__);
	      result.__index__  = wrapper.__index__;
	      result.__values__ = wrapper.__values__;
	      return result;
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array of chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
	        size = 1;
	      } else {
	        size = nativeMax(toInteger(size), 0);
	      }
	      var length = array == null ? 0 : array.length;
	      if (!length || size < 1) {
	        return [];
	      }
	      var index = 0,
	          resIndex = 0,
	          result = Array(nativeCeil(length / size));
	
	      while (index < length) {
	        result[resIndex++] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }
	
	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array == null ? 0 : array.length,
	          resIndex = 0,
	          result = [];
	
	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    function concat() {
	      var length = arguments.length;
	      if (!length) {
	        return [];
	      }
	      var args = Array(length - 1),
	          array = arguments[0],
	          index = length;
	
	      while (index--) {
	        args[index - 1] = arguments[index];
	      }
	      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
	    }
	
	    /**
	     * Creates an array of `array` values not included in the other given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * **Note:** Unlike `_.pullAll`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.without, _.xor
	     * @example
	     *
	     * _.difference([2, 1], [2, 3]);
	     * // => [1]
	     */
	    var difference = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
	        : [];
	    });
	
	    /**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var differenceBy = baseRest(function(array, values) {
	      var iteratee = last(values);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
	        : [];
	    });
	
	    /**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. The order and
	     * references of result values are determined by the first array. The comparator
	     * is invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */
	    var differenceWith = baseRest(function(array, values) {
	      var comparator = last(values);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
	        : [];
	    });
	
	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }
	
	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }
	
	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
	        : [];
	    }
	
	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true)
	        : [];
	    }
	
	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
	    function fill(array, value, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }
	
	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index);
	    }
	
	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length - 1;
	      if (fromIndex !== undefined) {
	        index = toInteger(fromIndex);
	        index = fromIndex < 0
	          ? nativeMax(length + index, 0)
	          : nativeMin(index, length - 1);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
	    }
	
	    /**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
	    function flatten(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, 1) : [];
	    }
	
	    /**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
	    function flattenDeep(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, INFINITY) : [];
	    }
	
	    /**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
	    function flattenDepth(array, depth) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(array, depth);
	    }
	
	    /**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['a', 1], ['b', 2]]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function fromPairs(pairs) {
	      var index = -1,
	          length = pairs == null ? 0 : pairs.length,
	          result = {};
	
	      while (++index < length) {
	        var pair = pairs[index];
	        result[pair[0]] = pair[1];
	      }
	      return result;
	    }
	
	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
	    function head(array) {
	      return (array && array.length) ? array[0] : undefined;
	    }
	
	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseIndexOf(array, value, index);
	    }
	
	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 0, -1) : [];
	    }
	
	    /**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [2, 3]);
	     * // => [2]
	     */
	    var intersection = baseRest(function(arrays) {
	      var mapped = arrayMap(arrays, castArrayLikeObject);
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped)
	        : [];
	    });
	
	    /**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */
	    var intersectionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);
	
	      if (iteratee === last(mapped)) {
	        iteratee = undefined;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, getIteratee(iteratee, 2))
	        : [];
	    });
	
	    /**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. The order and references
	     * of result values are determined by the first array. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */
	    var intersectionWith = baseRest(function(arrays) {
	      var comparator = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);
	
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      if (comparator) {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, undefined, comparator)
	        : [];
	    });
	
	    /**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
	    function join(array, separator) {
	      return array == null ? '' : nativeJoin.call(array, separator);
	    }
	
	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? array[length - 1] : undefined;
	    }
	
	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (fromIndex !== undefined) {
	        index = toInteger(fromIndex);
	        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
	      }
	      return value === value
	        ? strictLastIndexOf(array, value, index)
	        : baseFindIndex(array, baseIsNaN, index, true);
	    }
	
	    /**
	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
	     * element from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */
	    function nth(array, n) {
	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
	    }
	
	    /**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pull(array, 'a', 'c');
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    var pull = baseRest(pullAll);
	
	    /**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pullAll(array, ['a', 'c']);
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    function pullAll(array, values) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values)
	        : array;
	    }
	
	    /**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
	    function pullAllBy(array, values, iteratee) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, getIteratee(iteratee, 2))
	        : array;
	    }
	
	    /**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
	    function pullAllWith(array, values, comparator) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, undefined, comparator)
	        : array;
	    }
	
	    /**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     * var pulled = _.pullAt(array, [1, 3]);
	     *
	     * console.log(array);
	     * // => ['a', 'c']
	     *
	     * console.log(pulled);
	     * // => ['b', 'd']
	     */
	    var pullAt = flatRest(function(array, indexes) {
	      var length = array == null ? 0 : array.length,
	          result = baseAt(array, indexes);
	
	      basePullAt(array, arrayMap(indexes, function(index) {
	        return isIndex(index, length) ? +index : index;
	      }).sort(compareAscending));
	
	      return result;
	    });
	
	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;
	
	      predicate = getIteratee(predicate, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }
	
	    /**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function reverse(array) {
	      return array == null ? array : nativeReverse.call(array);
	    }
	
	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      else {
	        start = start == null ? 0 : toInteger(start);
	        end = end === undefined ? length : toInteger(end);
	      }
	      return baseSlice(array, start, end);
	    }
	
	    /**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     */
	    function sortedIndex(array, value) {
	      return baseSortedIndex(array, value);
	    }
	
	    /**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 0
	     */
	    function sortedIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
	    }
	
	    /**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 1
	     */
	    function sortedIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value);
	        if (index < length && eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }
	
	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
	     * // => 4
	     */
	    function sortedLastIndex(array, value) {
	      return baseSortedIndex(array, value, true);
	    }
	
	    /**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 1
	     */
	    function sortedLastIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
	    }
	
	    /**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 3
	     */
	    function sortedLastIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value, true) - 1;
	        if (eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }
	
	    /**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
	    function sortedUniq(array) {
	      return (array && array.length)
	        ? baseSortedUniq(array)
	        : [];
	    }
	
	    /**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
	    function sortedUniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSortedUniq(array, getIteratee(iteratee, 2))
	        : [];
	    }
	
	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function tail(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 1, length) : [];
	    }
	
	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }
	
	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }
	
	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
	    function takeRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
	        : [];
	    }
	
	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
	    function takeWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3))
	        : [];
	    }
	
	    /**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2], [1, 2]);
	     * // => [2, 1]
	     */
	    var union = baseRest(function(arrays) {
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	    });
	
	    /**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. Result values are chosen from the first
	     * array in which the value occurs. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    var unionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
	    });
	
	    /**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. Result values are chosen from
	     * the first array in which the value occurs. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var unionWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
	    });
	
	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each element
	     * is kept. The order of result values is determined by the order they occur
	     * in the array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
	    function uniq(array) {
	      return (array && array.length) ? baseUniq(array) : [];
	    }
	
	    /**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The order of result values is determined by the
	     * order they occur in the array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniqBy(array, iteratee) {
	      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
	    }
	
	    /**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The order of result values is
	     * determined by the order they occur in the array.The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
	    function uniqWith(array, comparator) {
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
	    }
	
	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['a', 'b'], [1, 2], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var length = 0;
	      array = arrayFilter(array, function(group) {
	        if (isArrayLikeObject(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      return baseTimes(length, function(index) {
	        return arrayMap(array, baseProperty(index));
	      });
	    }
	
	    /**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      return arrayMap(result, function(group) {
	        return apply(iteratee, undefined, group);
	      });
	    }
	
	    /**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.pull`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.xor
	     * @example
	     *
	     * _.without([2, 1, 2, 3], 1, 2);
	     * // => [3]
	     */
	    var without = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, values)
	        : [];
	    });
	
	    /**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.without
	     * @example
	     *
	     * _.xor([2, 1], [2, 3]);
	     * // => [1, 3]
	     */
	    var xor = baseRest(function(arrays) {
	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
	    });
	
	    /**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The order of result values is determined
	     * by the order they occur in the arrays. The iteratee is invoked with one
	     * argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2, 3.4]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var xorBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
	    });
	
	    /**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The order of result values is
	     * determined by the order they occur in the arrays. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var xorWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
	    });
	
	    /**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     */
	    var zip = baseRest(unzip);
	
	    /**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function zipObject(props, values) {
	      return baseZipObject(props || [], values || [], assignValue);
	    }
	
	    /**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
	    function zipObjectDeep(props, values) {
	      return baseZipObject(props || [], values || [], baseSet);
	    }
	
	    /**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */
	    var zipWith = baseRest(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 1 ? arrays[length - 1] : undefined;
	
	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
	      return unzipWith(arrays, iteratee);
	    });
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }
	
	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }
	
	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor) {
	      return interceptor(value);
	    }
	
	    /**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths of elements to pick.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     */
	    var wrapperAt = flatRest(function(paths) {
	      var length = paths.length,
	          start = length ? paths[0] : 0,
	          value = this.__wrapped__,
	          interceptor = function(object) { return baseAt(object, paths); };
	
	      if (length > 1 || this.__actions__.length ||
	          !(value instanceof LazyWrapper) || !isIndex(start)) {
	        return this.thru(interceptor);
	      }
	      value = value.slice(start, +start + (length ? 1 : 0));
	      value.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined
	      });
	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
	        if (length && !array.length) {
	          array.push(undefined);
	        }
	        return array;
	      });
	    });
	
	    /**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }
	
	    /**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }
	
	    /**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
	    function wrapperNext() {
	      if (this.__values__ === undefined) {
	        this.__values__ = toArray(this.value());
	      }
	      var done = this.__index__ >= this.__values__.length,
	          value = done ? undefined : this.__values__[this.__index__++];
	
	      return { 'done': done, 'value': value };
	    }
	
	    /**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
	    function wrapperToIterator() {
	      return this;
	    }
	
	    /**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;
	
	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        clone.__index__ = 0;
	        clone.__values__ = undefined;
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }
	
	    /**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({
	          'func': thru,
	          'args': [reverse],
	          'thisArg': undefined
	        });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(reverse);
	    }
	
	    /**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the number of times the key was returned by `iteratee`. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        ++result[key];
	      } else {
	        baseAssignValue(result, key, 1);
	      }
	    });
	
	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * **Note:** This method returns `true` for
	     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	     * elements of empty collections.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, guard) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }
	
	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * **Note:** Unlike `_.remove`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.reject
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     */
	    function filter(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, getIteratee(predicate, 3));
	    }
	
	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
	    var find = createFind(findIndex);
	
	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=collection.length-1] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(findLastIndex);
	
	    /**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMap(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), 1);
	    }
	
	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMapDeep(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), INFINITY);
	    }
	
	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */
	    function flatMapDepth(collection, iteratee, depth) {
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(map(collection, iteratee), depth);
	    }
	
	    /**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEachRight
	     * @example
	     *
	     * _.forEach([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forEach(collection, iteratee) {
	      var func = isArray(collection) ? arrayEach : baseEach;
	      return func(collection, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEach
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */
	    function forEachRight(collection, iteratee) {
	      var func = isArray(collection) ? arrayEachRight : baseEachRight;
	      return func(collection, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The order of grouped values
	     * is determined by the order they occur in `collection`. The corresponding
	     * value of each key is an array of elements responsible for generating the
	     * key. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        baseAssignValue(result, key, [value]);
	      }
	    });
	
	    /**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'a': 1, 'b': 2 }, 1);
	     * // => true
	     *
	     * _.includes('abcd', 'bc');
	     * // => true
	     */
	    function includes(collection, value, fromIndex, guard) {
	      collection = isArrayLike(collection) ? collection : values(collection);
	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;
	
	      var length = collection.length;
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return isString(collection)
	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	    }
	
	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `path` is a function, it's invoked
	     * for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invokeMap = baseRest(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          result = isArrayLike(collection) ? Array(collection.length) : [];
	
	      baseEach(collection, function(value) {
	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
	      });
	      return result;
	    });
	
	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */
	    var keyBy = createAggregator(function(result, value, key) {
	      baseAssignValue(result, key, value);
	    });
	
	    /**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      return func(collection, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    function orderBy(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      orders = guard ? undefined : orders;
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseOrderBy(collection, iteratees, orders);
	    }
	
	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });
	
	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduceRight
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduce : baseReduce,
	          initAccum = arguments.length < 3;
	
	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	    }
	
	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduce
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
	          initAccum = arguments.length < 3;
	
	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	    }
	
	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.filter
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
	    function reject(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, negate(getIteratee(predicate, 3)));
	    }
	
	    /**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
	    function sample(collection) {
	      var func = isArray(collection) ? arraySample : baseSample;
	      return func(collection);
	    }
	
	    /**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
	    function sampleSize(collection, n, guard) {
	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
	      return func(collection, n);
	    }
	
	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      var func = isArray(collection) ? arrayShuffle : baseShuffle;
	      return func(collection);
	    }
	
	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      if (collection == null) {
	        return 0;
	      }
	      if (isArrayLike(collection)) {
	        return isString(collection) ? stringSize(collection) : collection.length;
	      }
	      var tag = getTag(collection);
	      if (tag == mapTag || tag == setTag) {
	        return collection.size;
	      }
	      return baseKeys(collection).length;
	    }
	
	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, guard) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }
	
	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection thru each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, [function(o) { return o.user; }]);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	     */
	    var sortBy = baseRest(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var length = iteratees.length;
	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	        iteratees = [];
	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	        iteratees = [iteratees[0]];
	      }
	      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	    });
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred invocation.
	     */
	    var now = ctxNow || function() {
	      return root.Date.now();
	    };
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }
	
	    /**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      n = guard ? undefined : n;
	      n = (func && n == null) ? func.length : n;
	      return createWrap(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }
	
	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => Allows adding up to 4 contacts to the list.
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and `partials` prepended to the arguments it receives.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * function greet(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * }
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = baseRest(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bind));
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrap(func, bitmask, thisArg, partials, holders);
	    });
	
	    /**
	     * Creates a function that invokes the method at `object[key]` with `partials`
	     * prepended to the arguments it receives.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = baseRest(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bindKey));
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrap(key, bitmask, object, partials, holders);
	    });
	
	    /**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrap(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }
	
	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrap(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }
	
	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide `options` to indicate whether `func` should be invoked on the
	     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent
	     * calls to the debounced function return the result of the last `func`
	     * invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the debounced function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
	    function debounce(func, wait, options) {
	      var lastArgs,
	          lastThis,
	          maxWait,
	          result,
	          timerId,
	          lastCallTime,
	          lastInvokeTime = 0,
	          leading = false,
	          maxing = false,
	          trailing = true;
	
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = toNumber(wait) || 0;
	      if (isObject(options)) {
	        leading = !!options.leading;
	        maxing = 'maxWait' in options;
	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	
	      function invokeFunc(time) {
	        var args = lastArgs,
	            thisArg = lastThis;
	
	        lastArgs = lastThis = undefined;
	        lastInvokeTime = time;
	        result = func.apply(thisArg, args);
	        return result;
	      }
	
	      function leadingEdge(time) {
	        // Reset any `maxWait` timer.
	        lastInvokeTime = time;
	        // Start the timer for the trailing edge.
	        timerId = setTimeout(timerExpired, wait);
	        // Invoke the leading edge.
	        return leading ? invokeFunc(time) : result;
	      }
	
	      function remainingWait(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime,
	            result = wait - timeSinceLastCall;
	
	        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
	      }
	
	      function shouldInvoke(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime;
	
	        // Either this is the first call, activity has stopped and we're at the
	        // trailing edge, the system time has gone backwards and we're treating
	        // it as the trailing edge, or we've hit the `maxWait` limit.
	        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	      }
	
	      function timerExpired() {
	        var time = now();
	        if (shouldInvoke(time)) {
	          return trailingEdge(time);
	        }
	        // Restart the timer.
	        timerId = setTimeout(timerExpired, remainingWait(time));
	      }
	
	      function trailingEdge(time) {
	        timerId = undefined;
	
	        // Only invoke if we have `lastArgs` which means `func` has been
	        // debounced at least once.
	        if (trailing && lastArgs) {
	          return invokeFunc(time);
	        }
	        lastArgs = lastThis = undefined;
	        return result;
	      }
	
	      function cancel() {
	        if (timerId !== undefined) {
	          clearTimeout(timerId);
	        }
	        lastInvokeTime = 0;
	        lastArgs = lastCallTime = lastThis = timerId = undefined;
	      }
	
	      function flush() {
	        return timerId === undefined ? result : trailingEdge(now());
	      }
	
	      function debounced() {
	        var time = now(),
	            isInvoking = shouldInvoke(time);
	
	        lastArgs = arguments;
	        lastThis = this;
	        lastCallTime = time;
	
	        if (isInvoking) {
	          if (timerId === undefined) {
	            return leadingEdge(lastCallTime);
	          }
	          if (maxing) {
	            // Handle invocations in a tight loop.
	            timerId = setTimeout(timerExpired, wait);
	            return invokeFunc(lastCallTime);
	          }
	        }
	        if (timerId === undefined) {
	          timerId = setTimeout(timerExpired, wait);
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      debounced.flush = flush;
	      return debounced;
	    }
	
	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one millisecond.
	     */
	    var defer = baseRest(function(func, args) {
	      return baseDelay(func, 1, args);
	    });
	
	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */
	    var delay = baseRest(function(func, wait, args) {
	      return baseDelay(func, toNumber(wait) || 0, args);
	    });
	
	    /**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new flipped function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
	    function flip(func) {
	      return createWrap(func, FLIP_FLAG);
	    }
	
	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoized function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;
	
	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result) || cache;
	        return result;
	      };
	      memoized.cache = new (memoize.Cache || MapCache);
	      return memoized;
	    }
	
	    // Expose `MapCache`.
	    memoize.Cache = MapCache;
	
	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new negated function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        var args = arguments;
	        switch (args.length) {
	          case 0: return !predicate.call(this);
	          case 1: return !predicate.call(this, args[0]);
	          case 2: return !predicate.call(this, args[0], args[1]);
	          case 3: return !predicate.call(this, args[0], args[1], args[2]);
	        }
	        return !predicate.apply(this, args);
	      };
	    }
	
	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // => `createApplication` is invoked once
	     */
	    function once(func) {
	      return before(2, func);
	    }
	
	    /**
	     * Creates a function that invokes `func` with its arguments transformed.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms=[_.identity]]
	     *  The argument transforms.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, [square, doubled]);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
	    var overArgs = castRest(function(func, transforms) {
	      transforms = (transforms.length == 1 && isArray(transforms[0]))
	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
	        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
	
	      var funcsLength = transforms.length;
	      return baseRest(function(args) {
	        var index = -1,
	            length = nativeMin(args.length, funcsLength);
	
	        while (++index < length) {
	          args[index] = transforms[index].call(this, args[index]);
	        }
	        return apply(func, this, args);
	      });
	    });
	
	    /**
	     * Creates a function that invokes `func` with `partials` prepended to the
	     * arguments it receives. This method is like `_.bind` except it does **not**
	     * alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partial));
	      return createWrap(func, PARTIAL_FLAG, undefined, partials, holders);
	    });
	
	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to the arguments it receives.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partialRight));
	      return createWrap(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
	    });
	
	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified `indexes` where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, [2, 0, 1]);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */
	    var rearg = flatRest(function(func, indexes) {
	      return createWrap(func, REARG_FLAG, undefined, undefined, undefined, indexes);
	    });
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function rest(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined ? start : toInteger(start);
	      return baseRest(func, start);
	    }
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
	      return baseRest(function(args) {
	        var array = args[start],
	            otherArgs = castSlice(args, 0, start);
	
	        if (array) {
	          arrayPush(otherArgs, array);
	        }
	        return apply(func, this, otherArgs);
	      });
	    }
	
	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide `options` to indicate whether `func`
	     * should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;
	
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, {
	        'leading': leading,
	        'maxWait': wait,
	        'trailing': trailing
	      });
	    }
	
	    /**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
	    function unary(func) {
	      return ary(func, 1);
	    }
	
	    /**
	     * Creates a function that provides `value` to `wrapper` as its first
	     * argument. Any additional arguments provided to the function are appended
	     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
	     * binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      return partial(castFunction(wrapper), value);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
	    function castArray() {
	      if (!arguments.length) {
	        return [];
	      }
	      var value = arguments[0];
	      return isArray(value) ? value : [value];
	    }
	
	    /**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeep
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
	    function clone(value) {
	      return baseClone(value, false, true);
	    }
	
	    /**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeepWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
	    function cloneWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseClone(value, false, true, customizer);
	    }
	
	    /**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.clone
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
	    function cloneDeep(value) {
	      return baseClone(value, true, true);
	    }
	
	    /**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.cloneWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
	    function cloneDeepWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseClone(value, true, true, customizer);
	    }
	
	    /**
	     * Checks if `object` conforms to `source` by invoking the predicate
	     * properties of `source` with the corresponding property values of `object`.
	     *
	     * **Note:** This method is equivalent to `_.conforms` when `source` is
	     * partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
	     * // => true
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
	     * // => false
	     */
	    function conformsTo(object, source) {
	      return source == null || baseConformsTo(object, source, keys(source));
	    }
	
	    /**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
	    function eq(value, other) {
	      return value === other || (value !== value && other !== other);
	    }
	
	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @see _.lt
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    var gt = createRelationalOperation(baseGt);
	
	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @see _.lte
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    var gte = createRelationalOperation(function(value, other) {
	      return value >= other;
	    });
	
	    /**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	        !propertyIsEnumerable.call(value, 'callee');
	    };
	
	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */
	    var isArray = Array.isArray;
	
	    /**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
	    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
	
	    /**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(value.length) && !isFunction(value);
	    }
	
	    /**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
	    function isArrayLikeObject(value) {
	      return isObjectLike(value) && isArrayLike(value);
	    }
	
	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        (isObjectLike(value) && baseGetTag(value) == boolTag);
	    }
	
	    /**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */
	    var isBuffer = nativeIsBuffer || stubFalse;
	
	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
	
	    /**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
	    }
	
	    /**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) &&
	          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
	            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	        return !value.length;
	      }
	      var tag = getTag(value);
	      if (tag == mapTag || tag == setTag) {
	        return !value.size;
	      }
	      if (isPrototype(value)) {
	        return !baseKeys(value).length;
	      }
	      for (var key in value) {
	        if (hasOwnProperty.call(value, key)) {
	          return false;
	        }
	      }
	      return true;
	    }
	
	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are **not** supported.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
	    function isEqual(value, other) {
	      return baseIsEqual(value, other);
	    }
	
	    /**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
	    function isEqualWith(value, other, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }
	
	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      if (!isObjectLike(value)) {
	        return false;
	      }
	      var tag = baseGetTag(value);
	      return tag == errorTag || tag == domExcTag ||
	        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
	    }
	
	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     *
	     * _.isFinite('3');
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }
	
	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      if (!isObject(value)) {
	        return false;
	      }
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in Safari 9 which returns 'object' for typed arrays and other constructors.
	      var tag = baseGetTag(value);
	      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	    }
	
	    /**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
	    function isInteger(value) {
	      return typeof value == 'number' && value == toInteger(value);
	    }
	
	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
	    function isLength(value) {
	      return typeof value == 'number' &&
	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }
	
	    /**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
	    function isObject(value) {
	      var type = typeof value;
	      return value != null && (type == 'object' || type == 'function');
	    }
	
	    /**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
	    function isObjectLike(value) {
	      return value != null && typeof value == 'object';
	    }
	
	    /**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
	    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
	
	    /**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values.
	     *
	     * **Note:** This method is equivalent to `_.matches` when `source` is
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.isMatch(object, { 'b': 2 });
	     * // => true
	     *
	     * _.isMatch(object, { 'b': 1 });
	     * // => false
	     */
	    function isMatch(object, source) {
	      return object === source || baseIsMatch(object, source, getMatchData(source));
	    }
	
	    /**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
	    function isMatchWith(object, source, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseIsMatch(object, source, getMatchData(source), customizer);
	    }
	
	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some
	      // ActiveX objects in IE.
	      return isNumber(value) && value != +value;
	    }
	
	    /**
	     * Checks if `value` is a pristine native function.
	     *
	     * **Note:** This method can't reliably detect native functions in the presence
	     * of the core-js package because core-js circumvents this kind of detection.
	     * Despite multiple requests, the core-js maintainer has made it clear: any
	     * attempt to fix the detection will be obstructed. As a result, we're left
	     * with little choice but to throw an error. Unfortunately, this also affects
	     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
	     * which rely on core-js.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (isMaskable(value)) {
	        throw new Error(CORE_ERROR_TEXT);
	      }
	      return baseIsNative(value);
	    }
	
	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }
	
	    /**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
	    function isNil(value) {
	      return value == null;
	    }
	
	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        (isObjectLike(value) && baseGetTag(value) == numberTag);
	    }
	
	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	        return false;
	      }
	      var proto = getPrototype(value);
	      if (proto === null) {
	        return true;
	      }
	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	        funcToString.call(Ctor) == objectCtorString;
	    }
	
	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
	
	    /**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
	    function isSafeInteger(value) {
	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
	    }
	
	    /**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
	    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
	
	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
	    }
	
	    /**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
	    function isSymbol(value) {
	      return typeof value == 'symbol' ||
	        (isObjectLike(value) && baseGetTag(value) == symbolTag);
	    }
	
	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
	
	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }
	
	    /**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
	    function isWeakMap(value) {
	      return isObjectLike(value) && getTag(value) == weakMapTag;
	    }
	
	    /**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
	    function isWeakSet(value) {
	      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
	    }
	
	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @see _.gt
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    var lt = createRelationalOperation(baseLt);
	
	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @see _.gte
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    var lte = createRelationalOperation(function(value, other) {
	      return value <= other;
	    });
	
	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
	    function toArray(value) {
	      if (!value) {
	        return [];
	      }
	      if (isArrayLike(value)) {
	        return isString(value) ? stringToArray(value) : copyArray(value);
	      }
	      if (symIterator && value[symIterator]) {
	        return iteratorToArray(value[symIterator]());
	      }
	      var tag = getTag(value),
	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);
	
	      return func(value);
	    }
	
	    /**
	     * Converts `value` to a finite number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.12.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted number.
	     * @example
	     *
	     * _.toFinite(3.2);
	     * // => 3.2
	     *
	     * _.toFinite(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toFinite(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toFinite('3.2');
	     * // => 3.2
	     */
	    function toFinite(value) {
	      if (!value) {
	        return value === 0 ? value : 0;
	      }
	      value = toNumber(value);
	      if (value === INFINITY || value === -INFINITY) {
	        var sign = (value < 0 ? -1 : 1);
	        return sign * MAX_INTEGER;
	      }
	      return value === value ? value : 0;
	    }
	
	    /**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3.2);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3.2');
	     * // => 3
	     */
	    function toInteger(value) {
	      var result = toFinite(value),
	          remainder = result % 1;
	
	      return result === result ? (remainder ? result - remainder : result) : 0;
	    }
	
	    /**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3.2);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3.2');
	     * // => 3
	     */
	    function toLength(value) {
	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	    }
	
	    /**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3.2);
	     * // => 3.2
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3.2');
	     * // => 3.2
	     */
	    function toNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      if (isObject(value)) {
	        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	        value = isObject(other) ? (other + '') : other;
	      }
	      if (typeof value != 'string') {
	        return value === 0 ? value : +value;
	      }
	      value = value.replace(reTrim, '');
	      var isBinary = reIsBinary.test(value);
	      return (isBinary || reIsOctal.test(value))
	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	        : (reIsBadHex.test(value) ? NAN : +value);
	    }
	
	    /**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return copyObject(value, keysIn(value));
	    }
	
	    /**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3.2);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3.2');
	     * // => 3
	     */
	    function toSafeInteger(value) {
	      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
	    }
	
	    /**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
	    function toString(value) {
	      return value == null ? '' : baseToString(value);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assignIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assign({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var assign = createAssigner(function(object, source) {
	      if (isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keys(source), object);
	        return;
	      }
	      for (var key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          assignValue(object, key, source[key]);
	        }
	      }
	    });
	
	    /**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assign
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
	     */
	    var assignIn = createAssigner(function(object, source) {
	      copyObject(source, keysIn(source), object);
	    });
	
	    /**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keysIn(source), object, customizer);
	    });
	
	    /**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignInWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keys(source), object, customizer);
	    });
	
	    /**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths of elements to pick.
	     * @returns {Array} Returns the picked values.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     */
	    var at = flatRest(baseAt);
	
	    /**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties == null ? result : baseAssign(result, properties);
	    }
	
	    /**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaultsDeep
	     * @example
	     *
	     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var defaults = baseRest(function(args) {
	      args.push(undefined, assignInDefaults);
	      return apply(assignInWith, undefined, args);
	    });
	
	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaults
	     * @example
	     *
	     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
	     * // => { 'a': { 'b': 2, 'c': 3 } }
	     */
	    var defaultsDeep = baseRest(function(args) {
	      args.push(undefined, mergeDefaults);
	      return apply(mergeWith, undefined, args);
	    });
	
	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
	    }
	
	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
	    }
	
	    /**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forInRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */
	    function forIn(object, iteratee) {
	      return object == null
	        ? object
	        : baseFor(object, getIteratee(iteratee, 3), keysIn);
	    }
	
	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */
	    function forInRight(object, iteratee) {
	      return object == null
	        ? object
	        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
	    }
	
	    /**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwnRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forOwn(object, iteratee) {
	      return object && baseForOwn(object, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */
	    function forOwnRight(object, iteratee) {
	      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functionsIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
	    function functions(object) {
	      return object == null ? [] : baseFunctions(object, keys(object));
	    }
	
	    /**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functions
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
	    function functionsIn(object) {
	      return object == null ? [] : baseFunctions(object, keysIn(object));
	    }
	
	    /**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is returned in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, path);
	      return result === undefined ? defaultValue : result;
	    }
	
	    /**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
	    function has(object, path) {
	      return object != null && hasPath(object, path, baseHas);
	    }
	
	    /**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
	    function hasIn(object, path) {
	      return object != null && hasPath(object, path, baseHasIn);
	    }
	
	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */
	    var invert = createInverter(function(result, value, key) {
	      result[value] = key;
	    }, constant(identity));
	
	    /**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` thru `iteratee`. The
	     * corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */
	    var invertBy = createInverter(function(result, value, key) {
	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }, getIteratee);
	
	    /**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */
	    var invoke = baseRest(baseInvoke);
	
	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    function keys(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	    }
	
	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	    }
	
	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapValues
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    function mapKeys(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);
	
	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, iteratee(value, key, object), value);
	      });
	      return result;
	    }
	
	    /**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapKeys
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);
	
	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, key, iteratee(value, key, object));
	      });
	      return result;
	    }
	
	    /**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively. Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {
	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
	     * };
	     *
	     * var other = {
	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
	     * };
	     *
	     * _.merge(object, other);
	     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	     */
	    var merge = createAssigner(function(object, source, srcIndex) {
	      baseMerge(object, source, srcIndex);
	    });
	
	    /**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined`, merging is handled by the
	     * method instead. The `customizer` is invoked with six arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = { 'a': [1], 'b': [2] };
	     * var other = { 'a': [3], 'b': [4] };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'a': [1, 3], 'b': [2, 4] }
	     */
	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	      baseMerge(object, source, srcIndex, customizer);
	    });
	
	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable string keyed properties of `object` that are
	     * not omitted.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [props] The property identifiers to omit.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */
	    var omit = flatRest(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      props = arrayMap(props, toKey);
	      return basePick(object, baseDifference(getAllKeysIn(object), props));
	    });
	
	    /**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
	    function omitBy(object, predicate) {
	      return pickBy(object, negate(getIteratee(predicate)));
	    }
	
	    /**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [props] The property identifiers to pick.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var pick = flatRest(function(object, props) {
	      return object == null ? {} : basePick(object, arrayMap(props, toKey));
	    });
	
	    /**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    function pickBy(object, predicate) {
	      return object == null ? {} : basePickBy(object, getAllKeysIn(object), getIteratee(predicate));
	    }
	
	    /**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      path = isKey(path, object) ? [path] : castPath(path);
	
	      var index = -1,
	          length = path.length;
	
	      // Ensure the loop is entered when path is empty.
	      if (!length) {
	        object = undefined;
	        length = 1;
	      }
	      while (++index < length) {
	        var value = object == null ? undefined : object[toKey(path[index])];
	        if (value === undefined) {
	          index = length;
	          value = defaultValue;
	        }
	        object = isFunction(value) ? value.call(object) : value;
	      }
	      return object;
	    }
	
	    /**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      return object == null ? object : baseSet(object, path, value);
	    }
	
	    /**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function setWith(object, path, value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseSet(object, path, value, customizer);
	    }
	
	    /**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	     * entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */
	    var toPairs = createToPairs(keys);
	
	    /**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
	     * or set, its entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
	     */
	    var toPairsIn = createToPairs(keysIn);
	
	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. If `accumulator` is not
	     * provided, a new object with the same `[[Prototype]]` will be used. The
	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function transform(object, iteratee, accumulator) {
	      var isArr = isArray(object),
	          isArrLike = isArr || isBuffer(object) || isTypedArray(object);
	
	      iteratee = getIteratee(iteratee, 4);
	      if (accumulator == null) {
	        var Ctor = object && object.constructor;
	        if (isArrLike) {
	          accumulator = isArr ? new Ctor : [];
	        }
	        else if (isObject(object)) {
	          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	        }
	        else {
	          accumulator = {};
	        }
	      }
	      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }
	
	    /**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
	    function unset(object, path) {
	      return object == null ? true : baseUnset(object, path);
	    }
	
	    /**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
	    function update(object, path, updater) {
	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
	    }
	
	    /**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function updateWith(object, path, updater, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
	    }
	
	    /**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return object == null ? [] : baseValues(object, keys(object));
	    }
	
	    /**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return object == null ? [] : baseValues(object, keysIn(object));
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
	    function clamp(number, lower, upper) {
	      if (upper === undefined) {
	        upper = lower;
	        lower = undefined;
	      }
	      if (upper !== undefined) {
	        upper = toNumber(upper);
	        upper = upper === upper ? upper : 0;
	      }
	      if (lower !== undefined) {
	        lower = toNumber(lower);
	        lower = lower === lower ? lower : 0;
	      }
	      return baseClamp(toNumber(number), lower, upper);
	    }
	
	    /**
	     * Checks if `n` is between `start` and up to, but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @see _.range, _.rangeRight
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
	    function inRange(number, start, end) {
	      start = toFinite(start);
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = toFinite(end);
	      }
	      number = toNumber(number);
	      return baseInRange(number, start, end);
	    }
	
	    /**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(lower, upper, floating) {
	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	        upper = floating = undefined;
	      }
	      if (floating === undefined) {
	        if (typeof upper == 'boolean') {
	          floating = upper;
	          upper = undefined;
	        }
	        else if (typeof lower == 'boolean') {
	          floating = lower;
	          lower = undefined;
	        }
	      }
	      if (lower === undefined && upper === undefined) {
	        lower = 0;
	        upper = 1;
	      }
	      else {
	        lower = toFinite(lower);
	        if (upper === undefined) {
	          upper = lower;
	          lower = 0;
	        } else {
	          upper = toFinite(upper);
	        }
	      }
	      if (lower > upper) {
	        var temp = lower;
	        lower = upper;
	        upper = temp;
	      }
	      if (floating || lower % 1 || upper % 1) {
	        var rand = nativeRandom();
	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
	      }
	      return baseRandom(lower, upper);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? capitalize(word) : word);
	    });
	
	    /**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      return upperFirst(toString(string).toLowerCase());
	    }
	
	    /**
	     * Deburrs `string` by converting
	     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	     * letters to basic Latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = toString(string);
	      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	    }
	
	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search up to.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = toString(string);
	      target = baseToString(target);
	
	      var length = string.length;
	      position = position === undefined
	        ? length
	        : baseClamp(toInteger(position), 0, length);
	
	      var end = position;
	      position -= target.length;
	      return position >= 0 && string.slice(position, end) == target;
	    }
	
	    /**
	     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
	     * corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      string = toString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }
	
	    /**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = toString(string);
	      return (string && reHasRegExpChar.test(string))
	        ? string.replace(reRegExpChar, '\\$&')
	        : string;
	    }
	
	    /**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });
	
	    /**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */
	    var lowerCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toLowerCase();
	    });
	
	    /**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */
	    var lowerFirst = createCaseFirst('toLowerCase');
	
	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);
	
	      var strLength = length ? stringSize(string) : 0;
	      if (!length || strLength >= length) {
	        return string;
	      }
	      var mid = (length - strLength) / 2;
	      return (
	        createPadding(nativeFloor(mid), chars) +
	        string +
	        createPadding(nativeCeil(mid), chars)
	      );
	    }
	
	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
	    function padEnd(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);
	
	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (string + createPadding(length - strLength, chars))
	        : string;
	    }
	
	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
	    function padStart(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);
	
	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (createPadding(length - strLength, chars) + string)
	        : string;
	    }
	
	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      if (guard || radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
	    }
	
	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n, guard) {
	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      return baseRepeat(toString(string), n);
	    }
	
	    /**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
	    function replace() {
	      var args = arguments,
	          string = toString(args[0]);
	
	      return args.length < 3 ? string : string.replace(args[1], args[2]);
	    }
	
	    /**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });
	
	    /**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
	    function split(string, separator, limit) {
	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
	        separator = limit = undefined;
	      }
	      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
	      if (!limit) {
	        return [];
	      }
	      string = toString(string);
	      if (string && (
	            typeof separator == 'string' ||
	            (separator != null && !isRegExp(separator))
	          )) {
	        separator = baseToString(separator);
	        if (!separator && hasUnicode(string)) {
	          return castSlice(stringToArray(string), 0, limit);
	        }
	      }
	      return string.split(separator, limit);
	    }
	
	    /**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + upperFirst(word);
	    });
	
	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = toString(string);
	      position = baseClamp(toInteger(position), 0, string.length);
	      target = baseToString(target);
	      return string.slice(position, position + target.length) == target;
	    }
	
	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES template literal delimiter as an "interpolate" delimiter.
	     * // Disable support by replacing the "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, guard) {
	      // Based on John Resig's `tmpl` implementation
	      // (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;
	
	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      string = toString(string);
	      options = assignInWith({}, options, settings, assignInDefaults);
	
	      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);
	
	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";
	
	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');
	
	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';
	
	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);
	
	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
	
	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;
	
	        // The JS engine embedded in Adobe products needs `match` returned in
	        // order to produce the correct `offset` value.
	        return match;
	      });
	
	      source += "';\n";
	
	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');
	
	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';
	
	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source)
	          .apply(undefined, importsValues);
	      });
	
	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }
	
	    /**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
	    function toLower(value) {
	      return toString(value).toLowerCase();
	    }
	
	    /**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
	    function toUpper(value) {
	      return toString(value).toUpperCase();
	    }
	
	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrim, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          chrSymbols = stringToArray(chars),
	          start = charsStartIndex(strSymbols, chrSymbols),
	          end = charsEndIndex(strSymbols, chrSymbols) + 1;
	
	      return castSlice(strSymbols, start, end).join('');
	    }
	
	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimEnd(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrimEnd, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
	
	      return castSlice(strSymbols, 0, end).join('');
	    }
	
	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimStart(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrimStart, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          start = charsStartIndex(strSymbols, stringToArray(chars));
	
	      return castSlice(strSymbols, start).join('');
	    }
	
	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function truncate(string, options) {
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;
	
	      if (isObject(options)) {
	        var separator = 'separator' in options ? options.separator : separator;
	        length = 'length' in options ? toInteger(options.length) : length;
	        omission = 'omission' in options ? baseToString(options.omission) : omission;
	      }
	      string = toString(string);
	
	      var strLength = string.length;
	      if (hasUnicode(string)) {
	        var strSymbols = stringToArray(string);
	        strLength = strSymbols.length;
	      }
	      if (length >= strLength) {
	        return string;
	      }
	      var end = length - stringSize(omission);
	      if (end < 1) {
	        return omission;
	      }
	      var result = strSymbols
	        ? castSlice(strSymbols, 0, end).join('')
	        : string.slice(0, end);
	
	      if (separator === undefined) {
	        return result + omission;
	      }
	      if (strSymbols) {
	        end += (result.length - end);
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              substring = result;
	
	          if (!separator.global) {
	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            var newEnd = match.index;
	          }
	          result = result.slice(0, newEnd === undefined ? end : newEnd);
	        }
	      } else if (string.indexOf(baseToString(separator), end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }
	
	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = toString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }
	
	    /**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */
	    var upperCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toUpperCase();
	    });
	
	    /**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */
	    var upperFirst = createCaseFirst('toUpperCase');
	
	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      string = toString(string);
	      pattern = guard ? undefined : pattern;
	
	      if (pattern === undefined) {
	        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	      }
	      return string.match(pattern) || [];
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = baseRest(function(func, args) {
	      try {
	        return apply(func, undefined, args);
	      } catch (e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });
	
	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'click': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, ['click']);
	     * jQuery(element).on('click', view.click);
	     * // => Logs 'clicked docs' when clicked.
	     */
	    var bindAll = flatRest(function(object, methodNames) {
	      arrayEach(methodNames, function(key) {
	        key = toKey(key);
	        baseAssignValue(object, key, bind(object[key], object));
	      });
	      return object;
	    });
	
	    /**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new composite function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.stubTrue,                      _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
	    function cond(pairs) {
	      var length = pairs == null ? 0 : pairs.length,
	          toIteratee = getIteratee();
	
	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
	        if (typeof pair[1] != 'function') {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	        return [toIteratee(pair[0]), pair[1]];
	      });
	
	      return baseRest(function(args) {
	        var index = -1;
	        while (++index < length) {
	          var pair = pairs[index];
	          if (apply(pair[0], this, args)) {
	            return apply(pair[1], this, args);
	          }
	        }
	      });
	    }
	
	    /**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.conformsTo` with
	     * `source` partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 2, 'b': 1 },
	     *   { 'a': 1, 'b': 2 }
	     * ];
	     *
	     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
	     * // => [{ 'a': 1, 'b': 2 }]
	     */
	    function conforms(source) {
	      return baseConforms(baseClone(source, true));
	    }
	
	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new constant function.
	     * @example
	     *
	     * var objects = _.times(2, _.constant({ 'a': 1 }));
	     *
	     * console.log(objects);
	     * // => [{ 'a': 1 }, { 'a': 1 }]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }
	
	    /**
	     * Checks `value` to determine whether a default value should be returned in
	     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
	     * or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Util
	     * @param {*} value The value to check.
	     * @param {*} defaultValue The default value.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * _.defaultTo(1, 10);
	     * // => 1
	     *
	     * _.defaultTo(undefined, 10);
	     * // => 10
	     */
	    function defaultTo(value, defaultValue) {
	      return (value == null || value !== value) ? defaultValue : value;
	    }
	
	    /**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flowRight
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow([_.add, square]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();
	
	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 3.0.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flow
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight([square, _.add]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);
	
	    /**
	     * This method returns the first argument it receives.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     *
	     * console.log(_.identity(object) === object);
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }
	
	    /**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */
	    function iteratee(func) {
	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
	    }
	
	    /**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.isMatch` with `source`
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
	     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }
	
	    /**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** Partial comparisons will match empty array and empty object
	     * `srcValue` values against any array or object value, respectively. See
	     * `_.isEqual` for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.find(objects, _.matchesProperty('a', 4));
	     * // => { 'a': 4, 'b': 5, 'c': 6 }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, true));
	    }
	
	    /**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': _.constant(2) } },
	     *   { 'a': { 'b': _.constant(1) } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b']));
	     * // => [2, 1]
	     */
	    var method = baseRest(function(path, args) {
	      return function(object) {
	        return baseInvoke(object, path, args);
	      };
	    });
	
	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = baseRest(function(object, args) {
	      return function(path) {
	        return baseInvoke(object, path, args);
	      };
	    });
	
	    /**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      var props = keys(source),
	          methodNames = baseFunctions(source, props);
	
	      if (options == null &&
	          !(isObject(source) && (methodNames.length || !props.length))) {
	        options = source;
	        source = object;
	        object = this;
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
	          isFunc = isFunction(object);
	
	      arrayEach(methodNames, function(methodName) {
	        var func = source[methodName];
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = function() {
	            var chainAll = this.__chain__;
	            if (chain || chainAll) {
	              var result = object(this.__wrapped__),
	                  actions = result.__actions__ = copyArray(this.__actions__);
	
	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	              result.__chain__ = chainAll;
	              return result;
	            }
	            return func.apply(object, arrayPush([this.value()], arguments));
	          };
	        }
	      });
	
	      return object;
	    }
	
	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      if (root._ === this) {
	        root._ = oldDash;
	      }
	      return this;
	    }
	
	    /**
	     * This method returns `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * _.times(2, _.noop);
	     * // => [undefined, undefined]
	     */
	    function noop() {
	      // No operation performed.
	    }
	
	    /**
	     * Creates a function that gets the argument at index `n`. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new pass-thru function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */
	    function nthArg(n) {
	      n = toInteger(n);
	      return baseRest(function(args) {
	        return baseNth(args, n);
	      });
	    }
	
	    /**
	     * Creates a function that invokes `iteratees` with the arguments it receives
	     * and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over([Math.max, Math.min]);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */
	    var over = createOver(arrayMap);
	
	    /**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overEvery = createOver(arrayEvery);
	
	    /**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overSome = createOver(arraySome);
	
	    /**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	    }
	
	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return object == null ? undefined : baseGet(object, path);
	      };
	    }
	
	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified,
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.rangeRight
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    var range = createRange();
	
	    /**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.range
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */
	    var rangeRight = createRange(true);
	
	    /**
	     * This method returns a new empty array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Array} Returns the new empty array.
	     * @example
	     *
	     * var arrays = _.times(2, _.stubArray);
	     *
	     * console.log(arrays);
	     * // => [[], []]
	     *
	     * console.log(arrays[0] === arrays[1]);
	     * // => false
	     */
	    function stubArray() {
	      return [];
	    }
	
	    /**
	     * This method returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `false`.
	     * @example
	     *
	     * _.times(2, _.stubFalse);
	     * // => [false, false]
	     */
	    function stubFalse() {
	      return false;
	    }
	
	    /**
	     * This method returns a new empty object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Object} Returns the new empty object.
	     * @example
	     *
	     * var objects = _.times(2, _.stubObject);
	     *
	     * console.log(objects);
	     * // => [{}, {}]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => false
	     */
	    function stubObject() {
	      return {};
	    }
	
	    /**
	     * This method returns an empty string.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {string} Returns the empty string.
	     * @example
	     *
	     * _.times(2, _.stubString);
	     * // => ['', '']
	     */
	    function stubString() {
	      return '';
	    }
	
	    /**
	     * This method returns `true`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `true`.
	     * @example
	     *
	     * _.times(2, _.stubTrue);
	     * // => [true, true]
	     */
	    function stubTrue() {
	      return true;
	    }
	
	    /**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(0));
	     * // => [0, 0, 0, 0]
	     */
	    function times(n, iteratee) {
	      n = toInteger(n);
	      if (n < 1 || n > MAX_SAFE_INTEGER) {
	        return [];
	      }
	      var index = MAX_ARRAY_LENGTH,
	          length = nativeMin(n, MAX_ARRAY_LENGTH);
	
	      iteratee = getIteratee(iteratee);
	      n -= MAX_ARRAY_LENGTH;
	
	      var result = baseTimes(length, iteratee);
	      while (++index < n) {
	        iteratee(index);
	      }
	      return result;
	    }
	
	    /**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return arrayMap(value, toKey);
	      }
	      return isSymbol(value) ? [value] : copyArray(stringToPath(value));
	    }
	
	    /**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return toString(prefix) + id;
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    var add = createMathOperation(function(augend, addend) {
	      return augend + addend;
	    }, 0);
	
	    /**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');
	
	    /**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */
	    var divide = createMathOperation(function(dividend, divisor) {
	      return dividend / divisor;
	    }, 1);
	
	    /**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');
	
	    /**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
	    function max(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseGt)
	        : undefined;
	    }
	
	    /**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
	    function maxBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
	        : undefined;
	    }
	
	    /**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
	    function mean(array) {
	      return baseMean(array, identity);
	    }
	
	    /**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */
	    function meanBy(array, iteratee) {
	      return baseMean(array, getIteratee(iteratee, 2));
	    }
	
	    /**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
	    function min(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseLt)
	        : undefined;
	    }
	
	    /**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
	    function minBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
	        : undefined;
	    }
	
	    /**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */
	    var multiply = createMathOperation(function(multiplier, multiplicand) {
	      return multiplier * multiplicand;
	    }, 1);
	
	    /**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');
	
	    /**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */
	    var subtract = createMathOperation(function(minuend, subtrahend) {
	      return minuend - subtrahend;
	    }, 0);
	
	    /**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
	    function sum(array) {
	      return (array && array.length)
	        ? baseSum(array, identity)
	        : 0;
	    }
	
	    /**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
	    function sumBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSum(array, getIteratee(iteratee, 2))
	        : 0;
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    // Add methods that return wrapped values in chain sequences.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.assignIn = assignIn;
	    lodash.assignInWith = assignInWith;
	    lodash.assignWith = assignWith;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.castArray = castArray;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.concat = concat;
	    lodash.cond = cond;
	    lodash.conforms = conforms;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.differenceBy = differenceBy;
	    lodash.differenceWith = differenceWith;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatMap = flatMap;
	    lodash.flatMapDeep = flatMapDeep;
	    lodash.flatMapDepth = flatMapDepth;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flattenDepth = flattenDepth;
	    lodash.flip = flip;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.fromPairs = fromPairs;
	    lodash.functions = functions;
	    lodash.functionsIn = functionsIn;
	    lodash.groupBy = groupBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.intersectionBy = intersectionBy;
	    lodash.intersectionWith = intersectionWith;
	    lodash.invert = invert;
	    lodash.invertBy = invertBy;
	    lodash.invokeMap = invokeMap;
	    lodash.iteratee = iteratee;
	    lodash.keyBy = keyBy;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mergeWith = mergeWith;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.nthArg = nthArg;
	    lodash.omit = omit;
	    lodash.omitBy = omitBy;
	    lodash.once = once;
	    lodash.orderBy = orderBy;
	    lodash.over = over;
	    lodash.overArgs = overArgs;
	    lodash.overEvery = overEvery;
	    lodash.overSome = overSome;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pickBy = pickBy;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAll = pullAll;
	    lodash.pullAllBy = pullAllBy;
	    lodash.pullAllWith = pullAllWith;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rangeRight = rangeRight;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.reverse = reverse;
	    lodash.sampleSize = sampleSize;
	    lodash.set = set;
	    lodash.setWith = setWith;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortedUniq = sortedUniq;
	    lodash.sortedUniqBy = sortedUniqBy;
	    lodash.split = split;
	    lodash.spread = spread;
	    lodash.tail = tail;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.toArray = toArray;
	    lodash.toPairs = toPairs;
	    lodash.toPairsIn = toPairsIn;
	    lodash.toPath = toPath;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.unary = unary;
	    lodash.union = union;
	    lodash.unionBy = unionBy;
	    lodash.unionWith = unionWith;
	    lodash.uniq = uniq;
	    lodash.uniqBy = uniqBy;
	    lodash.uniqWith = uniqWith;
	    lodash.unset = unset;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.update = update;
	    lodash.updateWith = updateWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.without = without;
	    lodash.words = words;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.xorBy = xorBy;
	    lodash.xorWith = xorWith;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipObjectDeep = zipObjectDeep;
	    lodash.zipWith = zipWith;
	
	    // Add aliases.
	    lodash.entries = toPairs;
	    lodash.entriesIn = toPairsIn;
	    lodash.extend = assignIn;
	    lodash.extendWith = assignInWith;
	
	    // Add methods to `lodash.prototype`.
	    mixin(lodash, lodash);
	
	    /*------------------------------------------------------------------------*/
	
	    // Add methods that return unwrapped values in chain sequences.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clamp = clamp;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.cloneDeepWith = cloneDeepWith;
	    lodash.cloneWith = cloneWith;
	    lodash.conformsTo = conformsTo;
	    lodash.deburr = deburr;
	    lodash.defaultTo = defaultTo;
	    lodash.divide = divide;
	    lodash.endsWith = endsWith;
	    lodash.eq = eq;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.floor = floor;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.hasIn = hasIn;
	    lodash.head = head;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.invoke = invoke;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isArrayBuffer = isArrayBuffer;
	    lodash.isArrayLike = isArrayLike;
	    lodash.isArrayLikeObject = isArrayLikeObject;
	    lodash.isBoolean = isBoolean;
	    lodash.isBuffer = isBuffer;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isEqualWith = isEqualWith;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isInteger = isInteger;
	    lodash.isLength = isLength;
	    lodash.isMap = isMap;
	    lodash.isMatch = isMatch;
	    lodash.isMatchWith = isMatchWith;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNil = isNil;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isObjectLike = isObjectLike;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isSafeInteger = isSafeInteger;
	    lodash.isSet = isSet;
	    lodash.isString = isString;
	    lodash.isSymbol = isSymbol;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.isWeakMap = isWeakMap;
	    lodash.isWeakSet = isWeakSet;
	    lodash.join = join;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lowerCase = lowerCase;
	    lodash.lowerFirst = lowerFirst;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.maxBy = maxBy;
	    lodash.mean = mean;
	    lodash.meanBy = meanBy;
	    lodash.min = min;
	    lodash.minBy = minBy;
	    lodash.stubArray = stubArray;
	    lodash.stubFalse = stubFalse;
	    lodash.stubObject = stubObject;
	    lodash.stubString = stubString;
	    lodash.stubTrue = stubTrue;
	    lodash.multiply = multiply;
	    lodash.nth = nth;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padEnd = padEnd;
	    lodash.padStart = padStart;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.replace = replace;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.sample = sample;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedIndexBy = sortedIndexBy;
	    lodash.sortedIndexOf = sortedIndexOf;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.sortedLastIndexBy = sortedLastIndexBy;
	    lodash.sortedLastIndexOf = sortedLastIndexOf;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.subtract = subtract;
	    lodash.sum = sum;
	    lodash.sumBy = sumBy;
	    lodash.template = template;
	    lodash.times = times;
	    lodash.toFinite = toFinite;
	    lodash.toInteger = toInteger;
	    lodash.toLength = toLength;
	    lodash.toLower = toLower;
	    lodash.toNumber = toNumber;
	    lodash.toSafeInteger = toSafeInteger;
	    lodash.toString = toString;
	    lodash.toUpper = toUpper;
	    lodash.trim = trim;
	    lodash.trimEnd = trimEnd;
	    lodash.trimStart = trimStart;
	    lodash.truncate = truncate;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.upperCase = upperCase;
	    lodash.upperFirst = upperFirst;
	
	    // Add aliases.
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.first = head;
	
	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), { 'chain': false });
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
	    lodash.VERSION = VERSION;
	
	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });
	
	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__;
	        if (filtered && !index) {
	          return new LazyWrapper(this);
	        }
	        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
	
	        var result = this.clone();
	        if (filtered) {
	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
	        } else {
	          result.__views__.push({
	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
	          });
	        }
	        return result;
	      };
	
	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });
	
	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
	
	      LazyWrapper.prototype[methodName] = function(iteratee) {
	        var result = this.clone();
	        result.__iteratees__.push({
	          'iteratee': getIteratee(iteratee, 3),
	          'type': type
	        });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });
	
	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
	    arrayEach(['head', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');
	
	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });
	
	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	    arrayEach(['initial', 'tail'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');
	
	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });
	
	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };
	
	    LazyWrapper.prototype.find = function(predicate) {
	      return this.filter(predicate).head();
	    };
	
	    LazyWrapper.prototype.findLast = function(predicate) {
	      return this.reverse().find(predicate);
	    };
	
	    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
	      if (typeof path == 'function') {
	        return new LazyWrapper(this);
	      }
	      return this.map(function(value) {
	        return baseInvoke(value, path, args);
	      });
	    });
	
	    LazyWrapper.prototype.reject = function(predicate) {
	      return this.filter(negate(getIteratee(predicate)));
	    };
	
	    LazyWrapper.prototype.slice = function(start, end) {
	      start = toInteger(start);
	
	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = toInteger(end);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };
	
	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
	      return this.reverse().takeWhile(predicate).reverse();
	    };
	
	    LazyWrapper.prototype.toArray = function() {
	      return this.take(MAX_ARRAY_LENGTH);
	    };
	
	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	          isTaker = /^(?:head|last)$/.test(methodName),
	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
	          retUnwrapped = isTaker || /^find/.test(methodName);
	
	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = isTaker ? [1] : arguments,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);
	
	        var interceptor = function(value) {
	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
	          return (isTaker && chainAll) ? result[0] : result;
	        };
	
	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isUnwrapped = retUnwrapped && !chainAll,
	            onlyLazy = isLazy && !isHybrid;
	
	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	          return new LodashWrapper(result, chainAll);
	        }
	        if (isUnwrapped && onlyLazy) {
	          return func.apply(this, args);
	        }
	        result = this.thru(interceptor);
	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
	      };
	    });
	
	    // Add `Array` methods to `lodash.prototype`.
	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);
	
	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          var value = this.value();
	          return func.apply(isArray(value) ? value : [], args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(isArray(value) ? value : [], args);
	        });
	      };
	    });
	
	    // Map minified method names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = (lodashFunc.name + ''),
	            names = realNames[key] || (realNames[key] = []);
	
	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });
	
	    realNames[createHybrid(undefined, BIND_KEY_FLAG).name] = [{
	      'name': 'wrapper',
	      'func': undefined
	    }];
	
	    // Add methods to `LazyWrapper`.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;
	
	    // Add chain sequence methods to the `lodash` wrapper.
	    lodash.prototype.at = wrapperAt;
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.next = wrapperNext;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
	
	    // Add lazy aliases.
	    lodash.prototype.first = lodash.prototype.head;
	
	    if (symIterator) {
	      lodash.prototype[symIterator] = wrapperToIterator;
	    }
	    return lodash;
	  });
	
	  /*--------------------------------------------------------------------------*/
	
	  // Export lodash.
	  var _ = runInContext();
	
	  // Some AMD build optimizers, like r.js, check for condition patterns like:
	  if (true) {
	    // Expose Lodash on the global object to prevent errors when Lodash is
	    // loaded by a script tag in the presence of an AMD loader.
	    // See http://requirejs.org/docs/errors.html#mismatch for more details.
	    // Use `_.noConflict` to remove Lodash from the global object.
	    root._ = _;
	
	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds it.
	  else if (freeModule) {
	    // Export for Node.js.
	    (freeModule.exports = _)._ = _;
	    // Export for CommonJS support.
	    freeExports._ = _;
	  }
	  else {
	    // Export to the global object.
	    root._ = _;
	  }
	}.call(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module), __webpack_require__(1)))

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(4).runInContext();
	module.exports = __webpack_require__(5)(_, _);


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/**
	 * @license
	 * lodash lodash.com/license | Underscore.js 1.8.3 underscorejs.org/LICENSE
	 */
	;(function(){function n(n,t){return n.set(t[0],t[1]),n}function t(n,t){return n.add(t),n}function r(n,t,r){switch(r.length){case 0:return n.call(t);case 1:return n.call(t,r[0]);case 2:return n.call(t,r[0],r[1]);case 3:return n.call(t,r[0],r[1],r[2])}return n.apply(t,r)}function e(n,t,r,e){for(var u=-1,i=null==n?0:n.length;++u<i;){var o=n[u];t(e,o,r(o),n)}return e}function u(n,t){for(var r=-1,e=null==n?0:n.length;++r<e&&false!==t(n[r],r,n););return n}function i(n,t){for(var r=null==n?0:n.length;r--&&false!==t(n[r],r,n););
	return n}function o(n,t){for(var r=-1,e=null==n?0:n.length;++r<e;)if(!t(n[r],r,n))return false;return true}function f(n,t){for(var r=-1,e=null==n?0:n.length,u=0,i=[];++r<e;){var o=n[r];t(o,r,n)&&(i[u++]=o)}return i}function c(n,t){return!(null==n||!n.length)&&-1<d(n,t,0)}function a(n,t,r){for(var e=-1,u=null==n?0:n.length;++e<u;)if(r(t,n[e]))return true;return false}function l(n,t){for(var r=-1,e=null==n?0:n.length,u=Array(e);++r<e;)u[r]=t(n[r],r,n);return u}function s(n,t){for(var r=-1,e=t.length,u=n.length;++r<e;)n[u+r]=t[r];
	return n}function h(n,t,r,e){var u=-1,i=null==n?0:n.length;for(e&&i&&(r=n[++u]);++u<i;)r=t(r,n[u],u,n);return r}function p(n,t,r,e){var u=null==n?0:n.length;for(e&&u&&(r=n[--u]);u--;)r=t(r,n[u],u,n);return r}function _(n,t){for(var r=-1,e=null==n?0:n.length;++r<e;)if(t(n[r],r,n))return true;return false}function v(n,t,r){var e;return r(n,function(n,r,u){if(t(n,r,u))return e=r,false}),e}function g(n,t,r,e){var u=n.length;for(r+=e?1:-1;e?r--:++r<u;)if(t(n[r],r,n))return r;return-1}function d(n,t,r){if(t===t)n:{
	--r;for(var e=n.length;++r<e;)if(n[r]===t){n=r;break n}n=-1}else n=g(n,b,r);return n}function y(n,t,r,e){--r;for(var u=n.length;++r<u;)if(e(n[r],t))return r;return-1}function b(n){return n!==n}function x(n,t){var r=null==n?0:n.length;return r?k(n,t)/r:P}function j(n){return function(t){return null==t?F:t[n]}}function w(n){return function(t){return null==n?F:n[t]}}function m(n,t,r,e,u){return u(n,function(n,u,i){r=e?(e=false,n):t(r,n,u,i)}),r}function A(n,t){var r=n.length;for(n.sort(t);r--;)n[r]=n[r].c;
	return n}function k(n,t){for(var r,e=-1,u=n.length;++e<u;){var i=t(n[e]);i!==F&&(r=r===F?i:r+i)}return r}function E(n,t){for(var r=-1,e=Array(n);++r<n;)e[r]=t(r);return e}function O(n,t){return l(t,function(t){return[t,n[t]]})}function S(n){return function(t){return n(t)}}function I(n,t){return l(t,function(t){return n[t]})}function R(n,t){return n.has(t)}function z(n,t){for(var r=-1,e=n.length;++r<e&&-1<d(t,n[r],0););return r}function W(n,t){for(var r=n.length;r--&&-1<d(t,n[r],0););return r}function B(n){
	return"\\"+Tn[n]}function L(n){var t=-1,r=Array(n.size);return n.forEach(function(n,e){r[++t]=[e,n]}),r}function U(n,t){return function(r){return n(t(r))}}function C(n,t){for(var r=-1,e=n.length,u=0,i=[];++r<e;){var o=n[r];o!==t&&"__lodash_placeholder__"!==o||(n[r]="__lodash_placeholder__",i[u++]=r)}return i}function D(n){var t=-1,r=Array(n.size);return n.forEach(function(n){r[++t]=n}),r}function M(n){var t=-1,r=Array(n.size);return n.forEach(function(n){r[++t]=[n,n]}),r}function T(n){if(Bn.test(n)){
	for(var t=zn.lastIndex=0;zn.test(n);)++t;n=t}else n=tt(n);return n}function $(n){return Bn.test(n)?n.match(zn)||[]:n.split("")}var F,N=1/0,P=NaN,Z=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],q=/\b__p\+='';/g,V=/\b(__p\+=)''\+/g,K=/(__e\(.*?\)|\b__t\))\+'';/g,G=/&(?:amp|lt|gt|quot|#39);/g,H=/[&<>"']/g,J=RegExp(G.source),Y=RegExp(H.source),Q=/<%-([\s\S]+?)%>/g,X=/<%([\s\S]+?)%>/g,nn=/<%=([\s\S]+?)%>/g,tn=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,rn=/^\w*$/,en=/^\./,un=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,on=/[\\^$.*+?()[\]{}|]/g,fn=RegExp(on.source),cn=/^\s+|\s+$/g,an=/^\s+/,ln=/\s+$/,sn=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,hn=/\{\n\/\* \[wrapped with (.+)\] \*/,pn=/,? & /,_n=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,vn=/\\(\\)?/g,gn=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,dn=/\w*$/,yn=/^[-+]0x[0-9a-f]+$/i,bn=/^0b[01]+$/i,xn=/^\[object .+?Constructor\]$/,jn=/^0o[0-7]+$/i,wn=/^(?:0|[1-9]\d*)$/,mn=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,An=/($^)/,kn=/['\n\r\u2028\u2029\\]/g,En="[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|\\ud83c[\\udffb-\\udfff])?(?:\\u200d(?:[^\\ud800-\\udfff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|\\ud83c[\\udffb-\\udfff])?)*",On="(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])"+En,Sn="(?:[^\\ud800-\\udfff][\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]?|[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff])",In=RegExp("['\u2019]","g"),Rn=RegExp("[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]","g"),zn=RegExp("\\ud83c[\\udffb-\\udfff](?=\\ud83c[\\udffb-\\udfff])|"+Sn+En,"g"),Wn=RegExp(["[A-Z\\xc0-\\xd6\\xd8-\\xde]?[a-z\\xdf-\\xf6\\xf8-\\xff]+(?:['\u2019](?:d|ll|m|re|s|t|ve))?(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde]|$)|(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde](?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])|$)|[A-Z\\xc0-\\xd6\\xd8-\\xde]?(?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['\u2019](?:d|ll|m|re|s|t|ve))?|[A-Z\\xc0-\\xd6\\xd8-\\xde]+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?|\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)|\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)|\\d+",On].join("|"),"g"),Bn=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0\\ufe0e\\ufe0f]"),Ln=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Un="Array Buffer DataView Date Error Float32Array Float64Array Function Int8Array Int16Array Int32Array Map Math Object Promise RegExp Set String Symbol TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array WeakMap _ clearTimeout isFinite parseInt setTimeout".split(" "),Cn={};
	Cn["[object Float32Array]"]=Cn["[object Float64Array]"]=Cn["[object Int8Array]"]=Cn["[object Int16Array]"]=Cn["[object Int32Array]"]=Cn["[object Uint8Array]"]=Cn["[object Uint8ClampedArray]"]=Cn["[object Uint16Array]"]=Cn["[object Uint32Array]"]=true,Cn["[object Arguments]"]=Cn["[object Array]"]=Cn["[object ArrayBuffer]"]=Cn["[object Boolean]"]=Cn["[object DataView]"]=Cn["[object Date]"]=Cn["[object Error]"]=Cn["[object Function]"]=Cn["[object Map]"]=Cn["[object Number]"]=Cn["[object Object]"]=Cn["[object RegExp]"]=Cn["[object Set]"]=Cn["[object String]"]=Cn["[object WeakMap]"]=false;
	var Dn={};Dn["[object Arguments]"]=Dn["[object Array]"]=Dn["[object ArrayBuffer]"]=Dn["[object DataView]"]=Dn["[object Boolean]"]=Dn["[object Date]"]=Dn["[object Float32Array]"]=Dn["[object Float64Array]"]=Dn["[object Int8Array]"]=Dn["[object Int16Array]"]=Dn["[object Int32Array]"]=Dn["[object Map]"]=Dn["[object Number]"]=Dn["[object Object]"]=Dn["[object RegExp]"]=Dn["[object Set]"]=Dn["[object String]"]=Dn["[object Symbol]"]=Dn["[object Uint8Array]"]=Dn["[object Uint8ClampedArray]"]=Dn["[object Uint16Array]"]=Dn["[object Uint32Array]"]=true,
	Dn["[object Error]"]=Dn["[object Function]"]=Dn["[object WeakMap]"]=false;var Mn,Tn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},$n=parseFloat,Fn=parseInt,Nn=typeof global=="object"&&global&&global.Object===Object&&global,Pn=typeof self=="object"&&self&&self.Object===Object&&self,Zn=Nn||Pn||Function("return this")(),qn=typeof exports=="object"&&exports&&!exports.nodeType&&exports,Vn=qn&&typeof module=="object"&&module&&!module.nodeType&&module,Kn=Vn&&Vn.exports===qn,Gn=Kn&&Nn.h;
	n:{try{Mn=Gn&&Gn.g("util");break n}catch(n){}Mn=void 0}var Hn=Mn&&Mn.isArrayBuffer,Jn=Mn&&Mn.isDate,Yn=Mn&&Mn.isMap,Qn=Mn&&Mn.isRegExp,Xn=Mn&&Mn.isSet,nt=Mn&&Mn.isTypedArray,tt=j("length"),rt=w({"\xc0":"A","\xc1":"A","\xc2":"A","\xc3":"A","\xc4":"A","\xc5":"A","\xe0":"a","\xe1":"a","\xe2":"a","\xe3":"a","\xe4":"a","\xe5":"a","\xc7":"C","\xe7":"c","\xd0":"D","\xf0":"d","\xc8":"E","\xc9":"E","\xca":"E","\xcb":"E","\xe8":"e","\xe9":"e","\xea":"e","\xeb":"e","\xcc":"I","\xcd":"I","\xce":"I","\xcf":"I",
	"\xec":"i","\xed":"i","\xee":"i","\xef":"i","\xd1":"N","\xf1":"n","\xd2":"O","\xd3":"O","\xd4":"O","\xd5":"O","\xd6":"O","\xd8":"O","\xf2":"o","\xf3":"o","\xf4":"o","\xf5":"o","\xf6":"o","\xf8":"o","\xd9":"U","\xda":"U","\xdb":"U","\xdc":"U","\xf9":"u","\xfa":"u","\xfb":"u","\xfc":"u","\xdd":"Y","\xfd":"y","\xff":"y","\xc6":"Ae","\xe6":"ae","\xde":"Th","\xfe":"th","\xdf":"ss","\u0100":"A","\u0102":"A","\u0104":"A","\u0101":"a","\u0103":"a","\u0105":"a","\u0106":"C","\u0108":"C","\u010a":"C","\u010c":"C",
	"\u0107":"c","\u0109":"c","\u010b":"c","\u010d":"c","\u010e":"D","\u0110":"D","\u010f":"d","\u0111":"d","\u0112":"E","\u0114":"E","\u0116":"E","\u0118":"E","\u011a":"E","\u0113":"e","\u0115":"e","\u0117":"e","\u0119":"e","\u011b":"e","\u011c":"G","\u011e":"G","\u0120":"G","\u0122":"G","\u011d":"g","\u011f":"g","\u0121":"g","\u0123":"g","\u0124":"H","\u0126":"H","\u0125":"h","\u0127":"h","\u0128":"I","\u012a":"I","\u012c":"I","\u012e":"I","\u0130":"I","\u0129":"i","\u012b":"i","\u012d":"i","\u012f":"i",
	"\u0131":"i","\u0134":"J","\u0135":"j","\u0136":"K","\u0137":"k","\u0138":"k","\u0139":"L","\u013b":"L","\u013d":"L","\u013f":"L","\u0141":"L","\u013a":"l","\u013c":"l","\u013e":"l","\u0140":"l","\u0142":"l","\u0143":"N","\u0145":"N","\u0147":"N","\u014a":"N","\u0144":"n","\u0146":"n","\u0148":"n","\u014b":"n","\u014c":"O","\u014e":"O","\u0150":"O","\u014d":"o","\u014f":"o","\u0151":"o","\u0154":"R","\u0156":"R","\u0158":"R","\u0155":"r","\u0157":"r","\u0159":"r","\u015a":"S","\u015c":"S","\u015e":"S",
	"\u0160":"S","\u015b":"s","\u015d":"s","\u015f":"s","\u0161":"s","\u0162":"T","\u0164":"T","\u0166":"T","\u0163":"t","\u0165":"t","\u0167":"t","\u0168":"U","\u016a":"U","\u016c":"U","\u016e":"U","\u0170":"U","\u0172":"U","\u0169":"u","\u016b":"u","\u016d":"u","\u016f":"u","\u0171":"u","\u0173":"u","\u0174":"W","\u0175":"w","\u0176":"Y","\u0177":"y","\u0178":"Y","\u0179":"Z","\u017b":"Z","\u017d":"Z","\u017a":"z","\u017c":"z","\u017e":"z","\u0132":"IJ","\u0133":"ij","\u0152":"Oe","\u0153":"oe","\u0149":"'n",
	"\u017f":"s"}),et=w({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"}),ut=w({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),it=function w(En){function On(n){if(gu(n)&&!uf(n)&&!(n instanceof Mn)){if(n instanceof zn)return n;if(ui.call(n,"__wrapped__"))return Te(n)}return new zn(n)}function Sn(){}function zn(n,t){this.__wrapped__=n,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=F}function Mn(n){this.__wrapped__=n,this.__actions__=[],this.__dir__=1,this.__filtered__=false,
	this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Tn(n){var t=-1,r=null==n?0:n.length;for(this.clear();++t<r;){var e=n[t];this.set(e[0],e[1])}}function Nn(n){var t=-1,r=null==n?0:n.length;for(this.clear();++t<r;){var e=n[t];this.set(e[0],e[1])}}function Pn(n){var t=-1,r=null==n?0:n.length;for(this.clear();++t<r;){var e=n[t];this.set(e[0],e[1])}}function qn(n){var t=-1,r=null==n?0:n.length;for(this.__data__=new Pn;++t<r;)this.add(n[t])}function Vn(n){this.size=(this.__data__=new Nn(n)).size;
	}function Gn(n,t){var r,e=uf(n),u=!e&&ef(n),i=!e&&!u&&ff(n),o=!e&&!u&&!i&&hf(n),u=(e=e||u||i||o)?E(n.length,Qu):[],f=u.length;for(r in n)!t&&!ui.call(n,r)||e&&("length"==r||i&&("offset"==r||"parent"==r)||o&&("buffer"==r||"byteLength"==r||"byteOffset"==r)||Ae(r,f))||u.push(r);return u}function tt(n){var t=n.length;return t?n[cr(0,t-1)]:F}function ot(n,t){return Ue(Dr(n),gt(t,0,n.length))}function ft(n){return Ue(Dr(n))}function ct(n,t,r,e){return n===F||cu(n,ti[r])&&!ui.call(e,r)?t:n}function at(n,t,r){
	(r===F||cu(n[t],r))&&(r!==F||t in n)||_t(n,t,r)}function lt(n,t,r){var e=n[t];ui.call(n,t)&&cu(e,r)&&(r!==F||t in n)||_t(n,t,r)}function st(n,t){for(var r=n.length;r--;)if(cu(n[r][0],t))return r;return-1}function ht(n,t,r,e){return ro(n,function(n,u,i){t(e,n,r(n),i)}),e}function pt(n,t){return n&&Mr(t,Ru(t),n)}function _t(n,t,r){"__proto__"==t&&wi?wi(n,t,{configurable:true,enumerable:true,value:r,writable:true}):n[t]=r}function vt(n,t){for(var r=-1,e=t.length,u=qu(e),i=null==n;++r<e;)u[r]=i?F:Su(n,t[r]);
	return u}function gt(n,t,r){return n===n&&(r!==F&&(n=n<=r?n:r),t!==F&&(n=n>=t?n:t)),n}function dt(n,t,r,e,i,o,f){var c;if(e&&(c=o?e(n,i,o,f):e(n)),c!==F)return c;if(!vu(n))return n;if(i=uf(n)){if(c=xe(n),!t)return Dr(n,c)}else{var a=po(n),l="[object Function]"==a||"[object GeneratorFunction]"==a;if(ff(n))return zr(n,t);if("[object Object]"==a||"[object Arguments]"==a||l&&!o){if(c=je(l?{}:n),!t)return Tr(n,pt(c,n))}else{if(!Dn[a])return o?n:{};c=we(n,a,dt,t)}}if(f||(f=new Vn),o=f.get(n))return o;f.set(n,c);
	var s=i?F:(r?he:Ru)(n);return u(s||n,function(u,i){s&&(i=u,u=n[i]),lt(c,i,dt(u,t,r,e,i,n,f))}),c}function yt(n){var t=Ru(n);return function(r){return bt(r,n,t)}}function bt(n,t,r){var e=r.length;if(null==n)return!e;for(n=Ju(n);e--;){var u=r[e],i=t[u],o=n[u];if(o===F&&!(u in n)||!i(o))return false}return true}function xt(n,t,r){if(typeof n!="function")throw new Xu("Expected a function");return go(function(){n.apply(F,r)},t)}function jt(n,t,r,e){var u=-1,i=c,o=true,f=n.length,s=[],h=t.length;if(!f)return s;r&&(t=l(t,S(r))),
	e?(i=a,o=false):200<=t.length&&(i=R,o=false,t=new qn(t));n:for(;++u<f;){var p=n[u],_=null==r?p:r(p),p=e||0!==p?p:0;if(o&&_===_){for(var v=h;v--;)if(t[v]===_)continue n;s.push(p)}else i(t,_,e)||s.push(p)}return s}function wt(n,t){var r=true;return ro(n,function(n,e,u){return r=!!t(n,e,u)}),r}function mt(n,t,r){for(var e=-1,u=n.length;++e<u;){var i=n[e],o=t(i);if(null!=o&&(f===F?o===o&&!xu(o):r(o,f)))var f=o,c=i}return c}function At(n,t){var r=[];return ro(n,function(n,e,u){t(n,e,u)&&r.push(n)}),r}function kt(n,t,r,e,u){
	var i=-1,o=n.length;for(r||(r=me),u||(u=[]);++i<o;){var f=n[i];0<t&&r(f)?1<t?kt(f,t-1,r,e,u):s(u,f):e||(u[u.length]=f)}return u}function Et(n,t){return n&&uo(n,t,Ru)}function Ot(n,t){return n&&io(n,t,Ru)}function St(n,t){return f(t,function(t){return hu(n[t])})}function It(n,t){t=Ee(t,n)?[t]:Ir(t);for(var r=0,e=t.length;null!=n&&r<e;)n=n[Ce(t[r++])];return r&&r==e?n:F}function Rt(n,t,r){return t=t(n),uf(n)?t:s(t,r(n))}function zt(n){if(null==n)return n===F?"[object Undefined]":"[object Null]";n=Ju(n);
	var t;if(ji&&ji in n){var r=ui.call(n,ji),e=n[ji];try{n[ji]=F,t=true}catch(n){}var u=fi.call(n);t&&(r?n[ji]=e:delete n[ji]),t=u}else t=fi.call(n);return t}function Wt(n,t){return n>t}function Bt(n,t){return null!=n&&ui.call(n,t)}function Lt(n,t){return null!=n&&t in Ju(n)}function Ut(n,t,r){for(var e=r?a:c,u=n[0].length,i=n.length,o=i,f=qu(i),s=1/0,h=[];o--;){var p=n[o];o&&t&&(p=l(p,S(t))),s=Li(p.length,s),f[o]=!r&&(t||120<=u&&120<=p.length)?new qn(o&&p):F}var p=n[0],_=-1,v=f[0];n:for(;++_<u&&h.length<s;){
	var g=p[_],d=t?t(g):g,g=r||0!==g?g:0;if(v?!R(v,d):!e(h,d,r)){for(o=i;--o;){var y=f[o];if(y?!R(y,d):!e(n[o],d,r))continue n}v&&v.push(d),h.push(g)}}return h}function Ct(n,t,r){var e={};return Et(n,function(n,u,i){t(e,r(n),u,i)}),e}function Dt(n,t,e){return Ee(t,n)||(t=Ir(t),n=We(n,t),t=Ze(t)),t=null==n?n:n[Ce(t)],null==t?F:r(t,n,e)}function Mt(n){return gu(n)&&"[object Arguments]"==zt(n)}function Tt(n){return gu(n)&&"[object ArrayBuffer]"==zt(n)}function $t(n){return gu(n)&&"[object Date]"==zt(n)}
	function Ft(n,t,r,e,u){if(n===t)t=true;else if(null==n||null==t||!vu(n)&&!gu(t))t=n!==n&&t!==t;else n:{var i=uf(n),o=uf(t),f="[object Array]",c="[object Array]";i||(f=po(n),f="[object Arguments]"==f?"[object Object]":f),o||(c=po(t),c="[object Arguments]"==c?"[object Object]":c);var a="[object Object]"==f,o="[object Object]"==c;if((c=f==c)&&ff(n)){if(!ff(t)){t=false;break n}i=true,a=false}if(c&&!a)u||(u=new Vn),t=i||hf(n)?ae(n,t,Ft,r,e,u):le(n,t,f,Ft,r,e,u);else{if(!(2&e)&&(i=a&&ui.call(n,"__wrapped__"),f=o&&ui.call(t,"__wrapped__"),
	i||f)){n=i?n.value():n,t=f?t.value():t,u||(u=new Vn),t=Ft(n,t,r,e,u);break n}if(c)t:if(u||(u=new Vn),i=2&e,f=Ru(n),o=f.length,c=Ru(t).length,o==c||i){for(a=o;a--;){var l=f[a];if(!(i?l in t:ui.call(t,l))){t=false;break t}}if((c=u.get(n))&&u.get(t))t=c==t;else{c=true,u.set(n,t),u.set(t,n);for(var s=i;++a<o;){var l=f[a],h=n[l],p=t[l];if(r)var _=i?r(p,h,l,t,n,u):r(h,p,l,n,t,u);if(_===F?h!==p&&!Ft(h,p,r,e,u):!_){c=false;break}s||(s="constructor"==l)}c&&!s&&(r=n.constructor,e=t.constructor,r!=e&&"constructor"in n&&"constructor"in t&&!(typeof r=="function"&&r instanceof r&&typeof e=="function"&&e instanceof e)&&(c=false)),
	u.delete(n),u.delete(t),t=c}}else t=false;else t=false}}return t}function Nt(n){return gu(n)&&"[object Map]"==po(n)}function Pt(n,t,r,e){var u=r.length,i=u,o=!e;if(null==n)return!i;for(n=Ju(n);u--;){var f=r[u];if(o&&f[2]?f[1]!==n[f[0]]:!(f[0]in n))return false}for(;++u<i;){var f=r[u],c=f[0],a=n[c],l=f[1];if(o&&f[2]){if(a===F&&!(c in n))return false}else{if(f=new Vn,e)var s=e(a,l,c,n,t,f);if(s===F?!Ft(l,a,e,3,f):!s)return false}}return true}function Zt(n){return!(!vu(n)||oi&&oi in n)&&(hu(n)?li:xn).test(De(n))}function qt(n){
	return gu(n)&&"[object RegExp]"==zt(n)}function Vt(n){return gu(n)&&"[object Set]"==po(n)}function Kt(n){return gu(n)&&_u(n.length)&&!!Cn[zt(n)]}function Gt(n){return typeof n=="function"?n:null==n?Mu:typeof n=="object"?uf(n)?Xt(n[0],n[1]):Qt(n):Nu(n)}function Ht(n){if(!Se(n))return Wi(n);var t,r=[];for(t in Ju(n))ui.call(n,t)&&"constructor"!=t&&r.push(t);return r}function Jt(n,t){return n<t}function Yt(n,t){var r=-1,e=au(n)?qu(n.length):[];return ro(n,function(n,u,i){e[++r]=t(n,u,i)}),e}function Qt(n){
	var t=de(n);return 1==t.length&&t[0][2]?Ie(t[0][0],t[0][1]):function(r){return r===n||Pt(r,n,t)}}function Xt(n,t){return Ee(n)&&t===t&&!vu(t)?Ie(Ce(n),t):function(r){var e=Su(r,n);return e===F&&e===t?Iu(r,n):Ft(t,e,F,3)}}function nr(n,t,r,e,u){n!==t&&uo(t,function(i,o){if(vu(i)){u||(u=new Vn);var f=u,c=n[o],a=t[o],l=f.get(a);if(l)at(n,o,l);else{var l=e?e(c,a,o+"",n,t,f):F,s=l===F;if(s){var h=uf(a),p=!h&&ff(a),_=!h&&!p&&hf(a),l=a;h||p||_?uf(c)?l=c:lu(c)?l=Dr(c):p?(s=false,l=zr(a,true)):_?(s=false,l=Br(a,true)):l=[]:yu(a)||ef(a)?(l=c,
	ef(c)?l=Eu(c):(!vu(c)||r&&hu(c))&&(l=je(a))):s=false}s&&(f.set(a,l),nr(l,a,r,e,f),f.delete(a)),at(n,o,l)}}else f=e?e(n[o],i,o+"",n,t,u):F,f===F&&(f=i),at(n,o,f)},zu)}function tr(n,t){var r=n.length;if(r)return t+=0>t?r:0,Ae(t,r)?n[t]:F}function rr(n,t,r){var e=-1;return t=l(t.length?t:[Mu],S(ve())),n=Yt(n,function(n){return{a:l(t,function(t){return t(n)}),b:++e,c:n}}),A(n,function(n,t){var e;n:{e=-1;for(var u=n.a,i=t.a,o=u.length,f=r.length;++e<o;){var c=Lr(u[e],i[e]);if(c){e=e>=f?c:c*("desc"==r[e]?-1:1);
	break n}}e=n.b-t.b}return e})}function er(n,t){return n=Ju(n),ur(n,t,function(t,r){return r in n})}function ur(n,t,r){for(var e=-1,u=t.length,i={};++e<u;){var o=t[e],f=n[o];r(f,o)&&_t(i,o,f)}return i}function ir(n){return function(t){return It(t,n)}}function or(n,t,r,e){var u=e?y:d,i=-1,o=t.length,f=n;for(n===t&&(t=Dr(t)),r&&(f=l(n,S(r)));++i<o;)for(var c=0,a=t[i],a=r?r(a):a;-1<(c=u(f,a,c,e));)f!==n&&yi.call(f,c,1),yi.call(n,c,1);return n}function fr(n,t){for(var r=n?t.length:0,e=r-1;r--;){var u=t[r];
	if(r==e||u!==i){var i=u;if(Ae(u))yi.call(n,u,1);else if(Ee(u,n))delete n[Ce(u)];else{var u=Ir(u),o=We(n,u);null!=o&&delete o[Ce(Ze(u))]}}}}function cr(n,t){return n+Oi(Di()*(t-n+1))}function ar(n,t){var r="";if(!n||1>t||9007199254740991<t)return r;do t%2&&(r+=n),(t=Oi(t/2))&&(n+=n);while(t);return r}function lr(n,t){return yo(ze(n,t,Mu),n+"")}function sr(n){return tt(Bu(n))}function hr(n,t){var r=Bu(n);return Ue(r,gt(t,0,r.length))}function pr(n,t,r,e){if(!vu(n))return n;t=Ee(t,n)?[t]:Ir(t);for(var u=-1,i=t.length,o=i-1,f=n;null!=f&&++u<i;){
	var c=Ce(t[u]),a=r;if(u!=o){var l=f[c],a=e?e(l,c,f):F;a===F&&(a=vu(l)?l:Ae(t[u+1])?[]:{})}lt(f,c,a),f=f[c]}return n}function _r(n){return Ue(Bu(n))}function vr(n,t,r){var e=-1,u=n.length;for(0>t&&(t=-t>u?0:u+t),r=r>u?u:r,0>r&&(r+=u),u=t>r?0:r-t>>>0,t>>>=0,r=qu(u);++e<u;)r[e]=n[e+t];return r}function gr(n,t){var r;return ro(n,function(n,e,u){return r=t(n,e,u),!r}),!!r}function dr(n,t,r){var e=0,u=null==n?e:n.length;if(typeof t=="number"&&t===t&&2147483647>=u){for(;e<u;){var i=e+u>>>1,o=n[i];null!==o&&!xu(o)&&(r?o<=t:o<t)?e=i+1:u=i;
	}return u}return yr(n,t,Mu,r)}function yr(n,t,r,e){t=r(t);for(var u=0,i=null==n?0:n.length,o=t!==t,f=null===t,c=xu(t),a=t===F;u<i;){var l=Oi((u+i)/2),s=r(n[l]),h=s!==F,p=null===s,_=s===s,v=xu(s);(o?e||_:a?_&&(e||h):f?_&&h&&(e||!p):c?_&&h&&!p&&(e||!v):p||v?0:e?s<=t:s<t)?u=l+1:i=l}return Li(i,4294967294)}function br(n,t){for(var r=-1,e=n.length,u=0,i=[];++r<e;){var o=n[r],f=t?t(o):o;if(!r||!cu(f,c)){var c=f;i[u++]=0===o?0:o}}return i}function xr(n){return typeof n=="number"?n:xu(n)?P:+n}function jr(n){
	if(typeof n=="string")return n;if(uf(n))return l(n,jr)+"";if(xu(n))return no?no.call(n):"";var t=n+"";return"0"==t&&1/n==-N?"-0":t}function wr(n,t,r){var e=-1,u=c,i=n.length,o=true,f=[],l=f;if(r)o=false,u=a;else if(200<=i){if(u=t?null:ao(n))return D(u);o=false,u=R,l=new qn}else l=t?[]:f;n:for(;++e<i;){var s=n[e],h=t?t(s):s,s=r||0!==s?s:0;if(o&&h===h){for(var p=l.length;p--;)if(l[p]===h)continue n;t&&l.push(h),f.push(s)}else u(l,h,r)||(l!==f&&l.push(h),f.push(s))}return f}function mr(n,t,r,e){for(var u=n.length,i=e?u:-1;(e?i--:++i<u)&&t(n[i],i,n););
	return r?vr(n,e?0:i,e?i+1:u):vr(n,e?i+1:0,e?u:i)}function Ar(n,t){var r=n;return r instanceof Mn&&(r=r.value()),h(t,function(n,t){return t.func.apply(t.thisArg,s([n],t.args))},r)}function kr(n,t,r){var e=n.length;if(2>e)return e?wr(n[0]):[];for(var u=-1,i=qu(e);++u<e;)for(var o=n[u],f=-1;++f<e;)f!=u&&(i[u]=jt(i[u]||o,n[f],t,r));return wr(kt(i,1),t,r)}function Er(n,t,r){for(var e=-1,u=n.length,i=t.length,o={};++e<u;)r(o,n[e],e<i?t[e]:F);return o}function Or(n){return lu(n)?n:[]}function Sr(n){return typeof n=="function"?n:Mu;
	}function Ir(n){return uf(n)?n:bo(n)}function Rr(n,t,r){var e=n.length;return r=r===F?e:r,!t&&r>=e?n:vr(n,t,r)}function zr(n,t){if(t)return n.slice();var r=n.length,r=_i?_i(r):new n.constructor(r);return n.copy(r),r}function Wr(n){var t=new n.constructor(n.byteLength);return new pi(t).set(new pi(n)),t}function Br(n,t){return new n.constructor(t?Wr(n.buffer):n.buffer,n.byteOffset,n.length)}function Lr(n,t){if(n!==t){var r=n!==F,e=null===n,u=n===n,i=xu(n),o=t!==F,f=null===t,c=t===t,a=xu(t);if(!f&&!a&&!i&&n>t||i&&o&&c&&!f&&!a||e&&o&&c||!r&&c||!u)return 1;
	if(!e&&!i&&!a&&n<t||a&&r&&u&&!e&&!i||f&&r&&u||!o&&u||!c)return-1}return 0}function Ur(n,t,r,e){var u=-1,i=n.length,o=r.length,f=-1,c=t.length,a=Bi(i-o,0),l=qu(c+a);for(e=!e;++f<c;)l[f]=t[f];for(;++u<o;)(e||u<i)&&(l[r[u]]=n[u]);for(;a--;)l[f++]=n[u++];return l}function Cr(n,t,r,e){var u=-1,i=n.length,o=-1,f=r.length,c=-1,a=t.length,l=Bi(i-f,0),s=qu(l+a);for(e=!e;++u<l;)s[u]=n[u];for(l=u;++c<a;)s[l+c]=t[c];for(;++o<f;)(e||u<i)&&(s[l+r[o]]=n[u++]);return s}function Dr(n,t){var r=-1,e=n.length;for(t||(t=qu(e));++r<e;)t[r]=n[r];
	return t}function Mr(n,t,r,e){var u=!r;r||(r={});for(var i=-1,o=t.length;++i<o;){var f=t[i],c=e?e(r[f],n[f],f,r,n):F;c===F&&(c=n[f]),u?_t(r,f,c):lt(r,f,c)}return r}function Tr(n,t){return Mr(n,so(n),t)}function $r(n,t){return function(r,u){var i=uf(r)?e:ht,o=t?t():{};return i(r,n,ve(u,2),o)}}function Fr(n){return lr(function(t,r){var e=-1,u=r.length,i=1<u?r[u-1]:F,o=2<u?r[2]:F,i=3<n.length&&typeof i=="function"?(u--,i):F;for(o&&ke(r[0],r[1],o)&&(i=3>u?F:i,u=1),t=Ju(t);++e<u;)(o=r[e])&&n(t,o,e,i);return t;
	})}function Nr(n,t){return function(r,e){if(null==r)return r;if(!au(r))return n(r,e);for(var u=r.length,i=t?u:-1,o=Ju(r);(t?i--:++i<u)&&false!==e(o[i],i,o););return r}}function Pr(n){return function(t,r,e){var u=-1,i=Ju(t);e=e(t);for(var o=e.length;o--;){var f=e[n?o:++u];if(false===r(i[f],f,i))break}return t}}function Zr(n,t,r){function e(){return(this&&this!==Zn&&this instanceof e?i:n).apply(u?r:this,arguments)}var u=1&t,i=Kr(n);return e}function qr(n){return function(t){t=Ou(t);var r=Bn.test(t)?$(t):F,e=r?r[0]:t.charAt(0);
	return t=r?Rr(r,1).join(""):t.slice(1),e[n]()+t}}function Vr(n){return function(t){return h(Cu(Uu(t).replace(In,"")),n,"")}}function Kr(n){return function(){var t=arguments;switch(t.length){case 0:return new n;case 1:return new n(t[0]);case 2:return new n(t[0],t[1]);case 3:return new n(t[0],t[1],t[2]);case 4:return new n(t[0],t[1],t[2],t[3]);case 5:return new n(t[0],t[1],t[2],t[3],t[4]);case 6:return new n(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new n(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var r=to(n.prototype),t=n.apply(r,t);
	return vu(t)?t:r}}function Gr(n,t,e){function u(){for(var o=arguments.length,f=qu(o),c=o,a=_e(u);c--;)f[c]=arguments[c];return c=3>o&&f[0]!==a&&f[o-1]!==a?[]:C(f,a),o-=c.length,o<e?ie(n,t,Yr,u.placeholder,F,f,c,F,F,e-o):r(this&&this!==Zn&&this instanceof u?i:n,this,f)}var i=Kr(n);return u}function Hr(n){return function(t,r,e){var u=Ju(t);if(!au(t)){var i=ve(r,3);t=Ru(t),r=function(n){return i(u[n],n,u)}}return r=n(t,r,e),-1<r?u[i?t[r]:r]:F}}function Jr(n){return se(function(t){var r=t.length,e=r,u=zn.prototype.thru;
	for(n&&t.reverse();e--;){var i=t[e];if(typeof i!="function")throw new Xu("Expected a function");if(u&&!o&&"wrapper"==pe(i))var o=new zn([],true)}for(e=o?e:r;++e<r;)var i=t[e],u=pe(i),f="wrapper"==u?lo(i):F,o=f&&Oe(f[0])&&424==f[1]&&!f[4].length&&1==f[9]?o[pe(f[0])].apply(o,f[3]):1==i.length&&Oe(i)?o[u]():o.thru(i);return function(){var n=arguments,e=n[0];if(o&&1==n.length&&uf(e)&&200<=e.length)return o.plant(e).value();for(var u=0,n=r?t[u].apply(this,n):e;++u<r;)n=t[u].call(this,n);return n}})}function Yr(n,t,r,e,u,i,o,f,c,a){
	function l(){for(var d=arguments.length,y=qu(d),b=d;b--;)y[b]=arguments[b];if(_){var x,j=_e(l),b=y.length;for(x=0;b--;)y[b]===j&&++x}if(e&&(y=Ur(y,e,u,_)),i&&(y=Cr(y,i,o,_)),d-=x,_&&d<a)return j=C(y,j),ie(n,t,Yr,l.placeholder,r,y,j,f,c,a-d);if(j=h?r:this,b=p?j[n]:n,d=y.length,f){x=y.length;for(var w=Li(f.length,x),m=Dr(y);w--;){var A=f[w];y[w]=Ae(A,x)?m[A]:F}}else v&&1<d&&y.reverse();return s&&c<d&&(y.length=c),this&&this!==Zn&&this instanceof l&&(b=g||Kr(b)),b.apply(j,y)}var s=128&t,h=1&t,p=2&t,_=24&t,v=512&t,g=p?F:Kr(n);
	return l}function Qr(n,t){return function(r,e){return Ct(r,n,t(e))}}function Xr(n,t){return function(r,e){var u;if(r===F&&e===F)return t;if(r!==F&&(u=r),e!==F){if(u===F)return e;typeof r=="string"||typeof e=="string"?(r=jr(r),e=jr(e)):(r=xr(r),e=xr(e)),u=n(r,e)}return u}}function ne(n){return se(function(t){return t=l(t,S(ve())),lr(function(e){var u=this;return n(t,function(n){return r(n,u,e)})})})}function te(n,t){t=t===F?" ":jr(t);var r=t.length;return 2>r?r?ar(t,n):t:(r=ar(t,Ei(n/T(t))),Bn.test(t)?Rr($(r),0,n).join(""):r.slice(0,n));
	}function re(n,t,e,u){function i(){for(var t=-1,c=arguments.length,a=-1,l=u.length,s=qu(l+c),h=this&&this!==Zn&&this instanceof i?f:n;++a<l;)s[a]=u[a];for(;c--;)s[a++]=arguments[++t];return r(h,o?e:this,s)}var o=1&t,f=Kr(n);return i}function ee(n){return function(t,r,e){e&&typeof e!="number"&&ke(t,r,e)&&(r=e=F),t=wu(t),r===F?(r=t,t=0):r=wu(r),e=e===F?t<r?1:-1:wu(e);var u=-1;r=Bi(Ei((r-t)/(e||1)),0);for(var i=qu(r);r--;)i[n?r:++u]=t,t+=e;return i}}function ue(n){return function(t,r){return typeof t=="string"&&typeof r=="string"||(t=ku(t),
	r=ku(r)),n(t,r)}}function ie(n,t,r,e,u,i,o,f,c,a){var l=8&t,s=l?o:F;o=l?F:o;var h=l?i:F;return i=l?F:i,t=(t|(l?32:64))&~(l?64:32),4&t||(t&=-4),u=[n,t,u,h,s,i,o,f,c,a],r=r.apply(F,u),Oe(n)&&vo(r,u),r.placeholder=e,Be(r,n,t)}function oe(n){var t=Hu[n];return function(n,r){if(n=ku(n),r=Li(mu(r),292)){var e=(Ou(n)+"e").split("e"),e=t(e[0]+"e"+(+e[1]+r)),e=(Ou(e)+"e").split("e");return+(e[0]+"e"+(+e[1]-r))}return t(n)}}function fe(n){return function(t){var r=po(t);return"[object Map]"==r?L(t):"[object Set]"==r?M(t):O(t,n(t));
	}}function ce(n,t,r,e,u,i,o,f){var c=2&t;if(!c&&typeof n!="function")throw new Xu("Expected a function");var a=e?e.length:0;if(a||(t&=-97,e=u=F),o=o===F?o:Bi(mu(o),0),f=f===F?f:mu(f),a-=u?u.length:0,64&t){var l=e,s=u;e=u=F}var h=c?F:lo(n);return i=[n,t,r,e,u,l,s,i,o,f],h&&(r=i[1],n=h[1],t=r|n,e=128==n&&8==r||128==n&&256==r&&i[7].length<=h[8]||384==n&&h[7].length<=h[8]&&8==r,131>t||e)&&(1&n&&(i[2]=h[2],t|=1&r?0:4),(r=h[3])&&(e=i[3],i[3]=e?Ur(e,r,h[4]):r,i[4]=e?C(i[3],"__lodash_placeholder__"):h[4]),
	(r=h[5])&&(e=i[5],i[5]=e?Cr(e,r,h[6]):r,i[6]=e?C(i[5],"__lodash_placeholder__"):h[6]),(r=h[7])&&(i[7]=r),128&n&&(i[8]=null==i[8]?h[8]:Li(i[8],h[8])),null==i[9]&&(i[9]=h[9]),i[0]=h[0],i[1]=t),n=i[0],t=i[1],r=i[2],e=i[3],u=i[4],f=i[9]=null==i[9]?c?0:n.length:Bi(i[9]-a,0),!f&&24&t&&(t&=-25),Be((h?oo:vo)(t&&1!=t?8==t||16==t?Gr(n,t,f):32!=t&&33!=t||u.length?Yr.apply(F,i):re(n,t,r,e):Zr(n,t,r),i),n,t)}function ae(n,t,r,e,u,i){var o=2&u,f=n.length,c=t.length;if(f!=c&&!(o&&c>f))return false;if((c=i.get(n))&&i.get(t))return c==t;
	var c=-1,a=true,l=1&u?new qn:F;for(i.set(n,t),i.set(t,n);++c<f;){var s=n[c],h=t[c];if(e)var p=o?e(h,s,c,t,n,i):e(s,h,c,n,t,i);if(p!==F){if(p)continue;a=false;break}if(l){if(!_(t,function(n,t){if(!R(l,t)&&(s===n||r(s,n,e,u,i)))return l.push(t)})){a=false;break}}else if(s!==h&&!r(s,h,e,u,i)){a=false;break}}return i.delete(n),i.delete(t),a}function le(n,t,r,e,u,i,o){switch(r){case"[object DataView]":if(n.byteLength!=t.byteLength||n.byteOffset!=t.byteOffset)break;n=n.buffer,t=t.buffer;case"[object ArrayBuffer]":
	if(n.byteLength!=t.byteLength||!e(new pi(n),new pi(t)))break;return true;case"[object Boolean]":case"[object Date]":case"[object Number]":return cu(+n,+t);case"[object Error]":return n.name==t.name&&n.message==t.message;case"[object RegExp]":case"[object String]":return n==t+"";case"[object Map]":var f=L;case"[object Set]":if(f||(f=D),n.size!=t.size&&!(2&i))break;return(r=o.get(n))?r==t:(i|=1,o.set(n,t),t=ae(f(n),f(t),e,u,i,o),o.delete(n),t);case"[object Symbol]":if(Xi)return Xi.call(n)==Xi.call(t)}
	return false}function se(n){return yo(ze(n,F,Ne),n+"")}function he(n){return Rt(n,Ru,so)}function pe(n){for(var t=n.name+"",r=Vi[t],e=ui.call(Vi,t)?r.length:0;e--;){var u=r[e],i=u.func;if(null==i||i==n)return u.name}return t}function _e(n){return(ui.call(On,"placeholder")?On:n).placeholder}function ve(){var n=On.iteratee||Tu,n=n===Tu?Gt:n;return arguments.length?n(arguments[0],arguments[1]):n}function ge(n,t){var r=n.__data__,e=typeof t;return("string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t)?r[typeof t=="string"?"string":"hash"]:r.map;
	}function de(n){for(var t=Ru(n),r=t.length;r--;){var e=t[r],u=n[e];t[r]=[e,u,u===u&&!vu(u)]}return t}function ye(n,t){var r=null==n?F:n[t];return Zt(r)?r:F}function be(n,t,r){t=Ee(t,n)?[t]:Ir(t);for(var e=-1,u=t.length,i=false;++e<u;){var o=Ce(t[e]);if(!(i=null!=n&&r(n,o)))break;n=n[o]}return i||++e!=u?i:(u=null==n?0:n.length,!!u&&_u(u)&&Ae(o,u)&&(uf(n)||ef(n)))}function xe(n){var t=n.length,r=n.constructor(t);return t&&"string"==typeof n[0]&&ui.call(n,"index")&&(r.index=n.index,r.input=n.input),r}function je(n){
	return typeof n.constructor!="function"||Se(n)?{}:to(vi(n))}function we(r,e,u,i){var o=r.constructor;switch(e){case"[object ArrayBuffer]":return Wr(r);case"[object Boolean]":case"[object Date]":return new o(+r);case"[object DataView]":return e=i?Wr(r.buffer):r.buffer,new r.constructor(e,r.byteOffset,r.byteLength);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":
	case"[object Uint16Array]":case"[object Uint32Array]":return Br(r,i);case"[object Map]":return e=i?u(L(r),true):L(r),h(e,n,new r.constructor);case"[object Number]":case"[object String]":return new o(r);case"[object RegExp]":return e=new r.constructor(r.source,dn.exec(r)),e.lastIndex=r.lastIndex,e;case"[object Set]":return e=i?u(D(r),true):D(r),h(e,t,new r.constructor);case"[object Symbol]":return Xi?Ju(Xi.call(r)):{}}}function me(n){return uf(n)||ef(n)||!!(bi&&n&&n[bi])}function Ae(n,t){return t=null==t?9007199254740991:t,
	!!t&&(typeof n=="number"||wn.test(n))&&-1<n&&0==n%1&&n<t}function ke(n,t,r){if(!vu(r))return false;var e=typeof t;return!!("number"==e?au(r)&&Ae(t,r.length):"string"==e&&t in r)&&cu(r[t],n)}function Ee(n,t){if(uf(n))return false;var r=typeof n;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=n&&!xu(n))||(rn.test(n)||!tn.test(n)||null!=t&&n in Ju(t))}function Oe(n){var t=pe(n),r=On[t];return typeof r=="function"&&t in Mn.prototype&&(n===r||(t=lo(r),!!t&&n===t[0]))}function Se(n){var t=n&&n.constructor;
	return n===(typeof t=="function"&&t.prototype||ti)}function Ie(n,t){return function(r){return null!=r&&(r[n]===t&&(t!==F||n in Ju(r)))}}function Re(n,t,r,e,u,i){return vu(n)&&vu(t)&&(i.set(t,n),nr(n,t,F,Re,i),i.delete(t)),n}function ze(n,t,e){return t=Bi(t===F?n.length-1:t,0),function(){for(var u=arguments,i=-1,o=Bi(u.length-t,0),f=qu(o);++i<o;)f[i]=u[t+i];for(i=-1,o=qu(t+1);++i<t;)o[i]=u[i];return o[t]=e(f),r(n,this,o)}}function We(n,t){return 1==t.length?n:It(n,vr(t,0,-1))}function Be(n,t,r){var e=t+"";
	t=yo;var u,i=Me;return u=(u=e.match(hn))?u[1].split(pn):[],r=i(u,r),(i=r.length)&&(u=i-1,r[u]=(1<i?"& ":"")+r[u],r=r.join(2<i?", ":" "),e=e.replace(sn,"{\n/* [wrapped with "+r+"] */\n")),t(n,e)}function Le(n){var t=0,r=0;return function(){var e=Ui(),u=16-(e-r);if(r=e,0<u){if(800<=++t)return arguments[0]}else t=0;return n.apply(F,arguments)}}function Ue(n,t){var r=-1,e=n.length,u=e-1;for(t=t===F?e:t;++r<t;){var e=cr(r,u),i=n[e];n[e]=n[r],n[r]=i}return n.length=t,n}function Ce(n){if(typeof n=="string"||xu(n))return n;
	var t=n+"";return"0"==t&&1/n==-N?"-0":t}function De(n){if(null!=n){try{return ei.call(n)}catch(n){}return n+""}return""}function Me(n,t){return u(Z,function(r){var e="_."+r[0];t&r[1]&&!c(n,e)&&n.push(e)}),n.sort()}function Te(n){if(n instanceof Mn)return n.clone();var t=new zn(n.__wrapped__,n.__chain__);return t.__actions__=Dr(n.__actions__),t.__index__=n.__index__,t.__values__=n.__values__,t}function $e(n,t,r){var e=null==n?0:n.length;return e?(r=null==r?0:mu(r),0>r&&(r=Bi(e+r,0)),g(n,ve(t,3),r)):-1;
	}function Fe(n,t,r){var e=null==n?0:n.length;if(!e)return-1;var u=e-1;return r!==F&&(u=mu(r),u=0>r?Bi(e+u,0):Li(u,e-1)),g(n,ve(t,3),u,true)}function Ne(n){return(null==n?0:n.length)?kt(n,1):[]}function Pe(n){return n&&n.length?n[0]:F}function Ze(n){var t=null==n?0:n.length;return t?n[t-1]:F}function qe(n,t){return n&&n.length&&t&&t.length?or(n,t):n}function Ve(n){return null==n?n:Mi.call(n)}function Ke(n){if(!n||!n.length)return[];var t=0;return n=f(n,function(n){if(lu(n))return t=Bi(n.length,t),true;
	}),E(t,function(t){return l(n,j(t))})}function Ge(n,t){if(!n||!n.length)return[];var e=Ke(n);return null==t?e:l(e,function(n){return r(t,F,n)})}function He(n){return n=On(n),n.__chain__=true,n}function Je(n,t){return t(n)}function Ye(){return this}function Qe(n,t){return(uf(n)?u:ro)(n,ve(t,3))}function Xe(n,t){return(uf(n)?i:eo)(n,ve(t,3))}function nu(n,t){return(uf(n)?l:Yt)(n,ve(t,3))}function tu(n,t,r){return t=r?F:t,t=n&&null==t?n.length:t,ce(n,128,F,F,F,F,t)}function ru(n,t){var r;if(typeof t!="function")throw new Xu("Expected a function");
	return n=mu(n),function(){return 0<--n&&(r=t.apply(this,arguments)),1>=n&&(t=F),r}}function eu(n,t,r){return t=r?F:t,n=ce(n,8,F,F,F,F,F,t),n.placeholder=eu.placeholder,n}function uu(n,t,r){return t=r?F:t,n=ce(n,16,F,F,F,F,F,t),n.placeholder=uu.placeholder,n}function iu(n,t,r){function e(t){var r=c,e=a;return c=a=F,_=t,s=n.apply(e,r)}function u(n){var r=n-p;return n-=_,p===F||r>=t||0>r||g&&n>=l}function i(){var n=Vo();if(u(n))return o(n);var r,e=go;r=n-_,n=t-(n-p),r=g?Li(n,l-r):n,h=e(i,r)}function o(n){
	return h=F,d&&c?e(n):(c=a=F,s)}function f(){var n=Vo(),r=u(n);if(c=arguments,a=this,p=n,r){if(h===F)return _=n=p,h=go(i,t),v?e(n):s;if(g)return h=go(i,t),e(p)}return h===F&&(h=go(i,t)),s}var c,a,l,s,h,p,_=0,v=false,g=false,d=true;if(typeof n!="function")throw new Xu("Expected a function");return t=ku(t)||0,vu(r)&&(v=!!r.leading,l=(g="maxWait"in r)?Bi(ku(r.maxWait)||0,t):l,d="trailing"in r?!!r.trailing:d),f.cancel=function(){h!==F&&co(h),_=0,c=p=a=h=F},f.flush=function(){return h===F?s:o(Vo())},f}function ou(n,t){
	function r(){var e=arguments,u=t?t.apply(this,e):e[0],i=r.cache;return i.has(u)?i.get(u):(e=n.apply(this,e),r.cache=i.set(u,e)||i,e)}if(typeof n!="function"||null!=t&&typeof t!="function")throw new Xu("Expected a function");return r.cache=new(ou.Cache||Pn),r}function fu(n){if(typeof n!="function")throw new Xu("Expected a function");return function(){var t=arguments;switch(t.length){case 0:return!n.call(this);case 1:return!n.call(this,t[0]);case 2:return!n.call(this,t[0],t[1]);case 3:return!n.call(this,t[0],t[1],t[2]);
	}return!n.apply(this,t)}}function cu(n,t){return n===t||n!==n&&t!==t}function au(n){return null!=n&&_u(n.length)&&!hu(n)}function lu(n){return gu(n)&&au(n)}function su(n){if(!gu(n))return false;var t=zt(n);return"[object Error]"==t||"[object DOMException]"==t||typeof n.message=="string"&&typeof n.name=="string"&&!yu(n)}function hu(n){return!!vu(n)&&(n=zt(n),"[object Function]"==n||"[object GeneratorFunction]"==n||"[object AsyncFunction]"==n||"[object Proxy]"==n)}function pu(n){return typeof n=="number"&&n==mu(n);
	}function _u(n){return typeof n=="number"&&-1<n&&0==n%1&&9007199254740991>=n}function vu(n){var t=typeof n;return null!=n&&("object"==t||"function"==t)}function gu(n){return null!=n&&typeof n=="object"}function du(n){return typeof n=="number"||gu(n)&&"[object Number]"==zt(n)}function yu(n){return!(!gu(n)||"[object Object]"!=zt(n))&&(n=vi(n),null===n||(n=ui.call(n,"constructor")&&n.constructor,typeof n=="function"&&n instanceof n&&ei.call(n)==ci))}function bu(n){return typeof n=="string"||!uf(n)&&gu(n)&&"[object String]"==zt(n);
	}function xu(n){return typeof n=="symbol"||gu(n)&&"[object Symbol]"==zt(n)}function ju(n){if(!n)return[];if(au(n))return bu(n)?$(n):Dr(n);if(xi&&n[xi]){n=n[xi]();for(var t,r=[];!(t=n.next()).done;)r.push(t.value);return r}return t=po(n),("[object Map]"==t?L:"[object Set]"==t?D:Bu)(n)}function wu(n){return n?(n=ku(n),n===N||n===-N?1.7976931348623157e308*(0>n?-1:1):n===n?n:0):0===n?n:0}function mu(n){n=wu(n);var t=n%1;return n===n?t?n-t:n:0}function Au(n){return n?gt(mu(n),0,4294967295):0}function ku(n){
	if(typeof n=="number")return n;if(xu(n))return P;if(vu(n)&&(n=typeof n.valueOf=="function"?n.valueOf():n,n=vu(n)?n+"":n),typeof n!="string")return 0===n?n:+n;n=n.replace(cn,"");var t=bn.test(n);return t||jn.test(n)?Fn(n.slice(2),t?2:8):yn.test(n)?P:+n}function Eu(n){return Mr(n,zu(n))}function Ou(n){return null==n?"":jr(n)}function Su(n,t,r){return n=null==n?F:It(n,t),n===F?r:n}function Iu(n,t){return null!=n&&be(n,t,Lt)}function Ru(n){return au(n)?Gn(n):Ht(n)}function zu(n){if(au(n))n=Gn(n,true);else if(vu(n)){
	var t,r=Se(n),e=[];for(t in n)("constructor"!=t||!r&&ui.call(n,t))&&e.push(t);n=e}else{if(t=[],null!=n)for(r in Ju(n))t.push(r);n=t}return n}function Wu(n,t){return null==n?{}:ur(n,Rt(n,zu,ho),ve(t))}function Bu(n){return null==n?[]:I(n,Ru(n))}function Lu(n){return Mf(Ou(n).toLowerCase())}function Uu(n){return(n=Ou(n))&&n.replace(mn,rt).replace(Rn,"")}function Cu(n,t,r){return n=Ou(n),t=r?F:t,t===F?Ln.test(n)?n.match(Wn)||[]:n.match(_n)||[]:n.match(t)||[]}function Du(n){return function(){return n;
	}}function Mu(n){return n}function Tu(n){return Gt(typeof n=="function"?n:dt(n,true))}function $u(n,t,r){var e=Ru(t),i=St(t,e);null!=r||vu(t)&&(i.length||!e.length)||(r=t,t=n,n=this,i=St(t,Ru(t)));var o=!(vu(r)&&"chain"in r&&!r.chain),f=hu(n);return u(i,function(r){var e=t[r];n[r]=e,f&&(n.prototype[r]=function(){var t=this.__chain__;if(o||t){var r=n(this.__wrapped__);return(r.__actions__=Dr(this.__actions__)).push({func:e,args:arguments,thisArg:n}),r.__chain__=t,r}return e.apply(n,s([this.value()],arguments));
	})}),n}function Fu(){}function Nu(n){return Ee(n)?j(Ce(n)):ir(n)}function Pu(){return[]}function Zu(){return false}En=null==En?Zn:it.defaults(Zn.Object(),En,it.pick(Zn,Un));var qu=En.Array,Vu=En.Date,Ku=En.Error,Gu=En.Function,Hu=En.Math,Ju=En.Object,Yu=En.RegExp,Qu=En.String,Xu=En.TypeError,ni=qu.prototype,ti=Ju.prototype,ri=En["__core-js_shared__"],ei=Gu.prototype.toString,ui=ti.hasOwnProperty,ii=0,oi=function(){var n=/[^.]+$/.exec(ri&&ri.keys&&ri.keys.IE_PROTO||"");return n?"Symbol(src)_1."+n:""}(),fi=ti.toString,ci=ei.call(Ju),ai=Zn._,li=Yu("^"+ei.call(ui).replace(on,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),si=Kn?En.Buffer:F,hi=En.Symbol,pi=En.Uint8Array,_i=si?si.f:F,vi=U(Ju.getPrototypeOf,Ju),gi=Ju.create,di=ti.propertyIsEnumerable,yi=ni.splice,bi=hi?hi.isConcatSpreadable:F,xi=hi?hi.iterator:F,ji=hi?hi.toStringTag:F,wi=function(){
	try{var n=ye(Ju,"defineProperty");return n({},"",{}),n}catch(n){}}(),mi=En.clearTimeout!==Zn.clearTimeout&&En.clearTimeout,Ai=Vu&&Vu.now!==Zn.Date.now&&Vu.now,ki=En.setTimeout!==Zn.setTimeout&&En.setTimeout,Ei=Hu.ceil,Oi=Hu.floor,Si=Ju.getOwnPropertySymbols,Ii=si?si.isBuffer:F,Ri=En.isFinite,zi=ni.join,Wi=U(Ju.keys,Ju),Bi=Hu.max,Li=Hu.min,Ui=Vu.now,Ci=En.parseInt,Di=Hu.random,Mi=ni.reverse,Ti=ye(En,"DataView"),$i=ye(En,"Map"),Fi=ye(En,"Promise"),Ni=ye(En,"Set"),Pi=ye(En,"WeakMap"),Zi=ye(Ju,"create"),qi=Pi&&new Pi,Vi={},Ki=De(Ti),Gi=De($i),Hi=De(Fi),Ji=De(Ni),Yi=De(Pi),Qi=hi?hi.prototype:F,Xi=Qi?Qi.valueOf:F,no=Qi?Qi.toString:F,to=function(){
	function n(){}return function(t){return vu(t)?gi?gi(t):(n.prototype=t,t=new n,n.prototype=F,t):{}}}();On.templateSettings={escape:Q,evaluate:X,interpolate:nn,variable:"",imports:{_:On}},On.prototype=Sn.prototype,On.prototype.constructor=On,zn.prototype=to(Sn.prototype),zn.prototype.constructor=zn,Mn.prototype=to(Sn.prototype),Mn.prototype.constructor=Mn,Tn.prototype.clear=function(){this.__data__=Zi?Zi(null):{},this.size=0},Tn.prototype.delete=function(n){return n=this.has(n)&&delete this.__data__[n],
	this.size-=n?1:0,n},Tn.prototype.get=function(n){var t=this.__data__;return Zi?(n=t[n],"__lodash_hash_undefined__"===n?F:n):ui.call(t,n)?t[n]:F},Tn.prototype.has=function(n){var t=this.__data__;return Zi?t[n]!==F:ui.call(t,n)},Tn.prototype.set=function(n,t){var r=this.__data__;return this.size+=this.has(n)?0:1,r[n]=Zi&&t===F?"__lodash_hash_undefined__":t,this},Nn.prototype.clear=function(){this.__data__=[],this.size=0},Nn.prototype.delete=function(n){var t=this.__data__;return n=st(t,n),!(0>n)&&(n==t.length-1?t.pop():yi.call(t,n,1),
	--this.size,true)},Nn.prototype.get=function(n){var t=this.__data__;return n=st(t,n),0>n?F:t[n][1]},Nn.prototype.has=function(n){return-1<st(this.__data__,n)},Nn.prototype.set=function(n,t){var r=this.__data__,e=st(r,n);return 0>e?(++this.size,r.push([n,t])):r[e][1]=t,this},Pn.prototype.clear=function(){this.size=0,this.__data__={hash:new Tn,map:new($i||Nn),string:new Tn}},Pn.prototype.delete=function(n){return n=ge(this,n).delete(n),this.size-=n?1:0,n},Pn.prototype.get=function(n){return ge(this,n).get(n);
	},Pn.prototype.has=function(n){return ge(this,n).has(n)},Pn.prototype.set=function(n,t){var r=ge(this,n),e=r.size;return r.set(n,t),this.size+=r.size==e?0:1,this},qn.prototype.add=qn.prototype.push=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this},qn.prototype.has=function(n){return this.__data__.has(n)},Vn.prototype.clear=function(){this.__data__=new Nn,this.size=0},Vn.prototype.delete=function(n){var t=this.__data__;return n=t.delete(n),this.size=t.size,n},Vn.prototype.get=function(n){
	return this.__data__.get(n)},Vn.prototype.has=function(n){return this.__data__.has(n)},Vn.prototype.set=function(n,t){var r=this.__data__;if(r instanceof Nn){var e=r.__data__;if(!$i||199>e.length)return e.push([n,t]),this.size=++r.size,this;r=this.__data__=new Pn(e)}return r.set(n,t),this.size=r.size,this};var ro=Nr(Et),eo=Nr(Ot,true),uo=Pr(),io=Pr(true),oo=qi?function(n,t){return qi.set(n,t),n}:Mu,fo=wi?function(n,t){return wi(n,"toString",{configurable:true,enumerable:false,value:Du(t),writable:true})}:Mu,co=mi||function(n){
	return Zn.clearTimeout(n)},ao=Ni&&1/D(new Ni([,-0]))[1]==N?function(n){return new Ni(n)}:Fu,lo=qi?function(n){return qi.get(n)}:Fu,so=Si?U(Si,Ju):Pu,ho=Si?function(n){for(var t=[];n;)s(t,so(n)),n=vi(n);return t}:Pu,po=zt;(Ti&&"[object DataView]"!=po(new Ti(new ArrayBuffer(1)))||$i&&"[object Map]"!=po(new $i)||Fi&&"[object Promise]"!=po(Fi.resolve())||Ni&&"[object Set]"!=po(new Ni)||Pi&&"[object WeakMap]"!=po(new Pi))&&(po=function(n){var t=zt(n);if(n=(n="[object Object]"==t?n.constructor:F)?De(n):"")switch(n){
	case Ki:return"[object DataView]";case Gi:return"[object Map]";case Hi:return"[object Promise]";case Ji:return"[object Set]";case Yi:return"[object WeakMap]"}return t});var _o=ri?hu:Zu,vo=Le(oo),go=ki||function(n,t){return Zn.setTimeout(n,t)},yo=Le(fo),bo=function(n){n=ou(n,function(n){return 500===t.size&&t.clear(),n});var t=n.cache;return n}(function(n){n=Ou(n);var t=[];return en.test(n)&&t.push(""),n.replace(un,function(n,r,e,u){t.push(e?u.replace(vn,"$1"):r||n)}),t}),xo=lr(function(n,t){return lu(n)?jt(n,kt(t,1,lu,true)):[];
	}),jo=lr(function(n,t){var r=Ze(t);return lu(r)&&(r=F),lu(n)?jt(n,kt(t,1,lu,true),ve(r,2)):[]}),wo=lr(function(n,t){var r=Ze(t);return lu(r)&&(r=F),lu(n)?jt(n,kt(t,1,lu,true),F,r):[]}),mo=lr(function(n){var t=l(n,Or);return t.length&&t[0]===n[0]?Ut(t):[]}),Ao=lr(function(n){var t=Ze(n),r=l(n,Or);return t===Ze(r)?t=F:r.pop(),r.length&&r[0]===n[0]?Ut(r,ve(t,2)):[]}),ko=lr(function(n){var t=Ze(n),r=l(n,Or);return(t=typeof t=="function"?t:F)&&r.pop(),r.length&&r[0]===n[0]?Ut(r,F,t):[]}),Eo=lr(qe),Oo=se(function(n,t){
	var r=null==n?0:n.length,e=vt(n,t);return fr(n,l(t,function(n){return Ae(n,r)?+n:n}).sort(Lr)),e}),So=lr(function(n){return wr(kt(n,1,lu,true))}),Io=lr(function(n){var t=Ze(n);return lu(t)&&(t=F),wr(kt(n,1,lu,true),ve(t,2))}),Ro=lr(function(n){var t=Ze(n),t=typeof t=="function"?t:F;return wr(kt(n,1,lu,true),F,t)}),zo=lr(function(n,t){return lu(n)?jt(n,t):[]}),Wo=lr(function(n){return kr(f(n,lu))}),Bo=lr(function(n){var t=Ze(n);return lu(t)&&(t=F),kr(f(n,lu),ve(t,2))}),Lo=lr(function(n){var t=Ze(n),t=typeof t=="function"?t:F;
	return kr(f(n,lu),F,t)}),Uo=lr(Ke),Co=lr(function(n){var t=n.length,t=1<t?n[t-1]:F,t=typeof t=="function"?(n.pop(),t):F;return Ge(n,t)}),Do=se(function(n){function t(t){return vt(t,n)}var r=n.length,e=r?n[0]:0,u=this.__wrapped__;return!(1<r||this.__actions__.length)&&u instanceof Mn&&Ae(e)?(u=u.slice(e,+e+(r?1:0)),u.__actions__.push({func:Je,args:[t],thisArg:F}),new zn(u,this.__chain__).thru(function(n){return r&&!n.length&&n.push(F),n})):this.thru(t)}),Mo=$r(function(n,t,r){ui.call(n,r)?++n[r]:_t(n,r,1);
	}),To=Hr($e),$o=Hr(Fe),Fo=$r(function(n,t,r){ui.call(n,r)?n[r].push(t):_t(n,r,[t])}),No=lr(function(n,t,e){var u=-1,i=typeof t=="function",o=Ee(t),f=au(n)?qu(n.length):[];return ro(n,function(n){var c=i?t:o&&null!=n?n[t]:F;f[++u]=c?r(c,n,e):Dt(n,t,e)}),f}),Po=$r(function(n,t,r){_t(n,r,t)}),Zo=$r(function(n,t,r){n[r?0:1].push(t)},function(){return[[],[]]}),qo=lr(function(n,t){if(null==n)return[];var r=t.length;return 1<r&&ke(n,t[0],t[1])?t=[]:2<r&&ke(t[0],t[1],t[2])&&(t=[t[0]]),rr(n,kt(t,1),[])}),Vo=Ai||function(){
	return Zn.Date.now()},Ko=lr(function(n,t,r){var e=1;if(r.length)var u=C(r,_e(Ko)),e=32|e;return ce(n,e,t,r,u)}),Go=lr(function(n,t,r){var e=3;if(r.length)var u=C(r,_e(Go)),e=32|e;return ce(t,e,n,r,u)}),Ho=lr(function(n,t){return xt(n,1,t)}),Jo=lr(function(n,t,r){return xt(n,ku(t)||0,r)});ou.Cache=Pn;var Yo=lr(function(n,t){t=1==t.length&&uf(t[0])?l(t[0],S(ve())):l(kt(t,1),S(ve()));var e=t.length;return lr(function(u){for(var i=-1,o=Li(u.length,e);++i<o;)u[i]=t[i].call(this,u[i]);return r(n,this,u);
	})}),Qo=lr(function(n,t){return ce(n,32,F,t,C(t,_e(Qo)))}),Xo=lr(function(n,t){return ce(n,64,F,t,C(t,_e(Xo)))}),nf=se(function(n,t){return ce(n,256,F,F,F,t)}),tf=ue(Wt),rf=ue(function(n,t){return n>=t}),ef=Mt(function(){return arguments}())?Mt:function(n){return gu(n)&&ui.call(n,"callee")&&!di.call(n,"callee")},uf=qu.isArray,of=Hn?S(Hn):Tt,ff=Ii||Zu,cf=Jn?S(Jn):$t,af=Yn?S(Yn):Nt,lf=Qn?S(Qn):qt,sf=Xn?S(Xn):Vt,hf=nt?S(nt):Kt,pf=ue(Jt),_f=ue(function(n,t){return n<=t}),vf=Fr(function(n,t){if(Se(t)||au(t))Mr(t,Ru(t),n);else for(var r in t)ui.call(t,r)&&lt(n,r,t[r]);
	}),gf=Fr(function(n,t){Mr(t,zu(t),n)}),df=Fr(function(n,t,r,e){Mr(t,zu(t),n,e)}),yf=Fr(function(n,t,r,e){Mr(t,Ru(t),n,e)}),bf=se(vt),xf=lr(function(n){return n.push(F,ct),r(df,F,n)}),jf=lr(function(n){return n.push(F,Re),r(Ef,F,n)}),wf=Qr(function(n,t,r){n[t]=r},Du(Mu)),mf=Qr(function(n,t,r){ui.call(n,t)?n[t].push(r):n[t]=[r]},ve),Af=lr(Dt),kf=Fr(function(n,t,r){nr(n,t,r)}),Ef=Fr(function(n,t,r,e){nr(n,t,r,e)}),Of=se(function(n,t){return null==n?{}:(t=l(t,Ce),er(n,jt(Rt(n,zu,ho),t)))}),Sf=se(function(n,t){
	return null==n?{}:er(n,l(t,Ce))}),If=fe(Ru),Rf=fe(zu),zf=Vr(function(n,t,r){return t=t.toLowerCase(),n+(r?Lu(t):t)}),Wf=Vr(function(n,t,r){return n+(r?"-":"")+t.toLowerCase()}),Bf=Vr(function(n,t,r){return n+(r?" ":"")+t.toLowerCase()}),Lf=qr("toLowerCase"),Uf=Vr(function(n,t,r){return n+(r?"_":"")+t.toLowerCase()}),Cf=Vr(function(n,t,r){return n+(r?" ":"")+Mf(t)}),Df=Vr(function(n,t,r){return n+(r?" ":"")+t.toUpperCase()}),Mf=qr("toUpperCase"),Tf=lr(function(n,t){try{return r(n,F,t)}catch(n){return su(n)?n:new Ku(n);
	}}),$f=se(function(n,t){return u(t,function(t){t=Ce(t),_t(n,t,Ko(n[t],n))}),n}),Ff=Jr(),Nf=Jr(true),Pf=lr(function(n,t){return function(r){return Dt(r,n,t)}}),Zf=lr(function(n,t){return function(r){return Dt(n,r,t)}}),qf=ne(l),Vf=ne(o),Kf=ne(_),Gf=ee(),Hf=ee(true),Jf=Xr(function(n,t){return n+t},0),Yf=oe("ceil"),Qf=Xr(function(n,t){return n/t},1),Xf=oe("floor"),nc=Xr(function(n,t){return n*t},1),tc=oe("round"),rc=Xr(function(n,t){return n-t},0);return On.after=function(n,t){if(typeof t!="function")throw new Xu("Expected a function");
	return n=mu(n),function(){if(1>--n)return t.apply(this,arguments)}},On.ary=tu,On.assign=vf,On.assignIn=gf,On.assignInWith=df,On.assignWith=yf,On.at=bf,On.before=ru,On.bind=Ko,On.bindAll=$f,On.bindKey=Go,On.castArray=function(){if(!arguments.length)return[];var n=arguments[0];return uf(n)?n:[n]},On.chain=He,On.chunk=function(n,t,r){if(t=(r?ke(n,t,r):t===F)?1:Bi(mu(t),0),r=null==n?0:n.length,!r||1>t)return[];for(var e=0,u=0,i=qu(Ei(r/t));e<r;)i[u++]=vr(n,e,e+=t);return i},On.compact=function(n){for(var t=-1,r=null==n?0:n.length,e=0,u=[];++t<r;){
	var i=n[t];i&&(u[e++]=i)}return u},On.concat=function(){var n=arguments.length;if(!n)return[];for(var t=qu(n-1),r=arguments[0];n--;)t[n-1]=arguments[n];return s(uf(r)?Dr(r):[r],kt(t,1))},On.cond=function(n){var t=null==n?0:n.length,e=ve();return n=t?l(n,function(n){if("function"!=typeof n[1])throw new Xu("Expected a function");return[e(n[0]),n[1]]}):[],lr(function(e){for(var u=-1;++u<t;){var i=n[u];if(r(i[0],this,e))return r(i[1],this,e)}})},On.conforms=function(n){return yt(dt(n,true))},On.constant=Du,
	On.countBy=Mo,On.create=function(n,t){var r=to(n);return null==t?r:pt(r,t)},On.curry=eu,On.curryRight=uu,On.debounce=iu,On.defaults=xf,On.defaultsDeep=jf,On.defer=Ho,On.delay=Jo,On.difference=xo,On.differenceBy=jo,On.differenceWith=wo,On.drop=function(n,t,r){var e=null==n?0:n.length;return e?(t=r||t===F?1:mu(t),vr(n,0>t?0:t,e)):[]},On.dropRight=function(n,t,r){var e=null==n?0:n.length;return e?(t=r||t===F?1:mu(t),t=e-t,vr(n,0,0>t?0:t)):[]},On.dropRightWhile=function(n,t){return n&&n.length?mr(n,ve(t,3),true,true):[];
	},On.dropWhile=function(n,t){return n&&n.length?mr(n,ve(t,3),true):[]},On.fill=function(n,t,r,e){var u=null==n?0:n.length;if(!u)return[];for(r&&typeof r!="number"&&ke(n,t,r)&&(r=0,e=u),u=n.length,r=mu(r),0>r&&(r=-r>u?0:u+r),e=e===F||e>u?u:mu(e),0>e&&(e+=u),e=r>e?0:Au(e);r<e;)n[r++]=t;return n},On.filter=function(n,t){return(uf(n)?f:At)(n,ve(t,3))},On.flatMap=function(n,t){return kt(nu(n,t),1)},On.flatMapDeep=function(n,t){return kt(nu(n,t),N)},On.flatMapDepth=function(n,t,r){return r=r===F?1:mu(r),
	kt(nu(n,t),r)},On.flatten=Ne,On.flattenDeep=function(n){return(null==n?0:n.length)?kt(n,N):[]},On.flattenDepth=function(n,t){return null!=n&&n.length?(t=t===F?1:mu(t),kt(n,t)):[]},On.flip=function(n){return ce(n,512)},On.flow=Ff,On.flowRight=Nf,On.fromPairs=function(n){for(var t=-1,r=null==n?0:n.length,e={};++t<r;){var u=n[t];e[u[0]]=u[1]}return e},On.functions=function(n){return null==n?[]:St(n,Ru(n))},On.functionsIn=function(n){return null==n?[]:St(n,zu(n))},On.groupBy=Fo,On.initial=function(n){
	return(null==n?0:n.length)?vr(n,0,-1):[]},On.intersection=mo,On.intersectionBy=Ao,On.intersectionWith=ko,On.invert=wf,On.invertBy=mf,On.invokeMap=No,On.iteratee=Tu,On.keyBy=Po,On.keys=Ru,On.keysIn=zu,On.map=nu,On.mapKeys=function(n,t){var r={};return t=ve(t,3),Et(n,function(n,e,u){_t(r,t(n,e,u),n)}),r},On.mapValues=function(n,t){var r={};return t=ve(t,3),Et(n,function(n,e,u){_t(r,e,t(n,e,u))}),r},On.matches=function(n){return Qt(dt(n,true))},On.matchesProperty=function(n,t){return Xt(n,dt(t,true))},On.memoize=ou,
	On.merge=kf,On.mergeWith=Ef,On.method=Pf,On.methodOf=Zf,On.mixin=$u,On.negate=fu,On.nthArg=function(n){return n=mu(n),lr(function(t){return tr(t,n)})},On.omit=Of,On.omitBy=function(n,t){return Wu(n,fu(ve(t)))},On.once=function(n){return ru(2,n)},On.orderBy=function(n,t,r,e){return null==n?[]:(uf(t)||(t=null==t?[]:[t]),r=e?F:r,uf(r)||(r=null==r?[]:[r]),rr(n,t,r))},On.over=qf,On.overArgs=Yo,On.overEvery=Vf,On.overSome=Kf,On.partial=Qo,On.partialRight=Xo,On.partition=Zo,On.pick=Sf,On.pickBy=Wu,On.property=Nu,
	On.propertyOf=function(n){return function(t){return null==n?F:It(n,t)}},On.pull=Eo,On.pullAll=qe,On.pullAllBy=function(n,t,r){return n&&n.length&&t&&t.length?or(n,t,ve(r,2)):n},On.pullAllWith=function(n,t,r){return n&&n.length&&t&&t.length?or(n,t,F,r):n},On.pullAt=Oo,On.range=Gf,On.rangeRight=Hf,On.rearg=nf,On.reject=function(n,t){return(uf(n)?f:At)(n,fu(ve(t,3)))},On.remove=function(n,t){var r=[];if(!n||!n.length)return r;var e=-1,u=[],i=n.length;for(t=ve(t,3);++e<i;){var o=n[e];t(o,e,n)&&(r.push(o),
	u.push(e))}return fr(n,u),r},On.rest=function(n,t){if(typeof n!="function")throw new Xu("Expected a function");return t=t===F?t:mu(t),lr(n,t)},On.reverse=Ve,On.sampleSize=function(n,t,r){return t=(r?ke(n,t,r):t===F)?1:mu(t),(uf(n)?ot:hr)(n,t)},On.set=function(n,t,r){return null==n?n:pr(n,t,r)},On.setWith=function(n,t,r,e){return e=typeof e=="function"?e:F,null==n?n:pr(n,t,r,e)},On.shuffle=function(n){return(uf(n)?ft:_r)(n)},On.slice=function(n,t,r){var e=null==n?0:n.length;return e?(r&&typeof r!="number"&&ke(n,t,r)?(t=0,
	r=e):(t=null==t?0:mu(t),r=r===F?e:mu(r)),vr(n,t,r)):[]},On.sortBy=qo,On.sortedUniq=function(n){return n&&n.length?br(n):[]},On.sortedUniqBy=function(n,t){return n&&n.length?br(n,ve(t,2)):[]},On.split=function(n,t,r){return r&&typeof r!="number"&&ke(n,t,r)&&(t=r=F),r=r===F?4294967295:r>>>0,r?(n=Ou(n))&&(typeof t=="string"||null!=t&&!lf(t))&&(t=jr(t),!t&&Bn.test(n))?Rr($(n),0,r):n.split(t,r):[]},On.spread=function(n,t){if(typeof n!="function")throw new Xu("Expected a function");return t=t===F?0:Bi(mu(t),0),
	lr(function(e){var u=e[t];return e=Rr(e,0,t),u&&s(e,u),r(n,this,e)})},On.tail=function(n){var t=null==n?0:n.length;return t?vr(n,1,t):[]},On.take=function(n,t,r){return n&&n.length?(t=r||t===F?1:mu(t),vr(n,0,0>t?0:t)):[]},On.takeRight=function(n,t,r){var e=null==n?0:n.length;return e?(t=r||t===F?1:mu(t),t=e-t,vr(n,0>t?0:t,e)):[]},On.takeRightWhile=function(n,t){return n&&n.length?mr(n,ve(t,3),false,true):[]},On.takeWhile=function(n,t){return n&&n.length?mr(n,ve(t,3)):[]},On.tap=function(n,t){return t(n),
	n},On.throttle=function(n,t,r){var e=true,u=true;if(typeof n!="function")throw new Xu("Expected a function");return vu(r)&&(e="leading"in r?!!r.leading:e,u="trailing"in r?!!r.trailing:u),iu(n,t,{leading:e,maxWait:t,trailing:u})},On.thru=Je,On.toArray=ju,On.toPairs=If,On.toPairsIn=Rf,On.toPath=function(n){return uf(n)?l(n,Ce):xu(n)?[n]:Dr(bo(n))},On.toPlainObject=Eu,On.transform=function(n,t,r){var e=uf(n),i=e||ff(n)||hf(n);if(t=ve(t,4),null==r){var o=n&&n.constructor;r=i?e?new o:[]:vu(n)&&hu(o)?to(vi(n)):{};
	}return(i?u:Et)(n,function(n,e,u){return t(r,n,e,u)}),r},On.unary=function(n){return tu(n,1)},On.union=So,On.unionBy=Io,On.unionWith=Ro,On.uniq=function(n){return n&&n.length?wr(n):[]},On.uniqBy=function(n,t){return n&&n.length?wr(n,ve(t,2)):[]},On.uniqWith=function(n,t){return t=typeof t=="function"?t:F,n&&n.length?wr(n,F,t):[]},On.unset=function(n,t){var r;if(null==n)r=true;else{r=n;var e=t,e=Ee(e,r)?[e]:Ir(e);r=We(r,e),e=Ce(Ze(e)),r=!(null!=r&&ui.call(r,e))||delete r[e]}return r},On.unzip=Ke,On.unzipWith=Ge,
	On.update=function(n,t,r){return null==n?n:pr(n,t,Sr(r)(It(n,t)),void 0)},On.updateWith=function(n,t,r,e){return e=typeof e=="function"?e:F,null!=n&&(n=pr(n,t,Sr(r)(It(n,t)),e)),n},On.values=Bu,On.valuesIn=function(n){return null==n?[]:I(n,zu(n))},On.without=zo,On.words=Cu,On.wrap=function(n,t){return Qo(Sr(t),n)},On.xor=Wo,On.xorBy=Bo,On.xorWith=Lo,On.zip=Uo,On.zipObject=function(n,t){return Er(n||[],t||[],lt)},On.zipObjectDeep=function(n,t){return Er(n||[],t||[],pr)},On.zipWith=Co,On.entries=If,
	On.entriesIn=Rf,On.extend=gf,On.extendWith=df,$u(On,On),On.add=Jf,On.attempt=Tf,On.camelCase=zf,On.capitalize=Lu,On.ceil=Yf,On.clamp=function(n,t,r){return r===F&&(r=t,t=F),r!==F&&(r=ku(r),r=r===r?r:0),t!==F&&(t=ku(t),t=t===t?t:0),gt(ku(n),t,r)},On.clone=function(n){return dt(n,false,true)},On.cloneDeep=function(n){return dt(n,true,true)},On.cloneDeepWith=function(n,t){return t=typeof t=="function"?t:F,dt(n,true,true,t)},On.cloneWith=function(n,t){return t=typeof t=="function"?t:F,dt(n,false,true,t)},On.conformsTo=function(n,t){
	return null==t||bt(n,t,Ru(t))},On.deburr=Uu,On.defaultTo=function(n,t){return null==n||n!==n?t:n},On.divide=Qf,On.endsWith=function(n,t,r){n=Ou(n),t=jr(t);var e=n.length,e=r=r===F?e:gt(mu(r),0,e);return r-=t.length,0<=r&&n.slice(r,e)==t},On.eq=cu,On.escape=function(n){return(n=Ou(n))&&Y.test(n)?n.replace(H,et):n},On.escapeRegExp=function(n){return(n=Ou(n))&&fn.test(n)?n.replace(on,"\\$&"):n},On.every=function(n,t,r){var e=uf(n)?o:wt;return r&&ke(n,t,r)&&(t=F),e(n,ve(t,3))},On.find=To,On.findIndex=$e,
	On.findKey=function(n,t){return v(n,ve(t,3),Et)},On.findLast=$o,On.findLastIndex=Fe,On.findLastKey=function(n,t){return v(n,ve(t,3),Ot)},On.floor=Xf,On.forEach=Qe,On.forEachRight=Xe,On.forIn=function(n,t){return null==n?n:uo(n,ve(t,3),zu)},On.forInRight=function(n,t){return null==n?n:io(n,ve(t,3),zu)},On.forOwn=function(n,t){return n&&Et(n,ve(t,3))},On.forOwnRight=function(n,t){return n&&Ot(n,ve(t,3))},On.get=Su,On.gt=tf,On.gte=rf,On.has=function(n,t){return null!=n&&be(n,t,Bt)},On.hasIn=Iu,On.head=Pe,
	On.identity=Mu,On.includes=function(n,t,r,e){return n=au(n)?n:Bu(n),r=r&&!e?mu(r):0,e=n.length,0>r&&(r=Bi(e+r,0)),bu(n)?r<=e&&-1<n.indexOf(t,r):!!e&&-1<d(n,t,r)},On.indexOf=function(n,t,r){var e=null==n?0:n.length;return e?(r=null==r?0:mu(r),0>r&&(r=Bi(e+r,0)),d(n,t,r)):-1},On.inRange=function(n,t,r){return t=wu(t),r===F?(r=t,t=0):r=wu(r),n=ku(n),n>=Li(t,r)&&n<Bi(t,r)},On.invoke=Af,On.isArguments=ef,On.isArray=uf,On.isArrayBuffer=of,On.isArrayLike=au,On.isArrayLikeObject=lu,On.isBoolean=function(n){
	return true===n||false===n||gu(n)&&"[object Boolean]"==zt(n)},On.isBuffer=ff,On.isDate=cf,On.isElement=function(n){return gu(n)&&1===n.nodeType&&!yu(n)},On.isEmpty=function(n){if(null==n)return true;if(au(n)&&(uf(n)||typeof n=="string"||typeof n.splice=="function"||ff(n)||hf(n)||ef(n)))return!n.length;var t=po(n);if("[object Map]"==t||"[object Set]"==t)return!n.size;if(Se(n))return!Ht(n).length;for(var r in n)if(ui.call(n,r))return false;return true},On.isEqual=function(n,t){return Ft(n,t)},On.isEqualWith=function(n,t,r){
	var e=(r=typeof r=="function"?r:F)?r(n,t):F;return e===F?Ft(n,t,r):!!e},On.isError=su,On.isFinite=function(n){return typeof n=="number"&&Ri(n)},On.isFunction=hu,On.isInteger=pu,On.isLength=_u,On.isMap=af,On.isMatch=function(n,t){return n===t||Pt(n,t,de(t))},On.isMatchWith=function(n,t,r){return r=typeof r=="function"?r:F,Pt(n,t,de(t),r)},On.isNaN=function(n){return du(n)&&n!=+n},On.isNative=function(n){if(_o(n))throw new Ku("Unsupported core-js use. Try https://github.com/es-shims.");return Zt(n)},
	On.isNil=function(n){return null==n},On.isNull=function(n){return null===n},On.isNumber=du,On.isObject=vu,On.isObjectLike=gu,On.isPlainObject=yu,On.isRegExp=lf,On.isSafeInteger=function(n){return pu(n)&&-9007199254740991<=n&&9007199254740991>=n},On.isSet=sf,On.isString=bu,On.isSymbol=xu,On.isTypedArray=hf,On.isUndefined=function(n){return n===F},On.isWeakMap=function(n){return gu(n)&&"[object WeakMap]"==po(n)},On.isWeakSet=function(n){return gu(n)&&"[object WeakSet]"==zt(n)},On.join=function(n,t){
	return null==n?"":zi.call(n,t)},On.kebabCase=Wf,On.last=Ze,On.lastIndexOf=function(n,t,r){var e=null==n?0:n.length;if(!e)return-1;var u=e;if(r!==F&&(u=mu(r),u=0>u?Bi(e+u,0):Li(u,e-1)),t===t){for(r=u+1;r--&&n[r]!==t;);n=r}else n=g(n,b,u,true);return n},On.lowerCase=Bf,On.lowerFirst=Lf,On.lt=pf,On.lte=_f,On.max=function(n){return n&&n.length?mt(n,Mu,Wt):F},On.maxBy=function(n,t){return n&&n.length?mt(n,ve(t,2),Wt):F},On.mean=function(n){return x(n,Mu)},On.meanBy=function(n,t){return x(n,ve(t,2))},On.min=function(n){
	return n&&n.length?mt(n,Mu,Jt):F},On.minBy=function(n,t){return n&&n.length?mt(n,ve(t,2),Jt):F},On.stubArray=Pu,On.stubFalse=Zu,On.stubObject=function(){return{}},On.stubString=function(){return""},On.stubTrue=function(){return true},On.multiply=nc,On.nth=function(n,t){return n&&n.length?tr(n,mu(t)):F},On.noConflict=function(){return Zn._===this&&(Zn._=ai),this},On.noop=Fu,On.now=Vo,On.pad=function(n,t,r){n=Ou(n);var e=(t=mu(t))?T(n):0;return!t||e>=t?n:(t=(t-e)/2,te(Oi(t),r)+n+te(Ei(t),r))},On.padEnd=function(n,t,r){
	n=Ou(n);var e=(t=mu(t))?T(n):0;return t&&e<t?n+te(t-e,r):n},On.padStart=function(n,t,r){n=Ou(n);var e=(t=mu(t))?T(n):0;return t&&e<t?te(t-e,r)+n:n},On.parseInt=function(n,t,r){return r||null==t?t=0:t&&(t=+t),Ci(Ou(n).replace(an,""),t||0)},On.random=function(n,t,r){if(r&&typeof r!="boolean"&&ke(n,t,r)&&(t=r=F),r===F&&(typeof t=="boolean"?(r=t,t=F):typeof n=="boolean"&&(r=n,n=F)),n===F&&t===F?(n=0,t=1):(n=wu(n),t===F?(t=n,n=0):t=wu(t)),n>t){var e=n;n=t,t=e}return r||n%1||t%1?(r=Di(),Li(n+r*(t-n+$n("1e-"+((r+"").length-1))),t)):cr(n,t);
	},On.reduce=function(n,t,r){var e=uf(n)?h:m,u=3>arguments.length;return e(n,ve(t,4),r,u,ro)},On.reduceRight=function(n,t,r){var e=uf(n)?p:m,u=3>arguments.length;return e(n,ve(t,4),r,u,eo)},On.repeat=function(n,t,r){return t=(r?ke(n,t,r):t===F)?1:mu(t),ar(Ou(n),t)},On.replace=function(){var n=arguments,t=Ou(n[0]);return 3>n.length?t:t.replace(n[1],n[2])},On.result=function(n,t,r){t=Ee(t,n)?[t]:Ir(t);var e=-1,u=t.length;for(u||(n=F,u=1);++e<u;){var i=null==n?F:n[Ce(t[e])];i===F&&(e=u,i=r),n=hu(i)?i.call(n):i;
	}return n},On.round=tc,On.runInContext=w,On.sample=function(n){return(uf(n)?tt:sr)(n)},On.size=function(n){if(null==n)return 0;if(au(n))return bu(n)?T(n):n.length;var t=po(n);return"[object Map]"==t||"[object Set]"==t?n.size:Ht(n).length},On.snakeCase=Uf,On.some=function(n,t,r){var e=uf(n)?_:gr;return r&&ke(n,t,r)&&(t=F),e(n,ve(t,3))},On.sortedIndex=function(n,t){return dr(n,t)},On.sortedIndexBy=function(n,t,r){return yr(n,t,ve(r,2))},On.sortedIndexOf=function(n,t){var r=null==n?0:n.length;if(r){
	var e=dr(n,t);if(e<r&&cu(n[e],t))return e}return-1},On.sortedLastIndex=function(n,t){return dr(n,t,true)},On.sortedLastIndexBy=function(n,t,r){return yr(n,t,ve(r,2),true)},On.sortedLastIndexOf=function(n,t){if(null==n?0:n.length){var r=dr(n,t,true)-1;if(cu(n[r],t))return r}return-1},On.startCase=Cf,On.startsWith=function(n,t,r){return n=Ou(n),r=gt(mu(r),0,n.length),t=jr(t),n.slice(r,r+t.length)==t},On.subtract=rc,On.sum=function(n){return n&&n.length?k(n,Mu):0},On.sumBy=function(n,t){return n&&n.length?k(n,ve(t,2)):0;
	},On.template=function(n,t,r){var e=On.templateSettings;r&&ke(n,t,r)&&(t=F),n=Ou(n),t=df({},t,e,ct),r=df({},t.imports,e.imports,ct);var u,i,o=Ru(r),f=I(r,o),c=0;r=t.interpolate||An;var a="__p+='";r=Yu((t.escape||An).source+"|"+r.source+"|"+(r===nn?gn:An).source+"|"+(t.evaluate||An).source+"|$","g");var l="sourceURL"in t?"//# sourceURL="+t.sourceURL+"\n":"";if(n.replace(r,function(t,r,e,o,f,l){return e||(e=o),a+=n.slice(c,l).replace(kn,B),r&&(u=true,a+="'+__e("+r+")+'"),f&&(i=true,a+="';"+f+";\n__p+='"),
	e&&(a+="'+((__t=("+e+"))==null?'':__t)+'"),c=l+t.length,t}),a+="';",(t=t.variable)||(a="with(obj){"+a+"}"),a=(i?a.replace(q,""):a).replace(V,"$1").replace(K,"$1;"),a="function("+(t||"obj")+"){"+(t?"":"obj||(obj={});")+"var __t,__p=''"+(u?",__e=_.escape":"")+(i?",__j=Array.prototype.join;function print(){__p+=__j.call(arguments,'')}":";")+a+"return __p}",t=Tf(function(){return Gu(o,l+"return "+a).apply(F,f)}),t.source=a,su(t))throw t;return t},On.times=function(n,t){if(n=mu(n),1>n||9007199254740991<n)return[];
	var r=4294967295,e=Li(n,4294967295);for(t=ve(t),n-=4294967295,e=E(e,t);++r<n;)t(r);return e},On.toFinite=wu,On.toInteger=mu,On.toLength=Au,On.toLower=function(n){return Ou(n).toLowerCase()},On.toNumber=ku,On.toSafeInteger=function(n){return gt(mu(n),-9007199254740991,9007199254740991)},On.toString=Ou,On.toUpper=function(n){return Ou(n).toUpperCase()},On.trim=function(n,t,r){return(n=Ou(n))&&(r||t===F)?n.replace(cn,""):n&&(t=jr(t))?(n=$(n),r=$(t),t=z(n,r),r=W(n,r)+1,Rr(n,t,r).join("")):n},On.trimEnd=function(n,t,r){
	return(n=Ou(n))&&(r||t===F)?n.replace(ln,""):n&&(t=jr(t))?(n=$(n),t=W(n,$(t))+1,Rr(n,0,t).join("")):n},On.trimStart=function(n,t,r){return(n=Ou(n))&&(r||t===F)?n.replace(an,""):n&&(t=jr(t))?(n=$(n),t=z(n,$(t)),Rr(n,t).join("")):n},On.truncate=function(n,t){var r=30,e="...";if(vu(t))var u="separator"in t?t.separator:u,r="length"in t?mu(t.length):r,e="omission"in t?jr(t.omission):e;n=Ou(n);var i=n.length;if(Bn.test(n))var o=$(n),i=o.length;if(r>=i)return n;if(i=r-T(e),1>i)return e;if(r=o?Rr(o,0,i).join(""):n.slice(0,i),
	u===F)return r+e;if(o&&(i+=r.length-i),lf(u)){if(n.slice(i).search(u)){var f=r;for(u.global||(u=Yu(u.source,Ou(dn.exec(u))+"g")),u.lastIndex=0;o=u.exec(f);)var c=o.index;r=r.slice(0,c===F?i:c)}}else n.indexOf(jr(u),i)!=i&&(u=r.lastIndexOf(u),-1<u&&(r=r.slice(0,u)));return r+e},On.unescape=function(n){return(n=Ou(n))&&J.test(n)?n.replace(G,ut):n},On.uniqueId=function(n){var t=++ii;return Ou(n)+t},On.upperCase=Df,On.upperFirst=Mf,On.each=Qe,On.eachRight=Xe,On.first=Pe,$u(On,function(){var n={};return Et(On,function(t,r){
	ui.call(On.prototype,r)||(n[r]=t)}),n}(),{chain:false}),On.VERSION="4.16.6",u("bind bindKey curry curryRight partial partialRight".split(" "),function(n){On[n].placeholder=On}),u(["drop","take"],function(n,t){Mn.prototype[n]=function(r){var e=this.__filtered__;if(e&&!t)return new Mn(this);r=r===F?1:Bi(mu(r),0);var u=this.clone();return e?u.__takeCount__=Li(r,u.__takeCount__):u.__views__.push({size:Li(r,4294967295),type:n+(0>u.__dir__?"Right":"")}),u},Mn.prototype[n+"Right"]=function(t){return this.reverse()[n](t).reverse();
	}}),u(["filter","map","takeWhile"],function(n,t){var r=t+1,e=1==r||3==r;Mn.prototype[n]=function(n){var t=this.clone();return t.__iteratees__.push({iteratee:ve(n,3),type:r}),t.__filtered__=t.__filtered__||e,t}}),u(["head","last"],function(n,t){var r="take"+(t?"Right":"");Mn.prototype[n]=function(){return this[r](1).value()[0]}}),u(["initial","tail"],function(n,t){var r="drop"+(t?"":"Right");Mn.prototype[n]=function(){return this.__filtered__?new Mn(this):this[r](1)}}),Mn.prototype.compact=function(){
	return this.filter(Mu)},Mn.prototype.find=function(n){return this.filter(n).head()},Mn.prototype.findLast=function(n){return this.reverse().find(n)},Mn.prototype.invokeMap=lr(function(n,t){return typeof n=="function"?new Mn(this):this.map(function(r){return Dt(r,n,t)})}),Mn.prototype.reject=function(n){return this.filter(fu(ve(n)))},Mn.prototype.slice=function(n,t){n=mu(n);var r=this;return r.__filtered__&&(0<n||0>t)?new Mn(r):(0>n?r=r.takeRight(-n):n&&(r=r.drop(n)),t!==F&&(t=mu(t),r=0>t?r.dropRight(-t):r.take(t-n)),
	r)},Mn.prototype.takeRightWhile=function(n){return this.reverse().takeWhile(n).reverse()},Mn.prototype.toArray=function(){return this.take(4294967295)},Et(Mn.prototype,function(n,t){var r=/^(?:filter|find|map|reject)|While$/.test(t),e=/^(?:head|last)$/.test(t),u=On[e?"take"+("last"==t?"Right":""):t],i=e||/^find/.test(t);u&&(On.prototype[t]=function(){function t(n){return n=u.apply(On,s([n],f)),e&&h?n[0]:n}var o=this.__wrapped__,f=e?[1]:arguments,c=o instanceof Mn,a=f[0],l=c||uf(o);l&&r&&typeof a=="function"&&1!=a.length&&(c=l=false);
	var h=this.__chain__,p=!!this.__actions__.length,a=i&&!h,c=c&&!p;return!i&&l?(o=c?o:new Mn(this),o=n.apply(o,f),o.__actions__.push({func:Je,args:[t],thisArg:F}),new zn(o,h)):a&&c?n.apply(this,f):(o=this.thru(t),a?e?o.value()[0]:o.value():o)})}),u("pop push shift sort splice unshift".split(" "),function(n){var t=ni[n],r=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",e=/^(?:pop|shift)$/.test(n);On.prototype[n]=function(){var n=arguments;if(e&&!this.__chain__){var u=this.value();return t.apply(uf(u)?u:[],n);
	}return this[r](function(r){return t.apply(uf(r)?r:[],n)})}}),Et(Mn.prototype,function(n,t){var r=On[t];if(r){var e=r.name+"";(Vi[e]||(Vi[e]=[])).push({name:t,func:r})}}),Vi[Yr(F,2).name]=[{name:"wrapper",func:F}],Mn.prototype.clone=function(){var n=new Mn(this.__wrapped__);return n.__actions__=Dr(this.__actions__),n.__dir__=this.__dir__,n.__filtered__=this.__filtered__,n.__iteratees__=Dr(this.__iteratees__),n.__takeCount__=this.__takeCount__,n.__views__=Dr(this.__views__),n},Mn.prototype.reverse=function(){
	if(this.__filtered__){var n=new Mn(this);n.__dir__=-1,n.__filtered__=true}else n=this.clone(),n.__dir__*=-1;return n},Mn.prototype.value=function(){var n,t=this.__wrapped__.value(),r=this.__dir__,e=uf(t),u=0>r,i=e?t.length:0;n=i;for(var o=this.__views__,f=0,c=-1,a=o.length;++c<a;){var l=o[c],s=l.size;switch(l.type){case"drop":f+=s;break;case"dropRight":n-=s;break;case"take":n=Li(n,f+s);break;case"takeRight":f=Bi(f,n-s)}}if(n={start:f,end:n},o=n.start,f=n.end,n=f-o,u=u?f:o-1,o=this.__iteratees__,f=o.length,
	c=0,a=Li(n,this.__takeCount__),!e||200>i||i==n&&a==n)return Ar(t,this.__actions__);e=[];n:for(;n--&&c<a;){for(u+=r,i=-1,l=t[u];++i<f;){var h=o[i],s=h.type,h=(0,h.iteratee)(l);if(2==s)l=h;else if(!h){if(1==s)continue n;break n}}e[c++]=l}return e},On.prototype.at=Do,On.prototype.chain=function(){return He(this)},On.prototype.commit=function(){return new zn(this.value(),this.__chain__)},On.prototype.next=function(){this.__values__===F&&(this.__values__=ju(this.value()));var n=this.__index__>=this.__values__.length;
	return{done:n,value:n?F:this.__values__[this.__index__++]}},On.prototype.plant=function(n){for(var t,r=this;r instanceof Sn;){var e=Te(r);e.__index__=0,e.__values__=F,t?u.__wrapped__=e:t=e;var u=e,r=r.__wrapped__}return u.__wrapped__=n,t},On.prototype.reverse=function(){var n=this.__wrapped__;return n instanceof Mn?(this.__actions__.length&&(n=new Mn(this)),n=n.reverse(),n.__actions__.push({func:Je,args:[Ve],thisArg:F}),new zn(n,this.__chain__)):this.thru(Ve)},On.prototype.toJSON=On.prototype.valueOf=On.prototype.value=function(){
	return Ar(this.__wrapped__,this.__actions__)},On.prototype.first=On.prototype.head,xi&&(On.prototype[xi]=Ye),On}(); true?(Zn._=it, !(__WEBPACK_AMD_DEFINE_RESULT__ = function(){return it}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))):Vn?((Vn.exports=it)._=it,qn._=it):Zn._=it}).call(this);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module)))

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {var mapping = __webpack_require__(6),
	    fallbackHolder = __webpack_require__(7);
	
	/**
	 * Creates a function, with an arity of `n`, that invokes `func` with the
	 * arguments it receives.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} n The arity of the new function.
	 * @returns {Function} Returns the new function.
	 */
	function baseArity(func, n) {
	  return n == 2
	    ? function(a, b) { return func.apply(undefined, arguments); }
	    : function(a) { return func.apply(undefined, arguments); };
	}
	
	/**
	 * Creates a function that invokes `func`, with up to `n` arguments, ignoring
	 * any additional arguments.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @param {number} n The arity cap.
	 * @returns {Function} Returns the new function.
	 */
	function baseAry(func, n) {
	  return n == 2
	    ? function(a, b) { return func(a, b); }
	    : function(a) { return func(a); };
	}
	
	/**
	 * Creates a clone of `array`.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the cloned array.
	 */
	function cloneArray(array) {
	  var length = array ? array.length : 0,
	      result = Array(length);
	
	  while (length--) {
	    result[length] = array[length];
	  }
	  return result;
	}
	
	/**
	 * Creates a function that clones a given object using the assignment `func`.
	 *
	 * @private
	 * @param {Function} func The assignment function.
	 * @returns {Function} Returns the new cloner function.
	 */
	function createCloner(func) {
	  return function(object) {
	    return func({}, object);
	  };
	}
	
	/**
	 * Creates a function that wraps `func` and uses `cloner` to clone the first
	 * argument it receives.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} cloner The function to clone arguments.
	 * @returns {Function} Returns the new immutable function.
	 */
	function wrapImmutable(func, cloner) {
	  return function() {
	    var length = arguments.length;
	    if (!length) {
	      return;
	    }
	    var args = Array(length);
	    while (length--) {
	      args[length] = arguments[length];
	    }
	    var result = args[0] = cloner.apply(undefined, args);
	    func.apply(undefined, args);
	    return result;
	  };
	}
	
	/**
	 * The base implementation of `convert` which accepts a `util` object of methods
	 * required to perform conversions.
	 *
	 * @param {Object} util The util object.
	 * @param {string} name The name of the function to convert.
	 * @param {Function} func The function to convert.
	 * @param {Object} [options] The options object.
	 * @param {boolean} [options.cap=true] Specify capping iteratee arguments.
	 * @param {boolean} [options.curry=true] Specify currying.
	 * @param {boolean} [options.fixed=true] Specify fixed arity.
	 * @param {boolean} [options.immutable=true] Specify immutable operations.
	 * @param {boolean} [options.rearg=true] Specify rearranging arguments.
	 * @returns {Function|Object} Returns the converted function or object.
	 */
	function baseConvert(util, name, func, options) {
	  var setPlaceholder,
	      isLib = typeof name == 'function',
	      isObj = name === Object(name);
	
	  if (isObj) {
	    options = func;
	    func = name;
	    name = undefined;
	  }
	  if (func == null) {
	    throw new TypeError;
	  }
	  options || (options = {});
	
	  var config = {
	    'cap': 'cap' in options ? options.cap : true,
	    'curry': 'curry' in options ? options.curry : true,
	    'fixed': 'fixed' in options ? options.fixed : true,
	    'immutable': 'immutable' in options ? options.immutable : true,
	    'rearg': 'rearg' in options ? options.rearg : true
	  };
	
	  var forceCurry = ('curry' in options) && options.curry,
	      forceFixed = ('fixed' in options) && options.fixed,
	      forceRearg = ('rearg' in options) && options.rearg,
	      placeholder = isLib ? func : fallbackHolder,
	      pristine = isLib ? func.runInContext() : undefined;
	
	  var helpers = isLib ? func : {
	    'ary': util.ary,
	    'assign': util.assign,
	    'clone': util.clone,
	    'curry': util.curry,
	    'forEach': util.forEach,
	    'isArray': util.isArray,
	    'isFunction': util.isFunction,
	    'iteratee': util.iteratee,
	    'keys': util.keys,
	    'rearg': util.rearg,
	    'spread': util.spread,
	    'toInteger': util.toInteger,
	    'toPath': util.toPath
	  };
	
	  var ary = helpers.ary,
	      assign = helpers.assign,
	      clone = helpers.clone,
	      curry = helpers.curry,
	      each = helpers.forEach,
	      isArray = helpers.isArray,
	      isFunction = helpers.isFunction,
	      keys = helpers.keys,
	      rearg = helpers.rearg,
	      spread = helpers.spread,
	      toInteger = helpers.toInteger,
	      toPath = helpers.toPath;
	
	  var aryMethodKeys = keys(mapping.aryMethod);
	
	  var wrappers = {
	    'castArray': function(castArray) {
	      return function() {
	        var value = arguments[0];
	        return isArray(value)
	          ? castArray(cloneArray(value))
	          : castArray.apply(undefined, arguments);
	      };
	    },
	    'iteratee': function(iteratee) {
	      return function() {
	        var func = arguments[0],
	            arity = arguments[1],
	            result = iteratee(func, arity),
	            length = result.length;
	
	        if (config.cap && typeof arity == 'number') {
	          arity = arity > 2 ? (arity - 2) : 1;
	          return (length && length <= arity) ? result : baseAry(result, arity);
	        }
	        return result;
	      };
	    },
	    'mixin': function(mixin) {
	      return function(source) {
	        var func = this;
	        if (!isFunction(func)) {
	          return mixin(func, Object(source));
	        }
	        var pairs = [];
	        each(keys(source), function(key) {
	          if (isFunction(source[key])) {
	            pairs.push([key, func.prototype[key]]);
	          }
	        });
	
	        mixin(func, Object(source));
	
	        each(pairs, function(pair) {
	          var value = pair[1];
	          if (isFunction(value)) {
	            func.prototype[pair[0]] = value;
	          } else {
	            delete func.prototype[pair[0]];
	          }
	        });
	        return func;
	      };
	    },
	    'nthArg': function(nthArg) {
	      return function(n) {
	        var arity = n < 0 ? 1 : (toInteger(n) + 1);
	        return curry(nthArg(n), arity);
	      };
	    },
	    'rearg': function(rearg) {
	      return function(func, indexes) {
	        var arity = indexes ? indexes.length : 0;
	        return curry(rearg(func, indexes), arity);
	      };
	    },
	    'runInContext': function(runInContext) {
	      return function(context) {
	        return baseConvert(util, runInContext(context), options);
	      };
	    }
	  };
	
	  /*--------------------------------------------------------------------------*/
	
	  /**
	   * Casts `func` to a function with an arity capped iteratee if needed.
	   *
	   * @private
	   * @param {string} name The name of the function to inspect.
	   * @param {Function} func The function to inspect.
	   * @returns {Function} Returns the cast function.
	   */
	  function castCap(name, func) {
	    if (config.cap) {
	      var indexes = mapping.iterateeRearg[name];
	      if (indexes) {
	        return iterateeRearg(func, indexes);
	      }
	      var n = !isLib && mapping.iterateeAry[name];
	      if (n) {
	        return iterateeAry(func, n);
	      }
	    }
	    return func;
	  }
	
	  /**
	   * Casts `func` to a curried function if needed.
	   *
	   * @private
	   * @param {string} name The name of the function to inspect.
	   * @param {Function} func The function to inspect.
	   * @param {number} n The arity of `func`.
	   * @returns {Function} Returns the cast function.
	   */
	  function castCurry(name, func, n) {
	    return (forceCurry || (config.curry && n > 1))
	      ? curry(func, n)
	      : func;
	  }
	
	  /**
	   * Casts `func` to a fixed arity function if needed.
	   *
	   * @private
	   * @param {string} name The name of the function to inspect.
	   * @param {Function} func The function to inspect.
	   * @param {number} n The arity cap.
	   * @returns {Function} Returns the cast function.
	   */
	  function castFixed(name, func, n) {
	    if (config.fixed && (forceFixed || !mapping.skipFixed[name])) {
	      var data = mapping.methodSpread[name],
	          start = data && data.start;
	
	      return start  === undefined ? ary(func, n) : spread(func, start);
	    }
	    return func;
	  }
	
	  /**
	   * Casts `func` to an rearged function if needed.
	   *
	   * @private
	   * @param {string} name The name of the function to inspect.
	   * @param {Function} func The function to inspect.
	   * @param {number} n The arity of `func`.
	   * @returns {Function} Returns the cast function.
	   */
	  function castRearg(name, func, n) {
	    return (config.rearg && n > 1 && (forceRearg || !mapping.skipRearg[name]))
	      ? rearg(func, mapping.methodRearg[name] || mapping.aryRearg[n])
	      : func;
	  }
	
	  /**
	   * Creates a clone of `object` by `path`.
	   *
	   * @private
	   * @param {Object} object The object to clone.
	   * @param {Array|string} path The path to clone by.
	   * @returns {Object} Returns the cloned object.
	   */
	  function cloneByPath(object, path) {
	    path = toPath(path);
	
	    var index = -1,
	        length = path.length,
	        lastIndex = length - 1,
	        result = clone(Object(object)),
	        nested = result;
	
	    while (nested != null && ++index < length) {
	      var key = path[index],
	          value = nested[key];
	
	      if (value != null) {
	        nested[path[index]] = clone(index == lastIndex ? value : Object(value));
	      }
	      nested = nested[key];
	    }
	    return result;
	  }
	
	  /**
	   * Converts `lodash` to an immutable auto-curried iteratee-first data-last
	   * version with conversion `options` applied.
	   *
	   * @param {Object} [options] The options object. See `baseConvert` for more details.
	   * @returns {Function} Returns the converted `lodash`.
	   */
	  function convertLib(options) {
	    return _.runInContext.convert(options)(undefined);
	  }
	
	  /**
	   * Create a converter function for `func` of `name`.
	   *
	   * @param {string} name The name of the function to convert.
	   * @param {Function} func The function to convert.
	   * @returns {Function} Returns the new converter function.
	   */
	  function createConverter(name, func) {
	    var realName = mapping.aliasToReal[name] || name,
	        methodName = mapping.remap[realName] || realName,
	        oldOptions = options;
	
	    return function(options) {
	      var newUtil = isLib ? pristine : helpers,
	          newFunc = isLib ? pristine[methodName] : func,
	          newOptions = assign(assign({}, oldOptions), options);
	
	      return baseConvert(newUtil, realName, newFunc, newOptions);
	    };
	  }
	
	  /**
	   * Creates a function that wraps `func` to invoke its iteratee, with up to `n`
	   * arguments, ignoring any additional arguments.
	   *
	   * @private
	   * @param {Function} func The function to cap iteratee arguments for.
	   * @param {number} n The arity cap.
	   * @returns {Function} Returns the new function.
	   */
	  function iterateeAry(func, n) {
	    return overArg(func, function(func) {
	      return typeof func == 'function' ? baseAry(func, n) : func;
	    });
	  }
	
	  /**
	   * Creates a function that wraps `func` to invoke its iteratee with arguments
	   * arranged according to the specified `indexes` where the argument value at
	   * the first index is provided as the first argument, the argument value at
	   * the second index is provided as the second argument, and so on.
	   *
	   * @private
	   * @param {Function} func The function to rearrange iteratee arguments for.
	   * @param {number[]} indexes The arranged argument indexes.
	   * @returns {Function} Returns the new function.
	   */
	  function iterateeRearg(func, indexes) {
	    return overArg(func, function(func) {
	      var n = indexes.length;
	      return baseArity(rearg(baseAry(func, n), indexes), n);
	    });
	  }
	
	  /**
	   * Creates a function that invokes `func` with its first argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */
	  function overArg(func, transform) {
	    return function() {
	      var length = arguments.length;
	      if (!length) {
	        return func();
	      }
	      var args = Array(length);
	      while (length--) {
	        args[length] = arguments[length];
	      }
	      var index = config.rearg ? 0 : (length - 1);
	      args[index] = transform(args[index]);
	      return func.apply(undefined, args);
	    };
	  }
	
	  /**
	   * Creates a function that wraps `func` and applys the conversions
	   * rules by `name`.
	   *
	   * @private
	   * @param {string} name The name of the function to wrap.
	   * @param {Function} func The function to wrap.
	   * @returns {Function} Returns the converted function.
	   */
	  function wrap(name, func) {
	    var result,
	        realName = mapping.aliasToReal[name] || name,
	        wrapped = func,
	        wrapper = wrappers[realName];
	
	    if (wrapper) {
	      wrapped = wrapper(func);
	    }
	    else if (config.immutable) {
	      if (mapping.mutate.array[realName]) {
	        wrapped = wrapImmutable(func, cloneArray);
	      }
	      else if (mapping.mutate.object[realName]) {
	        wrapped = wrapImmutable(func, createCloner(func));
	      }
	      else if (mapping.mutate.set[realName]) {
	        wrapped = wrapImmutable(func, cloneByPath);
	      }
	    }
	    each(aryMethodKeys, function(aryKey) {
	      each(mapping.aryMethod[aryKey], function(otherName) {
	        if (realName == otherName) {
	          var spreadData = mapping.methodSpread[realName],
	              afterRearg = spreadData && spreadData.afterRearg;
	
	          result = afterRearg
	            ? castFixed(realName, castRearg(realName, wrapped, aryKey), aryKey)
	            : castRearg(realName, castFixed(realName, wrapped, aryKey), aryKey);
	
	          result = castCap(realName, result);
	          result = castCurry(realName, result, aryKey);
	          return false;
	        }
	      });
	      return !result;
	    });
	
	    result || (result = wrapped);
	    if (result == func) {
	      result = forceCurry ? curry(result, 1) : function() {
	        return func.apply(this, arguments);
	      };
	    }
	    result.convert = createConverter(realName, func);
	    if (mapping.placeholder[realName]) {
	      setPlaceholder = true;
	      result.placeholder = func.placeholder = placeholder;
	    }
	    return result;
	  }
	
	  /*--------------------------------------------------------------------------*/
	
	  if (!isObj) {
	    return wrap(name, func);
	  }
	  var _ = func;
	
	  // Convert methods by ary cap.
	  var pairs = [];
	  each(aryMethodKeys, function(aryKey) {
	    each(mapping.aryMethod[aryKey], function(key) {
	      var func = _[mapping.remap[key] || key];
	      if (func) {
	        pairs.push([key, wrap(key, func)]);
	      }
	    });
	  });
	
	  // Convert remaining methods.
	  each(keys(_), function(key) {
	    var func = _[key];
	    if (typeof func == 'function') {
	      var length = pairs.length;
	      while (length--) {
	        if (pairs[length][0] == key) {
	          return;
	        }
	      }
	      func.convert = createConverter(key, func);
	      pairs.push([key, func]);
	    }
	  });
	
	  // Assign to `_` leaving `_.prototype` unchanged to allow chaining.
	  each(pairs, function(pair) {
	    _[pair[0]] = pair[1];
	  });
	
	  _.convert = convertLib;
	  if (setPlaceholder) {
	    _.placeholder = placeholder;
	  }
	  // Assign aliases.
	  each(keys(_), function(key) {
	    each(mapping.realToAlias[key] || [], function(alias) {
	      _[alias] = _[key];
	    });
	  });
	
	  return _;
	}
	
	module.exports = baseConvert;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 6 */
/***/ function(module, exports) {

	/** Used to map aliases to their real names. */
	exports.aliasToReal = {
	
	  // Lodash aliases.
	  'each': 'forEach',
	  'eachRight': 'forEachRight',
	  'entries': 'toPairs',
	  'entriesIn': 'toPairsIn',
	  'extend': 'assignIn',
	  'extendAll': 'assignInAll',
	  'extendAllWith': 'assignInAllWith',
	  'extendWith': 'assignInWith',
	  'first': 'head',
	
	  // Methods that are curried variants of others.
	  'conforms': 'conformsTo',
	  'matches': 'isMatch',
	  'property': 'get',
	
	  // Ramda aliases.
	  '__': 'placeholder',
	  'F': 'stubFalse',
	  'T': 'stubTrue',
	  'all': 'every',
	  'allPass': 'overEvery',
	  'always': 'constant',
	  'any': 'some',
	  'anyPass': 'overSome',
	  'apply': 'spread',
	  'assoc': 'set',
	  'assocPath': 'set',
	  'complement': 'negate',
	  'compose': 'flowRight',
	  'contains': 'includes',
	  'dissoc': 'unset',
	  'dissocPath': 'unset',
	  'dropLast': 'dropRight',
	  'dropLastWhile': 'dropRightWhile',
	  'equals': 'isEqual',
	  'identical': 'eq',
	  'indexBy': 'keyBy',
	  'init': 'initial',
	  'invertObj': 'invert',
	  'juxt': 'over',
	  'omitAll': 'omit',
	  'nAry': 'ary',
	  'path': 'get',
	  'pathEq': 'matchesProperty',
	  'pathOr': 'getOr',
	  'paths': 'at',
	  'pickAll': 'pick',
	  'pipe': 'flow',
	  'pluck': 'map',
	  'prop': 'get',
	  'propEq': 'matchesProperty',
	  'propOr': 'getOr',
	  'props': 'at',
	  'symmetricDifference': 'xor',
	  'symmetricDifferenceBy': 'xorBy',
	  'symmetricDifferenceWith': 'xorWith',
	  'takeLast': 'takeRight',
	  'takeLastWhile': 'takeRightWhile',
	  'unapply': 'rest',
	  'unnest': 'flatten',
	  'useWith': 'overArgs',
	  'where': 'conformsTo',
	  'whereEq': 'isMatch',
	  'zipObj': 'zipObject'
	};
	
	/** Used to map ary to method names. */
	exports.aryMethod = {
	  '1': [
	    'assignAll', 'assignInAll', 'attempt', 'castArray', 'ceil', 'create',
	    'curry', 'curryRight', 'defaultsAll', 'defaultsDeepAll', 'floor', 'flow',
	    'flowRight', 'fromPairs', 'invert', 'iteratee', 'memoize', 'method', 'mergeAll',
	    'methodOf', 'mixin', 'nthArg', 'over', 'overEvery', 'overSome','rest', 'reverse',
	    'round', 'runInContext', 'spread', 'template', 'trim', 'trimEnd', 'trimStart',
	    'uniqueId', 'words', 'zipAll'
	  ],
	  '2': [
	    'add', 'after', 'ary', 'assign', 'assignAllWith', 'assignIn', 'assignInAllWith',
	    'at', 'before', 'bind', 'bindAll', 'bindKey', 'chunk', 'cloneDeepWith',
	    'cloneWith', 'concat', 'conformsTo', 'countBy', 'curryN', 'curryRightN',
	    'debounce', 'defaults', 'defaultsDeep', 'defaultTo', 'delay', 'difference',
	    'divide', 'drop', 'dropRight', 'dropRightWhile', 'dropWhile', 'endsWith', 'eq',
	    'every', 'filter', 'find', 'findIndex', 'findKey', 'findLast', 'findLastIndex',
	    'findLastKey', 'flatMap', 'flatMapDeep', 'flattenDepth', 'forEach',
	    'forEachRight', 'forIn', 'forInRight', 'forOwn', 'forOwnRight', 'get',
	    'groupBy', 'gt', 'gte', 'has', 'hasIn', 'includes', 'indexOf', 'intersection',
	    'invertBy', 'invoke', 'invokeMap', 'isEqual', 'isMatch', 'join', 'keyBy',
	    'lastIndexOf', 'lt', 'lte', 'map', 'mapKeys', 'mapValues', 'matchesProperty',
	    'maxBy', 'meanBy', 'merge', 'mergeAllWith', 'minBy', 'multiply', 'nth', 'omit',
	    'omitBy', 'overArgs', 'pad', 'padEnd', 'padStart', 'parseInt', 'partial',
	    'partialRight', 'partition', 'pick', 'pickBy', 'propertyOf', 'pull', 'pullAll',
	    'pullAt', 'random', 'range', 'rangeRight', 'rearg', 'reject', 'remove',
	    'repeat', 'restFrom', 'result', 'sampleSize', 'some', 'sortBy', 'sortedIndex',
	    'sortedIndexOf', 'sortedLastIndex', 'sortedLastIndexOf', 'sortedUniqBy',
	    'split', 'spreadFrom', 'startsWith', 'subtract', 'sumBy', 'take', 'takeRight',
	    'takeRightWhile', 'takeWhile', 'tap', 'throttle', 'thru', 'times', 'trimChars',
	    'trimCharsEnd', 'trimCharsStart', 'truncate', 'union', 'uniqBy', 'uniqWith',
	    'unset', 'unzipWith', 'without', 'wrap', 'xor', 'zip', 'zipObject',
	    'zipObjectDeep'
	  ],
	  '3': [
	    'assignInWith', 'assignWith', 'clamp', 'differenceBy', 'differenceWith',
	    'findFrom', 'findIndexFrom', 'findLastFrom', 'findLastIndexFrom', 'getOr',
	    'includesFrom', 'indexOfFrom', 'inRange', 'intersectionBy', 'intersectionWith',
	    'invokeArgs', 'invokeArgsMap', 'isEqualWith', 'isMatchWith', 'flatMapDepth',
	    'lastIndexOfFrom', 'mergeWith', 'orderBy', 'padChars', 'padCharsEnd',
	    'padCharsStart', 'pullAllBy', 'pullAllWith', 'rangeStep', 'rangeStepRight',
	    'reduce', 'reduceRight', 'replace', 'set', 'slice', 'sortedIndexBy',
	    'sortedLastIndexBy', 'transform', 'unionBy', 'unionWith', 'update', 'xorBy',
	    'xorWith', 'zipWith'
	  ],
	  '4': [
	    'fill', 'setWith', 'updateWith'
	  ]
	};
	
	/** Used to map ary to rearg configs. */
	exports.aryRearg = {
	  '2': [1, 0],
	  '3': [2, 0, 1],
	  '4': [3, 2, 0, 1]
	};
	
	/** Used to map method names to their iteratee ary. */
	exports.iterateeAry = {
	  'dropRightWhile': 1,
	  'dropWhile': 1,
	  'every': 1,
	  'filter': 1,
	  'find': 1,
	  'findFrom': 1,
	  'findIndex': 1,
	  'findIndexFrom': 1,
	  'findKey': 1,
	  'findLast': 1,
	  'findLastFrom': 1,
	  'findLastIndex': 1,
	  'findLastIndexFrom': 1,
	  'findLastKey': 1,
	  'flatMap': 1,
	  'flatMapDeep': 1,
	  'flatMapDepth': 1,
	  'forEach': 1,
	  'forEachRight': 1,
	  'forIn': 1,
	  'forInRight': 1,
	  'forOwn': 1,
	  'forOwnRight': 1,
	  'map': 1,
	  'mapKeys': 1,
	  'mapValues': 1,
	  'partition': 1,
	  'reduce': 2,
	  'reduceRight': 2,
	  'reject': 1,
	  'remove': 1,
	  'some': 1,
	  'takeRightWhile': 1,
	  'takeWhile': 1,
	  'times': 1,
	  'transform': 2
	};
	
	/** Used to map method names to iteratee rearg configs. */
	exports.iterateeRearg = {
	  'mapKeys': [1]
	};
	
	/** Used to map method names to rearg configs. */
	exports.methodRearg = {
	  'assignInAllWith': [1, 2, 0],
	  'assignInWith': [1, 2, 0],
	  'assignAllWith': [1, 2, 0],
	  'assignWith': [1, 2, 0],
	  'differenceBy': [1, 2, 0],
	  'differenceWith': [1, 2, 0],
	  'getOr': [2, 1, 0],
	  'intersectionBy': [1, 2, 0],
	  'intersectionWith': [1, 2, 0],
	  'isEqualWith': [1, 2, 0],
	  'isMatchWith': [2, 1, 0],
	  'mergeAllWith': [1, 2, 0],
	  'mergeWith': [1, 2, 0],
	  'padChars': [2, 1, 0],
	  'padCharsEnd': [2, 1, 0],
	  'padCharsStart': [2, 1, 0],
	  'pullAllBy': [2, 1, 0],
	  'pullAllWith': [2, 1, 0],
	  'rangeStep': [1, 2, 0],
	  'rangeStepRight': [1, 2, 0],
	  'setWith': [3, 1, 2, 0],
	  'sortedIndexBy': [2, 1, 0],
	  'sortedLastIndexBy': [2, 1, 0],
	  'unionBy': [1, 2, 0],
	  'unionWith': [1, 2, 0],
	  'updateWith': [3, 1, 2, 0],
	  'xorBy': [1, 2, 0],
	  'xorWith': [1, 2, 0],
	  'zipWith': [1, 2, 0]
	};
	
	/** Used to map method names to spread configs. */
	exports.methodSpread = {
	  'assignAll': { 'start': 0 },
	  'assignAllWith': { 'afterRearg': true, 'start': 1 },
	  'assignInAll': { 'start': 0 },
	  'assignInAllWith': { 'afterRearg': true, 'start': 1 },
	  'defaultsAll': { 'start': 0 },
	  'defaultsDeepAll': { 'start': 0 },
	  'invokeArgs': { 'start': 2 },
	  'invokeArgsMap': { 'start': 2 },
	  'mergeAll': { 'start': 0 },
	  'mergeAllWith': { 'afterRearg': true, 'start': 1 },
	  'partial': { 'start': 1 },
	  'partialRight': { 'start': 1 },
	  'without': { 'start': 1 },
	  'zipAll': { 'start': 0 }
	};
	
	/** Used to identify methods which mutate arrays or objects. */
	exports.mutate = {
	  'array': {
	    'fill': true,
	    'pull': true,
	    'pullAll': true,
	    'pullAllBy': true,
	    'pullAllWith': true,
	    'pullAt': true,
	    'remove': true,
	    'reverse': true
	  },
	  'object': {
	    'assign': true,
	    'assignAll': true,
	    'assignAllWith': true,
	    'assignIn': true,
	    'assignInAll': true,
	    'assignInAllWith': true,
	    'assignInWith': true,
	    'assignWith': true,
	    'defaults': true,
	    'defaultsAll': true,
	    'defaultsDeep': true,
	    'defaultsDeepAll': true,
	    'merge': true,
	    'mergeAll': true,
	    'mergeAllWith': true,
	    'mergeWith': true,
	  },
	  'set': {
	    'set': true,
	    'setWith': true,
	    'unset': true,
	    'update': true,
	    'updateWith': true
	  }
	};
	
	/** Used to track methods with placeholder support */
	exports.placeholder = {
	  'bind': true,
	  'bindKey': true,
	  'curry': true,
	  'curryRight': true,
	  'partial': true,
	  'partialRight': true
	};
	
	/** Used to map real names to their aliases. */
	exports.realToAlias = (function() {
	  var hasOwnProperty = Object.prototype.hasOwnProperty,
	      object = exports.aliasToReal,
	      result = {};
	
	  for (var key in object) {
	    var value = object[key];
	    if (hasOwnProperty.call(result, value)) {
	      result[value].push(key);
	    } else {
	      result[value] = [key];
	    }
	  }
	  return result;
	}());
	
	/** Used to map method names to other names. */
	exports.remap = {
	  'assignAll': 'assign',
	  'assignAllWith': 'assignWith',
	  'assignInAll': 'assignIn',
	  'assignInAllWith': 'assignInWith',
	  'curryN': 'curry',
	  'curryRightN': 'curryRight',
	  'defaultsAll': 'defaults',
	  'defaultsDeepAll': 'defaultsDeep',
	  'findFrom': 'find',
	  'findIndexFrom': 'findIndex',
	  'findLastFrom': 'findLast',
	  'findLastIndexFrom': 'findLastIndex',
	  'getOr': 'get',
	  'includesFrom': 'includes',
	  'indexOfFrom': 'indexOf',
	  'invokeArgs': 'invoke',
	  'invokeArgsMap': 'invokeMap',
	  'lastIndexOfFrom': 'lastIndexOf',
	  'mergeAll': 'merge',
	  'mergeAllWith': 'mergeWith',
	  'padChars': 'pad',
	  'padCharsEnd': 'padEnd',
	  'padCharsStart': 'padStart',
	  'propertyOf': 'get',
	  'rangeStep': 'range',
	  'rangeStepRight': 'rangeRight',
	  'restFrom': 'rest',
	  'spreadFrom': 'spread',
	  'trimChars': 'trim',
	  'trimCharsEnd': 'trimEnd',
	  'trimCharsStart': 'trimStart',
	  'zipAll': 'zip'
	};
	
	/** Used to track methods that skip fixing their arity. */
	exports.skipFixed = {
	  'castArray': true,
	  'flow': true,
	  'flowRight': true,
	  'iteratee': true,
	  'mixin': true,
	  'rearg': true,
	  'runInContext': true
	};
	
	/** Used to track methods that skip rearranging arguments. */
	exports.skipRearg = {
	  'add': true,
	  'assign': true,
	  'assignIn': true,
	  'bind': true,
	  'bindKey': true,
	  'concat': true,
	  'difference': true,
	  'divide': true,
	  'eq': true,
	  'gt': true,
	  'gte': true,
	  'isEqual': true,
	  'lt': true,
	  'lte': true,
	  'matchesProperty': true,
	  'merge': true,
	  'multiply': true,
	  'overArgs': true,
	  'partial': true,
	  'partialRight': true,
	  'propertyOf': true,
	  'random': true,
	  'range': true,
	  'rangeRight': true,
	  'subtract': true,
	  'zip': true,
	  'zipObject': true,
	  'zipObjectDeep': true
	};


/***/ },
/* 7 */
/***/ function(module, exports) {

	/**
	 * The default argument placeholder value for methods.
	 *
	 * @type {Object}
	 */
	module.exports = {};


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;
	
	var _createStore = __webpack_require__(9);
	
	var _createStore2 = _interopRequireDefault(_createStore);
	
	var _combineReducers = __webpack_require__(22);
	
	var _combineReducers2 = _interopRequireDefault(_combineReducers);
	
	var _bindActionCreators = __webpack_require__(24);
	
	var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);
	
	var _applyMiddleware = __webpack_require__(25);
	
	var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);
	
	var _compose = __webpack_require__(26);
	
	var _compose2 = _interopRequireDefault(_compose);
	
	var _warning = __webpack_require__(23);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	/*
	* This is a dummy function to check if the function name has been altered by minification.
	* If the function has been minified and NODE_ENV !== 'production', warn the user.
	*/
	function isCrushed() {}
	
	if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  (0, _warning2["default"])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
	}
	
	exports.createStore = _createStore2["default"];
	exports.combineReducers = _combineReducers2["default"];
	exports.bindActionCreators = _bindActionCreators2["default"];
	exports.applyMiddleware = _applyMiddleware2["default"];
	exports.compose = _compose2["default"];

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.ActionTypes = undefined;
	exports["default"] = createStore;
	
	var _isPlainObject = __webpack_require__(10);
	
	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);
	
	var _symbolObservable = __webpack_require__(20);
	
	var _symbolObservable2 = _interopRequireDefault(_symbolObservable);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var ActionTypes = exports.ActionTypes = {
	  INIT: '@@redux/INIT'
	};
	
	/**
	 * Creates a Redux store that holds the state tree.
	 * The only way to change the data in the store is to call `dispatch()` on it.
	 *
	 * There should only be a single store in your app. To specify how different
	 * parts of the state tree respond to actions, you may combine several reducers
	 * into a single reducer function by using `combineReducers`.
	 *
	 * @param {Function} reducer A function that returns the next state tree, given
	 * the current state tree and the action to handle.
	 *
	 * @param {any} [initialState] The initial state. You may optionally specify it
	 * to hydrate the state from the server in universal apps, or to restore a
	 * previously serialized user session.
	 * If you use `combineReducers` to produce the root reducer function, this must be
	 * an object with the same shape as `combineReducers` keys.
	 *
	 * @param {Function} enhancer The store enhancer. You may optionally specify it
	 * to enhance the store with third-party capabilities such as middleware,
	 * time travel, persistence, etc. The only store enhancer that ships with Redux
	 * is `applyMiddleware()`.
	 *
	 * @returns {Store} A Redux store that lets you read the state, dispatch actions
	 * and subscribe to changes.
	 */
	function createStore(reducer, initialState, enhancer) {
	  var _ref2;
	
	  if (typeof initialState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = initialState;
	    initialState = undefined;
	  }
	
	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error('Expected the enhancer to be a function.');
	    }
	
	    return enhancer(createStore)(reducer, initialState);
	  }
	
	  if (typeof reducer !== 'function') {
	    throw new Error('Expected the reducer to be a function.');
	  }
	
	  var currentReducer = reducer;
	  var currentState = initialState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;
	
	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }
	
	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */
	  function getState() {
	    return currentState;
	  }
	
	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all state changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */
	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('Expected listener to be a function.');
	    }
	
	    var isSubscribed = true;
	
	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);
	
	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }
	
	      isSubscribed = false;
	
	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	    };
	  }
	
	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */
	  function dispatch(action) {
	    if (!(0, _isPlainObject2["default"])(action)) {
	      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
	    }
	
	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }
	
	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }
	
	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }
	
	    var listeners = currentListeners = nextListeners;
	    for (var i = 0; i < listeners.length; i++) {
	      listeners[i]();
	    }
	
	    return action;
	  }
	
	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */
	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error('Expected the nextReducer to be a function.');
	    }
	
	    currentReducer = nextReducer;
	    dispatch({ type: ActionTypes.INIT });
	  }
	
	  /**
	   * Interoperability point for observable/reactive libraries.
	   * @returns {observable} A minimal observable of state changes.
	   * For more information, see the observable proposal:
	   * https://github.com/zenparsing/es-observable
	   */
	  function observable() {
	    var _ref;
	
	    var outerSubscribe = subscribe;
	    return _ref = {
	      /**
	       * The minimal observable subscription method.
	       * @param {Object} observer Any object that can be used as an observer.
	       * The observer object should have a `next` method.
	       * @returns {subscription} An object with an `unsubscribe` method that can
	       * be used to unsubscribe the observable from the store, and prevent further
	       * emission of values from the observable.
	       */
	
	      subscribe: function subscribe(observer) {
	        if (typeof observer !== 'object') {
	          throw new TypeError('Expected the observer to be an object.');
	        }
	
	        function observeState() {
	          if (observer.next) {
	            observer.next(getState());
	          }
	        }
	
	        observeState();
	        var unsubscribe = outerSubscribe(observeState);
	        return { unsubscribe: unsubscribe };
	      }
	    }, _ref[_symbolObservable2["default"]] = function () {
	      return this;
	    }, _ref;
	  }
	
	  // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.
	  dispatch({ type: ActionTypes.INIT });
	
	  return _ref2 = {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  }, _ref2[_symbolObservable2["default"]] = observable, _ref2;
	}

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(11),
	    getPrototype = __webpack_require__(17),
	    isObjectLike = __webpack_require__(19);
	
	/** `Object#toString` result references. */
	var objectTag = '[object Object]';
	
	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);
	
	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	    funcToString.call(Ctor) == objectCtorString;
	}
	
	module.exports = isPlainObject;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(12),
	    getRawTag = __webpack_require__(15),
	    objectToString = __webpack_require__(16);
	
	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';
	
	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
	
	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}
	
	module.exports = baseGetTag;


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(13);
	
	/** Built-in value references. */
	var Symbol = root.Symbol;
	
	module.exports = Symbol;


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(14);
	
	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
	
	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();
	
	module.exports = root;


/***/ },
/* 14 */
/***/ function(module, exports) {

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
	
	module.exports = freeGlobal;


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(12);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
	
	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];
	
	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}
	
	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}
	
	module.exports = getRawTag;


/***/ },
/* 16 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}
	
	module.exports = objectToString;


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(18);
	
	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);
	
	module.exports = getPrototype;


/***/ },
/* 18 */
/***/ function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}
	
	module.exports = overArg;


/***/ },
/* 19 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}
	
	module.exports = isObjectLike;


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* global window */
	'use strict';
	
	module.exports = __webpack_require__(21)(global || window || this);


/***/ },
/* 21 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function symbolObservablePonyfill(root) {
		var result;
		var Symbol = root.Symbol;
	
		if (typeof Symbol === 'function') {
			if (Symbol.observable) {
				result = Symbol.observable;
			} else {
				result = Symbol('observable');
				Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}
	
		return result;
	};


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports["default"] = combineReducers;
	
	var _createStore = __webpack_require__(9);
	
	var _isPlainObject = __webpack_require__(10);
	
	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);
	
	var _warning = __webpack_require__(23);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	function getUndefinedStateErrorMessage(key, action) {
	  var actionType = action && action.type;
	  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';
	
	  return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state.';
	}
	
	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'initialState argument passed to createStore' : 'previous state received by the reducer';
	
	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }
	
	  if (!(0, _isPlainObject2["default"])(inputState)) {
	    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
	  }
	
	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key);
	  });
	
	  if (unexpectedKeys.length > 0) {
	    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
	  }
	}
	
	function assertReducerSanity(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });
	
	    if (typeof initialState === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');
	    }
	
	    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
	    if (typeof reducer(undefined, { type: type }) === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');
	    }
	  });
	}
	
	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */
	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};
	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];
	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }
	  var finalReducerKeys = Object.keys(finalReducers);
	
	  var sanityError;
	  try {
	    assertReducerSanity(finalReducers);
	  } catch (e) {
	    sanityError = e;
	  }
	
	  return function combination() {
	    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var action = arguments[1];
	
	    if (sanityError) {
	      throw sanityError;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action);
	      if (warningMessage) {
	        (0, _warning2["default"])(warningMessage);
	      }
	    }
	
	    var hasChanged = false;
	    var nextState = {};
	    for (var i = 0; i < finalReducerKeys.length; i++) {
	      var key = finalReducerKeys[i];
	      var reducer = finalReducers[key];
	      var previousStateForKey = state[key];
	      var nextStateForKey = reducer(previousStateForKey, action);
	      if (typeof nextStateForKey === 'undefined') {
	        var errorMessage = getUndefinedStateErrorMessage(key, action);
	        throw new Error(errorMessage);
	      }
	      nextState[key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }
	    return hasChanged ? nextState : state;
	  };
	}

/***/ },
/* 23 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports["default"] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ },
/* 24 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports["default"] = bindActionCreators;
	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(undefined, arguments));
	  };
	}
	
	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass a single function as the first argument,
	 * and get a function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */
	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }
	
	  if (typeof actionCreators !== 'object' || actionCreators === null) {
	    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
	  }
	
	  var keys = Object.keys(actionCreators);
	  var boundActionCreators = {};
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var actionCreator = actionCreators[key];
	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }
	  return boundActionCreators;
	}

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	exports["default"] = applyMiddleware;
	
	var _compose = __webpack_require__(26);
	
	var _compose2 = _interopRequireDefault(_compose);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */
	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }
	
	  return function (createStore) {
	    return function (reducer, initialState, enhancer) {
	      var store = createStore(reducer, initialState, enhancer);
	      var _dispatch = store.dispatch;
	      var chain = [];
	
	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch(action) {
	          return _dispatch(action);
	        }
	      };
	      chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = _compose2["default"].apply(undefined, chain)(store.dispatch);
	
	      return _extends({}, store, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}

/***/ },
/* 26 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports["default"] = compose;
	/**
	 * Composes single-argument functions from right to left. The rightmost
	 * function can take multiple arguments as it provides the signature for
	 * the resulting composite function.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing the argument functions
	 * from right to left. For example, compose(f, g, h) is identical to doing
	 * (...args) => f(g(h(...args))).
	 */
	
	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }
	
	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  } else {
	    var _ret = function () {
	      var last = funcs[funcs.length - 1];
	      var rest = funcs.slice(0, -1);
	      return {
	        v: function v() {
	          return rest.reduceRight(function (composed, f) {
	            return f(composed);
	          }, last.apply(undefined, arguments));
	        }
	      };
	    }();
	
	    if (typeof _ret === "object") return _ret.v;
	  }
	}

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	//! version : 2.15.2
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com
	
	;(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, function () { 'use strict';
	
	    var hookCallback;
	
	    function utils_hooks__hooks () {
	        return hookCallback.apply(null, arguments);
	    }
	
	    // This is done to register the method called with moment()
	    // without creating circular dependencies.
	    function setHookCallback (callback) {
	        hookCallback = callback;
	    }
	
	    function isArray(input) {
	        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	    }
	
	    function isObject(input) {
	        // IE8 will treat undefined and null as object if it wasn't for
	        // input != null
	        return input != null && Object.prototype.toString.call(input) === '[object Object]';
	    }
	
	    function isObjectEmpty(obj) {
	        var k;
	        for (k in obj) {
	            // even if its not own property I'd still call it non-empty
	            return false;
	        }
	        return true;
	    }
	
	    function isDate(input) {
	        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	    }
	
	    function map(arr, fn) {
	        var res = [], i;
	        for (i = 0; i < arr.length; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }
	
	    function hasOwnProp(a, b) {
	        return Object.prototype.hasOwnProperty.call(a, b);
	    }
	
	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }
	
	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }
	
	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }
	
	        return a;
	    }
	
	    function create_utc__createUTC (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, true).utc();
	    }
	
	    function defaultParsingFlags() {
	        // We need to deep clone this object.
	        return {
	            empty           : false,
	            unusedTokens    : [],
	            unusedInput     : [],
	            overflow        : -2,
	            charsLeftOver   : 0,
	            nullInput       : false,
	            invalidMonth    : null,
	            invalidFormat   : false,
	            userInvalidated : false,
	            iso             : false,
	            parsedDateParts : [],
	            meridiem        : null
	        };
	    }
	
	    function getParsingFlags(m) {
	        if (m._pf == null) {
	            m._pf = defaultParsingFlags();
	        }
	        return m._pf;
	    }
	
	    var some;
	    if (Array.prototype.some) {
	        some = Array.prototype.some;
	    } else {
	        some = function (fun) {
	            var t = Object(this);
	            var len = t.length >>> 0;
	
	            for (var i = 0; i < len; i++) {
	                if (i in t && fun.call(this, t[i], i, t)) {
	                    return true;
	                }
	            }
	
	            return false;
	        };
	    }
	
	    function valid__isValid(m) {
	        if (m._isValid == null) {
	            var flags = getParsingFlags(m);
	            var parsedParts = some.call(flags.parsedDateParts, function (i) {
	                return i != null;
	            });
	            var isNowValid = !isNaN(m._d.getTime()) &&
	                flags.overflow < 0 &&
	                !flags.empty &&
	                !flags.invalidMonth &&
	                !flags.invalidWeekday &&
	                !flags.nullInput &&
	                !flags.invalidFormat &&
	                !flags.userInvalidated &&
	                (!flags.meridiem || (flags.meridiem && parsedParts));
	
	            if (m._strict) {
	                isNowValid = isNowValid &&
	                    flags.charsLeftOver === 0 &&
	                    flags.unusedTokens.length === 0 &&
	                    flags.bigHour === undefined;
	            }
	
	            if (Object.isFrozen == null || !Object.isFrozen(m)) {
	                m._isValid = isNowValid;
	            }
	            else {
	                return isNowValid;
	            }
	        }
	        return m._isValid;
	    }
	
	    function valid__createInvalid (flags) {
	        var m = create_utc__createUTC(NaN);
	        if (flags != null) {
	            extend(getParsingFlags(m), flags);
	        }
	        else {
	            getParsingFlags(m).userInvalidated = true;
	        }
	
	        return m;
	    }
	
	    function isUndefined(input) {
	        return input === void 0;
	    }
	
	    // Plugins that add properties should also add the key here (null value),
	    // so we can properly clone ourselves.
	    var momentProperties = utils_hooks__hooks.momentProperties = [];
	
	    function copyConfig(to, from) {
	        var i, prop, val;
	
	        if (!isUndefined(from._isAMomentObject)) {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (!isUndefined(from._i)) {
	            to._i = from._i;
	        }
	        if (!isUndefined(from._f)) {
	            to._f = from._f;
	        }
	        if (!isUndefined(from._l)) {
	            to._l = from._l;
	        }
	        if (!isUndefined(from._strict)) {
	            to._strict = from._strict;
	        }
	        if (!isUndefined(from._tzm)) {
	            to._tzm = from._tzm;
	        }
	        if (!isUndefined(from._isUTC)) {
	            to._isUTC = from._isUTC;
	        }
	        if (!isUndefined(from._offset)) {
	            to._offset = from._offset;
	        }
	        if (!isUndefined(from._pf)) {
	            to._pf = getParsingFlags(from);
	        }
	        if (!isUndefined(from._locale)) {
	            to._locale = from._locale;
	        }
	
	        if (momentProperties.length > 0) {
	            for (i in momentProperties) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (!isUndefined(val)) {
	                    to[prop] = val;
	                }
	            }
	        }
	
	        return to;
	    }
	
	    var updateInProgress = false;
	
	    // Moment prototype object
	    function Moment(config) {
	        copyConfig(this, config);
	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            utils_hooks__hooks.updateOffset(this);
	            updateInProgress = false;
	        }
	    }
	
	    function isMoment (obj) {
	        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	    }
	
	    function absFloor (number) {
	        if (number < 0) {
	            // -0 -> 0
	            return Math.ceil(number) || 0;
	        } else {
	            return Math.floor(number);
	        }
	    }
	
	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;
	
	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            value = absFloor(coercedNumber);
	        }
	
	        return value;
	    }
	
	    // compare two arrays, return the number of differences
	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if ((dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }
	
	    function warn(msg) {
	        if (utils_hooks__hooks.suppressDeprecationWarnings === false &&
	                (typeof console !==  'undefined') && console.warn) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }
	
	    function deprecate(msg, fn) {
	        var firstTime = true;
	
	        return extend(function () {
	            if (utils_hooks__hooks.deprecationHandler != null) {
	                utils_hooks__hooks.deprecationHandler(null, msg);
	            }
	            if (firstTime) {
	                var args = [];
	                var arg;
	                for (var i = 0; i < arguments.length; i++) {
	                    arg = '';
	                    if (typeof arguments[i] === 'object') {
	                        arg += '\n[' + i + '] ';
	                        for (var key in arguments[0]) {
	                            arg += key + ': ' + arguments[0][key] + ', ';
	                        }
	                        arg = arg.slice(0, -2); // Remove trailing comma and space
	                    } else {
	                        arg = arguments[i];
	                    }
	                    args.push(arg);
	                }
	                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }
	
	    var deprecations = {};
	
	    function deprecateSimple(name, msg) {
	        if (utils_hooks__hooks.deprecationHandler != null) {
	            utils_hooks__hooks.deprecationHandler(name, msg);
	        }
	        if (!deprecations[name]) {
	            warn(msg);
	            deprecations[name] = true;
	        }
	    }
	
	    utils_hooks__hooks.suppressDeprecationWarnings = false;
	    utils_hooks__hooks.deprecationHandler = null;
	
	    function isFunction(input) {
	        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	    }
	
	    function locale_set__set (config) {
	        var prop, i;
	        for (i in config) {
	            prop = config[i];
	            if (isFunction(prop)) {
	                this[i] = prop;
	            } else {
	                this['_' + i] = prop;
	            }
	        }
	        this._config = config;
	        // Lenient ordinal parsing accepts just a number in addition to
	        // number + (possibly) stuff coming from _ordinalParseLenient.
	        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
	    }
	
	    function mergeConfigs(parentConfig, childConfig) {
	        var res = extend({}, parentConfig), prop;
	        for (prop in childConfig) {
	            if (hasOwnProp(childConfig, prop)) {
	                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                    res[prop] = {};
	                    extend(res[prop], parentConfig[prop]);
	                    extend(res[prop], childConfig[prop]);
	                } else if (childConfig[prop] != null) {
	                    res[prop] = childConfig[prop];
	                } else {
	                    delete res[prop];
	                }
	            }
	        }
	        for (prop in parentConfig) {
	            if (hasOwnProp(parentConfig, prop) &&
	                    !hasOwnProp(childConfig, prop) &&
	                    isObject(parentConfig[prop])) {
	                // make sure changes to properties don't modify parent config
	                res[prop] = extend({}, res[prop]);
	            }
	        }
	        return res;
	    }
	
	    function Locale(config) {
	        if (config != null) {
	            this.set(config);
	        }
	    }
	
	    var keys;
	
	    if (Object.keys) {
	        keys = Object.keys;
	    } else {
	        keys = function (obj) {
	            var i, res = [];
	            for (i in obj) {
	                if (hasOwnProp(obj, i)) {
	                    res.push(i);
	                }
	            }
	            return res;
	        };
	    }
	
	    var defaultCalendar = {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    };
	
	    function locale_calendar__calendar (key, mom, now) {
	        var output = this._calendar[key] || this._calendar['sameElse'];
	        return isFunction(output) ? output.call(mom, now) : output;
	    }
	
	    var defaultLongDateFormat = {
	        LTS  : 'h:mm:ss A',
	        LT   : 'h:mm A',
	        L    : 'MM/DD/YYYY',
	        LL   : 'MMMM D, YYYY',
	        LLL  : 'MMMM D, YYYY h:mm A',
	        LLLL : 'dddd, MMMM D, YYYY h:mm A'
	    };
	
	    function longDateFormat (key) {
	        var format = this._longDateFormat[key],
	            formatUpper = this._longDateFormat[key.toUpperCase()];
	
	        if (format || !formatUpper) {
	            return format;
	        }
	
	        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	            return val.slice(1);
	        });
	
	        return this._longDateFormat[key];
	    }
	
	    var defaultInvalidDate = 'Invalid date';
	
	    function invalidDate () {
	        return this._invalidDate;
	    }
	
	    var defaultOrdinal = '%d';
	    var defaultOrdinalParse = /\d{1,2}/;
	
	    function ordinal (number) {
	        return this._ordinal.replace('%d', number);
	    }
	
	    var defaultRelativeTime = {
	        future : 'in %s',
	        past   : '%s ago',
	        s  : 'a few seconds',
	        m  : 'a minute',
	        mm : '%d minutes',
	        h  : 'an hour',
	        hh : '%d hours',
	        d  : 'a day',
	        dd : '%d days',
	        M  : 'a month',
	        MM : '%d months',
	        y  : 'a year',
	        yy : '%d years'
	    };
	
	    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
	        var output = this._relativeTime[string];
	        return (isFunction(output)) ?
	            output(number, withoutSuffix, string, isFuture) :
	            output.replace(/%d/i, number);
	    }
	
	    function pastFuture (diff, output) {
	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	    }
	
	    var aliases = {};
	
	    function addUnitAlias (unit, shorthand) {
	        var lowerCase = unit.toLowerCase();
	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	    }
	
	    function normalizeUnits(units) {
	        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	    }
	
	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;
	
	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }
	
	        return normalizedInput;
	    }
	
	    var priorities = {};
	
	    function addUnitPriority(unit, priority) {
	        priorities[unit] = priority;
	    }
	
	    function getPrioritizedUnits(unitsObj) {
	        var units = [];
	        for (var u in unitsObj) {
	            units.push({unit: u, priority: priorities[u]});
	        }
	        units.sort(function (a, b) {
	            return a.priority - b.priority;
	        });
	        return units;
	    }
	
	    function makeGetSet (unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                get_set__set(this, unit, value);
	                utils_hooks__hooks.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return get_set__get(this, unit);
	            }
	        };
	    }
	
	    function get_set__get (mom, unit) {
	        return mom.isValid() ?
	            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	    }
	
	    function get_set__set (mom, unit, value) {
	        if (mom.isValid()) {
	            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	        }
	    }
	
	    // MOMENTS
	
	    function stringGet (units) {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units]();
	        }
	        return this;
	    }
	
	
	    function stringSet (units, value) {
	        if (typeof units === 'object') {
	            units = normalizeObjectUnits(units);
	            var prioritized = getPrioritizedUnits(units);
	            for (var i = 0; i < prioritized.length; i++) {
	                this[prioritized[i].unit](units[prioritized[i].unit]);
	            }
	        } else {
	            units = normalizeUnits(units);
	            if (isFunction(this[units])) {
	                return this[units](value);
	            }
	        }
	        return this;
	    }
	
	    function zeroFill(number, targetLength, forceSign) {
	        var absNumber = '' + Math.abs(number),
	            zerosToFill = targetLength - absNumber.length,
	            sign = number >= 0;
	        return (sign ? (forceSign ? '+' : '') : '-') +
	            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	    }
	
	    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
	
	    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
	
	    var formatFunctions = {};
	
	    var formatTokenFunctions = {};
	
	    // token:    'M'
	    // padded:   ['MM', 2]
	    // ordinal:  'Mo'
	    // callback: function () { this.month() + 1 }
	    function addFormatToken (token, padded, ordinal, callback) {
	        var func = callback;
	        if (typeof callback === 'string') {
	            func = function () {
	                return this[callback]();
	            };
	        }
	        if (token) {
	            formatTokenFunctions[token] = func;
	        }
	        if (padded) {
	            formatTokenFunctions[padded[0]] = function () {
	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	            };
	        }
	        if (ordinal) {
	            formatTokenFunctions[ordinal] = function () {
	                return this.localeData().ordinal(func.apply(this, arguments), token);
	            };
	        }
	    }
	
	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }
	
	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens), i, length;
	
	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }
	
	        return function (mom) {
	            var output = '', i;
	            for (i = 0; i < length; i++) {
	                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
	            }
	            return output;
	        };
	    }
	
	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }
	
	        format = expandFormat(format, m.localeData());
	        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
	
	        return formatFunctions[format](m);
	    }
	
	    function expandFormat(format, locale) {
	        var i = 5;
	
	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }
	
	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }
	
	        return format;
	    }
	
	    var match1         = /\d/;            //       0 - 9
	    var match2         = /\d\d/;          //      00 - 99
	    var match3         = /\d{3}/;         //     000 - 999
	    var match4         = /\d{4}/;         //    0000 - 9999
	    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	    var match1to2      = /\d\d?/;         //       0 - 99
	    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
	    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
	    var match1to3      = /\d{1,3}/;       //       0 - 999
	    var match1to4      = /\d{1,4}/;       //       0 - 9999
	    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999
	
	    var matchUnsigned  = /\d+/;           //       0 - inf
	    var matchSigned    = /[+-]?\d+/;      //    -inf - inf
	
	    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
	    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z
	
	    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123
	
	    // any word (or two) characters or numbers including two/three word month in arabic.
	    // includes scottish gaelic two word and hyphenated months
	    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
	
	
	    var regexes = {};
	
	    function addRegexToken (token, regex, strictRegex) {
	        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
	            return (isStrict && strictRegex) ? strictRegex : regex;
	        };
	    }
	
	    function getParseRegexForToken (token, config) {
	        if (!hasOwnProp(regexes, token)) {
	            return new RegExp(unescapeFormat(token));
	        }
	
	        return regexes[token](config._strict, config._locale);
	    }
	
	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function unescapeFormat(s) {
	        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	            return p1 || p2 || p3 || p4;
	        }));
	    }
	
	    function regexEscape(s) {
	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }
	
	    var tokens = {};
	
	    function addParseToken (token, callback) {
	        var i, func = callback;
	        if (typeof token === 'string') {
	            token = [token];
	        }
	        if (typeof callback === 'number') {
	            func = function (input, array) {
	                array[callback] = toInt(input);
	            };
	        }
	        for (i = 0; i < token.length; i++) {
	            tokens[token[i]] = func;
	        }
	    }
	
	    function addWeekParseToken (token, callback) {
	        addParseToken(token, function (input, array, config, token) {
	            config._w = config._w || {};
	            callback(input, config._w, config, token);
	        });
	    }
	
	    function addTimeToArrayFromToken(token, input, config) {
	        if (input != null && hasOwnProp(tokens, token)) {
	            tokens[token](input, config._a, config, token);
	        }
	    }
	
	    var YEAR = 0;
	    var MONTH = 1;
	    var DATE = 2;
	    var HOUR = 3;
	    var MINUTE = 4;
	    var SECOND = 5;
	    var MILLISECOND = 6;
	    var WEEK = 7;
	    var WEEKDAY = 8;
	
	    var indexOf;
	
	    if (Array.prototype.indexOf) {
	        indexOf = Array.prototype.indexOf;
	    } else {
	        indexOf = function (o) {
	            // I know
	            var i;
	            for (i = 0; i < this.length; ++i) {
	                if (this[i] === o) {
	                    return i;
	                }
	            }
	            return -1;
	        };
	    }
	
	    function daysInMonth(year, month) {
	        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
	    }
	
	    // FORMATTING
	
	    addFormatToken('M', ['MM', 2], 'Mo', function () {
	        return this.month() + 1;
	    });
	
	    addFormatToken('MMM', 0, 0, function (format) {
	        return this.localeData().monthsShort(this, format);
	    });
	
	    addFormatToken('MMMM', 0, 0, function (format) {
	        return this.localeData().months(this, format);
	    });
	
	    // ALIASES
	
	    addUnitAlias('month', 'M');
	
	    // PRIORITY
	
	    addUnitPriority('month', 8);
	
	    // PARSING
	
	    addRegexToken('M',    match1to2);
	    addRegexToken('MM',   match1to2, match2);
	    addRegexToken('MMM',  function (isStrict, locale) {
	        return locale.monthsShortRegex(isStrict);
	    });
	    addRegexToken('MMMM', function (isStrict, locale) {
	        return locale.monthsRegex(isStrict);
	    });
	
	    addParseToken(['M', 'MM'], function (input, array) {
	        array[MONTH] = toInt(input) - 1;
	    });
	
	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	        var month = config._locale.monthsParse(input, token, config._strict);
	        // if we didn't find a month name, mark the date as invalid.
	        if (month != null) {
	            array[MONTH] = month;
	        } else {
	            getParsingFlags(config).invalidMonth = input;
	        }
	    });
	
	    // LOCALES
	
	    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
	    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	    function localeMonths (m, format) {
	        if (!m) {
	            return this._months;
	        }
	        return isArray(this._months) ? this._months[m.month()] :
	            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
	    }
	
	    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	    function localeMonthsShort (m, format) {
	        if (!m) {
	            return this._monthsShort;
	        }
	        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
	            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	    }
	
	    function units_month__handleStrictParse(monthName, format, strict) {
	        var i, ii, mom, llc = monthName.toLocaleLowerCase();
	        if (!this._monthsParse) {
	            // this is not used
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	            for (i = 0; i < 12; ++i) {
	                mom = create_utc__createUTC([2000, i]);
	                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
	                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	            }
	        }
	
	        if (strict) {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }
	
	    function localeMonthsParse (monthName, format, strict) {
	        var i, mom, regex;
	
	        if (this._monthsParseExact) {
	            return units_month__handleStrictParse.call(this, monthName, format, strict);
	        }
	
	        if (!this._monthsParse) {
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	        }
	
	        // TODO: add sorting
	        // Sorting makes sure if one month (or abbr) is a prefix of another
	        // see sorting in computeMonthsParse
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = create_utc__createUTC([2000, i]);
	            if (strict && !this._longMonthsParse[i]) {
	                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	            }
	            if (!strict && !this._monthsParse[i]) {
	                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (!strict && this._monthsParse[i].test(monthName)) {
	                return i;
	            }
	        }
	    }
	
	    // MOMENTS
	
	    function setMonth (mom, value) {
	        var dayOfMonth;
	
	        if (!mom.isValid()) {
	            // No op
	            return mom;
	        }
	
	        if (typeof value === 'string') {
	            if (/^\d+$/.test(value)) {
	                value = toInt(value);
	            } else {
	                value = mom.localeData().monthsParse(value);
	                // TODO: Another silent failure?
	                if (typeof value !== 'number') {
	                    return mom;
	                }
	            }
	        }
	
	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }
	
	    function getSetMonth (value) {
	        if (value != null) {
	            setMonth(this, value);
	            utils_hooks__hooks.updateOffset(this, true);
	            return this;
	        } else {
	            return get_set__get(this, 'Month');
	        }
	    }
	
	    function getDaysInMonth () {
	        return daysInMonth(this.year(), this.month());
	    }
	
	    var defaultMonthsShortRegex = matchWord;
	    function monthsShortRegex (isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsShortStrictRegex;
	            } else {
	                return this._monthsShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsShortRegex')) {
	                this._monthsShortRegex = defaultMonthsShortRegex;
	            }
	            return this._monthsShortStrictRegex && isStrict ?
	                this._monthsShortStrictRegex : this._monthsShortRegex;
	        }
	    }
	
	    var defaultMonthsRegex = matchWord;
	    function monthsRegex (isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsStrictRegex;
	            } else {
	                return this._monthsRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                this._monthsRegex = defaultMonthsRegex;
	            }
	            return this._monthsStrictRegex && isStrict ?
	                this._monthsStrictRegex : this._monthsRegex;
	        }
	    }
	
	    function computeMonthsParse () {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }
	
	        var shortPieces = [], longPieces = [], mixedPieces = [],
	            i, mom;
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = create_utc__createUTC([2000, i]);
	            shortPieces.push(this.monthsShort(mom, ''));
	            longPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.monthsShort(mom, ''));
	        }
	        // Sorting makes sure if one month (or abbr) is a prefix of another it
	        // will match the longer piece.
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 12; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	        }
	        for (i = 0; i < 24; i++) {
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }
	
	        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._monthsShortRegex = this._monthsRegex;
	        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	    }
	
	    // FORMATTING
	
	    addFormatToken('Y', 0, 0, function () {
	        var y = this.year();
	        return y <= 9999 ? '' + y : '+' + y;
	    });
	
	    addFormatToken(0, ['YY', 2], 0, function () {
	        return this.year() % 100;
	    });
	
	    addFormatToken(0, ['YYYY',   4],       0, 'year');
	    addFormatToken(0, ['YYYYY',  5],       0, 'year');
	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
	
	    // ALIASES
	
	    addUnitAlias('year', 'y');
	
	    // PRIORITIES
	
	    addUnitPriority('year', 1);
	
	    // PARSING
	
	    addRegexToken('Y',      matchSigned);
	    addRegexToken('YY',     match1to2, match2);
	    addRegexToken('YYYY',   match1to4, match4);
	    addRegexToken('YYYYY',  match1to6, match6);
	    addRegexToken('YYYYYY', match1to6, match6);
	
	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	    addParseToken('YYYY', function (input, array) {
	        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
	    });
	    addParseToken('YY', function (input, array) {
	        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
	    });
	    addParseToken('Y', function (input, array) {
	        array[YEAR] = parseInt(input, 10);
	    });
	
	    // HELPERS
	
	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }
	
	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }
	
	    // HOOKS
	
	    utils_hooks__hooks.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };
	
	    // MOMENTS
	
	    var getSetYear = makeGetSet('FullYear', true);
	
	    function getIsLeapYear () {
	        return isLeapYear(this.year());
	    }
	
	    function createDate (y, m, d, h, M, s, ms) {
	        //can't just apply() to create a date:
	        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
	        var date = new Date(y, m, d, h, M, s, ms);
	
	        //the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
	            date.setFullYear(y);
	        }
	        return date;
	    }
	
	    function createUTCDate (y) {
	        var date = new Date(Date.UTC.apply(null, arguments));
	
	        //the Date.UTC function remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
	            date.setUTCFullYear(y);
	        }
	        return date;
	    }
	
	    // start-of-first-week - start-of-year
	    function firstWeekOffset(year, dow, doy) {
	        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	            fwd = 7 + dow - doy,
	            // first-week day local weekday -- which local weekday is fwd
	            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
	
	        return -fwdlw + fwd - 1;
	    }
	
	    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	        var localWeekday = (7 + weekday - dow) % 7,
	            weekOffset = firstWeekOffset(year, dow, doy),
	            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	            resYear, resDayOfYear;
	
	        if (dayOfYear <= 0) {
	            resYear = year - 1;
	            resDayOfYear = daysInYear(resYear) + dayOfYear;
	        } else if (dayOfYear > daysInYear(year)) {
	            resYear = year + 1;
	            resDayOfYear = dayOfYear - daysInYear(year);
	        } else {
	            resYear = year;
	            resDayOfYear = dayOfYear;
	        }
	
	        return {
	            year: resYear,
	            dayOfYear: resDayOfYear
	        };
	    }
	
	    function weekOfYear(mom, dow, doy) {
	        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	            resWeek, resYear;
	
	        if (week < 1) {
	            resYear = mom.year() - 1;
	            resWeek = week + weeksInYear(resYear, dow, doy);
	        } else if (week > weeksInYear(mom.year(), dow, doy)) {
	            resWeek = week - weeksInYear(mom.year(), dow, doy);
	            resYear = mom.year() + 1;
	        } else {
	            resYear = mom.year();
	            resWeek = week;
	        }
	
	        return {
	            week: resWeek,
	            year: resYear
	        };
	    }
	
	    function weeksInYear(year, dow, doy) {
	        var weekOffset = firstWeekOffset(year, dow, doy),
	            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	    }
	
	    // FORMATTING
	
	    addFormatToken('w', ['ww', 2], 'wo', 'week');
	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
	
	    // ALIASES
	
	    addUnitAlias('week', 'w');
	    addUnitAlias('isoWeek', 'W');
	
	    // PRIORITIES
	
	    addUnitPriority('week', 5);
	    addUnitPriority('isoWeek', 5);
	
	    // PARSING
	
	    addRegexToken('w',  match1to2);
	    addRegexToken('ww', match1to2, match2);
	    addRegexToken('W',  match1to2);
	    addRegexToken('WW', match1to2, match2);
	
	    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	        week[token.substr(0, 1)] = toInt(input);
	    });
	
	    // HELPERS
	
	    // LOCALES
	
	    function localeWeek (mom) {
	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
	    }
	
	    var defaultLocaleWeek = {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    };
	
	    function localeFirstDayOfWeek () {
	        return this._week.dow;
	    }
	
	    function localeFirstDayOfYear () {
	        return this._week.doy;
	    }
	
	    // MOMENTS
	
	    function getSetWeek (input) {
	        var week = this.localeData().week(this);
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }
	
	    function getSetISOWeek (input) {
	        var week = weekOfYear(this, 1, 4).week;
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }
	
	    // FORMATTING
	
	    addFormatToken('d', 0, 'do', 'day');
	
	    addFormatToken('dd', 0, 0, function (format) {
	        return this.localeData().weekdaysMin(this, format);
	    });
	
	    addFormatToken('ddd', 0, 0, function (format) {
	        return this.localeData().weekdaysShort(this, format);
	    });
	
	    addFormatToken('dddd', 0, 0, function (format) {
	        return this.localeData().weekdays(this, format);
	    });
	
	    addFormatToken('e', 0, 0, 'weekday');
	    addFormatToken('E', 0, 0, 'isoWeekday');
	
	    // ALIASES
	
	    addUnitAlias('day', 'd');
	    addUnitAlias('weekday', 'e');
	    addUnitAlias('isoWeekday', 'E');
	
	    // PRIORITY
	    addUnitPriority('day', 11);
	    addUnitPriority('weekday', 11);
	    addUnitPriority('isoWeekday', 11);
	
	    // PARSING
	
	    addRegexToken('d',    match1to2);
	    addRegexToken('e',    match1to2);
	    addRegexToken('E',    match1to2);
	    addRegexToken('dd',   function (isStrict, locale) {
	        return locale.weekdaysMinRegex(isStrict);
	    });
	    addRegexToken('ddd',   function (isStrict, locale) {
	        return locale.weekdaysShortRegex(isStrict);
	    });
	    addRegexToken('dddd',   function (isStrict, locale) {
	        return locale.weekdaysRegex(isStrict);
	    });
	
	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	        var weekday = config._locale.weekdaysParse(input, token, config._strict);
	        // if we didn't get a weekday name, mark the date as invalid
	        if (weekday != null) {
	            week.d = weekday;
	        } else {
	            getParsingFlags(config).invalidWeekday = input;
	        }
	    });
	
	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	        week[token] = toInt(input);
	    });
	
	    // HELPERS
	
	    function parseWeekday(input, locale) {
	        if (typeof input !== 'string') {
	            return input;
	        }
	
	        if (!isNaN(input)) {
	            return parseInt(input, 10);
	        }
	
	        input = locale.weekdaysParse(input);
	        if (typeof input === 'number') {
	            return input;
	        }
	
	        return null;
	    }
	
	    function parseIsoWeekday(input, locale) {
	        if (typeof input === 'string') {
	            return locale.weekdaysParse(input) % 7 || 7;
	        }
	        return isNaN(input) ? null : input;
	    }
	
	    // LOCALES
	
	    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	    function localeWeekdays (m, format) {
	        if (!m) {
	            return this._weekdays;
	        }
	        return isArray(this._weekdays) ? this._weekdays[m.day()] :
	            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
	    }
	
	    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	    function localeWeekdaysShort (m) {
	        return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
	    }
	
	    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	    function localeWeekdaysMin (m) {
	        return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
	    }
	
	    function day_of_week__handleStrictParse(weekdayName, format, strict) {
	        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._minWeekdaysParse = [];
	
	            for (i = 0; i < 7; ++i) {
	                mom = create_utc__createUTC([2000, 1]).day(i);
	                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
	                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
	                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	            }
	        }
	
	        if (strict) {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }
	
	    function localeWeekdaysParse (weekdayName, format, strict) {
	        var i, mom, regex;
	
	        if (this._weekdaysParseExact) {
	            return day_of_week__handleStrictParse.call(this, weekdayName, format, strict);
	        }
	
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._minWeekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._fullWeekdaysParse = [];
	        }
	
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	
	            mom = create_utc__createUTC([2000, 1]).day(i);
	            if (strict && !this._fullWeekdaysParse[i]) {
	                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
	                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
	                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
	            }
	            if (!this._weekdaysParse[i]) {
	                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	                return i;
	            }
	        }
	    }
	
	    // MOMENTS
	
	    function getSetDayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	        if (input != null) {
	            input = parseWeekday(input, this.localeData());
	            return this.add(input - day, 'd');
	        } else {
	            return day;
	        }
	    }
	
	    function getSetLocaleDayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	        return input == null ? weekday : this.add(input - weekday, 'd');
	    }
	
	    function getSetISODayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	
	        // behaves the same as moment#day except
	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	        // as a setter, sunday should belong to the previous week.
	
	        if (input != null) {
	            var weekday = parseIsoWeekday(input, this.localeData());
	            return this.day(this.day() % 7 ? weekday : weekday - 7);
	        } else {
	            return this.day() || 7;
	        }
	    }
	
	    var defaultWeekdaysRegex = matchWord;
	    function weekdaysRegex (isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysStrictRegex;
	            } else {
	                return this._weekdaysRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                this._weekdaysRegex = defaultWeekdaysRegex;
	            }
	            return this._weekdaysStrictRegex && isStrict ?
	                this._weekdaysStrictRegex : this._weekdaysRegex;
	        }
	    }
	
	    var defaultWeekdaysShortRegex = matchWord;
	    function weekdaysShortRegex (isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysShortStrictRegex;
	            } else {
	                return this._weekdaysShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	            }
	            return this._weekdaysShortStrictRegex && isStrict ?
	                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
	        }
	    }
	
	    var defaultWeekdaysMinRegex = matchWord;
	    function weekdaysMinRegex (isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysMinStrictRegex;
	            } else {
	                return this._weekdaysMinRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	            }
	            return this._weekdaysMinStrictRegex && isStrict ?
	                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
	        }
	    }
	
	
	    function computeWeekdaysParse () {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }
	
	        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
	            i, mom, minp, shortp, longp;
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	            mom = create_utc__createUTC([2000, 1]).day(i);
	            minp = this.weekdaysMin(mom, '');
	            shortp = this.weekdaysShort(mom, '');
	            longp = this.weekdays(mom, '');
	            minPieces.push(minp);
	            shortPieces.push(shortp);
	            longPieces.push(longp);
	            mixedPieces.push(minp);
	            mixedPieces.push(shortp);
	            mixedPieces.push(longp);
	        }
	        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	        // will match the longer piece.
	        minPieces.sort(cmpLenRev);
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 7; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }
	
	        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._weekdaysShortRegex = this._weekdaysRegex;
	        this._weekdaysMinRegex = this._weekdaysRegex;
	
	        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
	    }
	
	    // FORMATTING
	
	    function hFormat() {
	        return this.hours() % 12 || 12;
	    }
	
	    function kFormat() {
	        return this.hours() || 24;
	    }
	
	    addFormatToken('H', ['HH', 2], 0, 'hour');
	    addFormatToken('h', ['hh', 2], 0, hFormat);
	    addFormatToken('k', ['kk', 2], 0, kFormat);
	
	    addFormatToken('hmm', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	    });
	
	    addFormatToken('hmmss', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2);
	    });
	
	    addFormatToken('Hmm', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2);
	    });
	
	    addFormatToken('Hmmss', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2);
	    });
	
	    function meridiem (token, lowercase) {
	        addFormatToken(token, 0, 0, function () {
	            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	        });
	    }
	
	    meridiem('a', true);
	    meridiem('A', false);
	
	    // ALIASES
	
	    addUnitAlias('hour', 'h');
	
	    // PRIORITY
	    addUnitPriority('hour', 13);
	
	    // PARSING
	
	    function matchMeridiem (isStrict, locale) {
	        return locale._meridiemParse;
	    }
	
	    addRegexToken('a',  matchMeridiem);
	    addRegexToken('A',  matchMeridiem);
	    addRegexToken('H',  match1to2);
	    addRegexToken('h',  match1to2);
	    addRegexToken('HH', match1to2, match2);
	    addRegexToken('hh', match1to2, match2);
	
	    addRegexToken('hmm', match3to4);
	    addRegexToken('hmmss', match5to6);
	    addRegexToken('Hmm', match3to4);
	    addRegexToken('Hmmss', match5to6);
	
	    addParseToken(['H', 'HH'], HOUR);
	    addParseToken(['a', 'A'], function (input, array, config) {
	        config._isPm = config._locale.isPM(input);
	        config._meridiem = input;
	    });
	    addParseToken(['h', 'hh'], function (input, array, config) {
	        array[HOUR] = toInt(input);
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmmss', function (input, array, config) {
	        var pos1 = input.length - 4;
	        var pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('Hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	    });
	    addParseToken('Hmmss', function (input, array, config) {
	        var pos1 = input.length - 4;
	        var pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	    });
	
	    // LOCALES
	
	    function localeIsPM (input) {
	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	        // Using charAt should be more compatible.
	        return ((input + '').toLowerCase().charAt(0) === 'p');
	    }
	
	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	    function localeMeridiem (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'pm' : 'PM';
	        } else {
	            return isLower ? 'am' : 'AM';
	        }
	    }
	
	
	    // MOMENTS
	
	    // Setting the hour should keep the time, because the user explicitly
	    // specified which hour he wants. So trying to maintain the same hour (in
	    // a new timezone) makes sense. Adding/subtracting hours does not follow
	    // this rule.
	    var getSetHour = makeGetSet('Hours', true);
	
	    var baseConfig = {
	        calendar: defaultCalendar,
	        longDateFormat: defaultLongDateFormat,
	        invalidDate: defaultInvalidDate,
	        ordinal: defaultOrdinal,
	        ordinalParse: defaultOrdinalParse,
	        relativeTime: defaultRelativeTime,
	
	        months: defaultLocaleMonths,
	        monthsShort: defaultLocaleMonthsShort,
	
	        week: defaultLocaleWeek,
	
	        weekdays: defaultLocaleWeekdays,
	        weekdaysMin: defaultLocaleWeekdaysMin,
	        weekdaysShort: defaultLocaleWeekdaysShort,
	
	        meridiemParse: defaultLocaleMeridiemParse
	    };
	
	    // internal storage for locale config files
	    var locales = {};
	    var globalLocale;
	
	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }
	
	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0, j, next, locale, split;
	
	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return null;
	    }
	
	    function loadLocale(name) {
	        var oldLocale = null;
	        // TODO: Find a better way to register and load all the locales in Node
	        if (!locales[name] && (typeof module !== 'undefined') &&
	                module && module.exports) {
	            try {
	                oldLocale = globalLocale._abbr;
	                __webpack_require__(28)("./" + name);
	                // because defineLocale currently also sets the global locale, we
	                // want to undo that for lazy loaded locales
	                locale_locales__getSetGlobalLocale(oldLocale);
	            } catch (e) { }
	        }
	        return locales[name];
	    }
	
	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    function locale_locales__getSetGlobalLocale (key, values) {
	        var data;
	        if (key) {
	            if (isUndefined(values)) {
	                data = locale_locales__getLocale(key);
	            }
	            else {
	                data = defineLocale(key, values);
	            }
	
	            if (data) {
	                // moment.duration._locale = moment._locale = data;
	                globalLocale = data;
	            }
	        }
	
	        return globalLocale._abbr;
	    }
	
	    function defineLocale (name, config) {
	        if (config !== null) {
	            var parentConfig = baseConfig;
	            config.abbr = name;
	            if (locales[name] != null) {
	                deprecateSimple('defineLocaleOverride',
	                        'use moment.updateLocale(localeName, config) to change ' +
	                        'an existing locale. moment.defineLocale(localeName, ' +
	                        'config) should only be used for creating a new locale ' +
	                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
	                parentConfig = locales[name]._config;
	            } else if (config.parentLocale != null) {
	                if (locales[config.parentLocale] != null) {
	                    parentConfig = locales[config.parentLocale]._config;
	                } else {
	                    // treat as if there is no base config
	                    deprecateSimple('parentLocaleUndefined',
	                            'specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/');
	                }
	            }
	            locales[name] = new Locale(mergeConfigs(parentConfig, config));
	
	            // backwards compat for now: also set the locale
	            locale_locales__getSetGlobalLocale(name);
	
	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    }
	
	    function updateLocale(name, config) {
	        if (config != null) {
	            var locale, parentConfig = baseConfig;
	            // MERGE
	            if (locales[name] != null) {
	                parentConfig = locales[name]._config;
	            }
	            config = mergeConfigs(parentConfig, config);
	            locale = new Locale(config);
	            locale.parentLocale = locales[name];
	            locales[name] = locale;
	
	            // backwards compat for now: also set the locale
	            locale_locales__getSetGlobalLocale(name);
	        } else {
	            // pass null for config to unupdate, useful for tests
	            if (locales[name] != null) {
	                if (locales[name].parentLocale != null) {
	                    locales[name] = locales[name].parentLocale;
	                } else if (locales[name] != null) {
	                    delete locales[name];
	                }
	            }
	        }
	        return locales[name];
	    }
	
	    // returns locale data
	    function locale_locales__getLocale (key) {
	        var locale;
	
	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }
	
	        if (!key) {
	            return globalLocale;
	        }
	
	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }
	
	        return chooseLocale(key);
	    }
	
	    function locale_locales__listLocales() {
	        return keys(locales);
	    }
	
	    function checkOverflow (m) {
	        var overflow;
	        var a = m._a;
	
	        if (a && getParsingFlags(m).overflow === -2) {
	            overflow =
	                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	                -1;
	
	            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	                overflow = DATE;
	            }
	            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	                overflow = WEEK;
	            }
	            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	                overflow = WEEKDAY;
	            }
	
	            getParsingFlags(m).overflow = overflow;
	        }
	
	        return m;
	    }
	
	    // iso 8601 regex
	    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
	    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
	
	    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
	
	    var isoDates = [
	        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	        ['YYYY-DDD', /\d{4}-\d{3}/],
	        ['YYYY-MM', /\d{4}-\d\d/, false],
	        ['YYYYYYMMDD', /[+-]\d{10}/],
	        ['YYYYMMDD', /\d{8}/],
	        // YYYYMM is NOT allowed by the standard
	        ['GGGG[W]WWE', /\d{4}W\d{3}/],
	        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	        ['YYYYDDD', /\d{7}/]
	    ];
	
	    // iso time formats and regexes
	    var isoTimes = [
	        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	        ['HH:mm', /\d\d:\d\d/],
	        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	        ['HHmmss', /\d\d\d\d\d\d/],
	        ['HHmm', /\d\d\d\d/],
	        ['HH', /\d\d/]
	    ];
	
	    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
	
	    // date from iso format
	    function configFromISO(config) {
	        var i, l,
	            string = config._i,
	            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	            allowTime, dateFormat, timeFormat, tzFormat;
	
	        if (match) {
	            getParsingFlags(config).iso = true;
	
	            for (i = 0, l = isoDates.length; i < l; i++) {
	                if (isoDates[i][1].exec(match[1])) {
	                    dateFormat = isoDates[i][0];
	                    allowTime = isoDates[i][2] !== false;
	                    break;
	                }
	            }
	            if (dateFormat == null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[3]) {
	                for (i = 0, l = isoTimes.length; i < l; i++) {
	                    if (isoTimes[i][1].exec(match[3])) {
	                        // match[2] should be 'T' or space
	                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                        break;
	                    }
	                }
	                if (timeFormat == null) {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            if (!allowTime && timeFormat != null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[4]) {
	                if (tzRegex.exec(match[4])) {
	                    tzFormat = 'Z';
	                } else {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	            configFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }
	
	    // date from iso format or fallback
	    function configFromString(config) {
	        var matched = aspNetJsonRegex.exec(config._i);
	
	        if (matched !== null) {
	            config._d = new Date(+matched[1]);
	            return;
	        }
	
	        configFromISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	            utils_hooks__hooks.createFromInputFallback(config);
	        }
	    }
	
	    utils_hooks__hooks.createFromInputFallback = deprecate(
	        'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +
	        'which is not reliable across all browsers and versions. Non ISO date formats are ' +
	        'discouraged and will be removed in an upcoming major release. Please refer to ' +
	        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	        function (config) {
	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	        }
	    );
	
	    // Pick the first defined of two or three arguments.
	    function defaults(a, b, c) {
	        if (a != null) {
	            return a;
	        }
	        if (b != null) {
	            return b;
	        }
	        return c;
	    }
	
	    function currentDateArray(config) {
	        // hooks is actually the exported moment object
	        var nowValue = new Date(utils_hooks__hooks.now());
	        if (config._useUTC) {
	            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	        }
	        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	    }
	
	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function configFromArray (config) {
	        var i, date, input = [], currentDate, yearToUse;
	
	        if (config._d) {
	            return;
	        }
	
	        currentDate = currentDateArray(config);
	
	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }
	
	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear) {
	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
	
	            if (config._dayOfYear > daysInYear(yearToUse)) {
	                getParsingFlags(config)._overflowDayOfYear = true;
	            }
	
	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }
	
	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }
	
	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	        }
	
	        // Check for 24:00:00.000
	        if (config._a[HOUR] === 24 &&
	                config._a[MINUTE] === 0 &&
	                config._a[SECOND] === 0 &&
	                config._a[MILLISECOND] === 0) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }
	
	        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }
	
	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }
	    }
	
	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
	
	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;
	
	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
	            week = defaults(w.W, 1);
	            weekday = defaults(w.E, 1);
	            if (weekday < 1 || weekday > 7) {
	                weekdayOverflow = true;
	            }
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;
	
	            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
	            week = defaults(w.w, 1);
	
	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < 0 || weekday > 6) {
	                    weekdayOverflow = true;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from begining of week
	                weekday = w.e + dow;
	                if (w.e < 0 || w.e > 6) {
	                    weekdayOverflow = true;
	                }
	            } else {
	                // default to begining of week
	                weekday = dow;
	            }
	        }
	        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	            getParsingFlags(config)._overflowWeeks = true;
	        } else if (weekdayOverflow != null) {
	            getParsingFlags(config)._overflowWeekday = true;
	        } else {
	            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	            config._a[YEAR] = temp.year;
	            config._dayOfYear = temp.dayOfYear;
	        }
	    }
	
	    // constant that refers to the ISO standard
	    utils_hooks__hooks.ISO_8601 = function () {};
	
	    // date from string and format string
	    function configFromStringAndFormat(config) {
	        // TODO: Move this to another part of the creation flow to prevent circular deps
	        if (config._f === utils_hooks__hooks.ISO_8601) {
	            configFromISO(config);
	            return;
	        }
	
	        config._a = [];
	        getParsingFlags(config).empty = true;
	
	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i, parsedInput, tokens, token, skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0;
	
	        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
	
	        for (i = 0; i < tokens.length; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	            // console.log('token', token, 'parsedInput', parsedInput,
	            //         'regex', getParseRegexForToken(token, config));
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    getParsingFlags(config).unusedInput.push(skipped);
	                }
	                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    getParsingFlags(config).empty = false;
	                }
	                else {
	                    getParsingFlags(config).unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            }
	            else if (config._strict && !parsedInput) {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	        }
	
	        // add remaining unparsed input length to the string
	        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            getParsingFlags(config).unusedInput.push(string);
	        }
	
	        // clear _12h flag if hour is <= 12
	        if (config._a[HOUR] <= 12 &&
	            getParsingFlags(config).bigHour === true &&
	            config._a[HOUR] > 0) {
	            getParsingFlags(config).bigHour = undefined;
	        }
	
	        getParsingFlags(config).parsedDateParts = config._a.slice(0);
	        getParsingFlags(config).meridiem = config._meridiem;
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
	
	        configFromArray(config);
	        checkOverflow(config);
	    }
	
	
	    function meridiemFixWrap (locale, hour, meridiem) {
	        var isPm;
	
	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // this is not supposed to happen
	            return hour;
	        }
	    }
	
	    // date from string and array of format strings
	    function configFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,
	
	            scoreToBeat,
	            i,
	            currentScore;
	
	        if (config._f.length === 0) {
	            getParsingFlags(config).invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }
	
	        for (i = 0; i < config._f.length; i++) {
	            currentScore = 0;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._f = config._f[i];
	            configFromStringAndFormat(tempConfig);
	
	            if (!valid__isValid(tempConfig)) {
	                continue;
	            }
	
	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += getParsingFlags(tempConfig).charsLeftOver;
	
	            //or tokens
	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
	
	            getParsingFlags(tempConfig).score = currentScore;
	
	            if (scoreToBeat == null || currentScore < scoreToBeat) {
	                scoreToBeat = currentScore;
	                bestMoment = tempConfig;
	            }
	        }
	
	        extend(config, bestMoment || tempConfig);
	    }
	
	    function configFromObject(config) {
	        if (config._d) {
	            return;
	        }
	
	        var i = normalizeObjectUnits(config._i);
	        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	            return obj && parseInt(obj, 10);
	        });
	
	        configFromArray(config);
	    }
	
	    function createFromConfig (config) {
	        var res = new Moment(checkOverflow(prepareConfig(config)));
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }
	
	        return res;
	    }
	
	    function prepareConfig (config) {
	        var input = config._i,
	            format = config._f;
	
	        config._locale = config._locale || locale_locales__getLocale(config._l);
	
	        if (input === null || (format === undefined && input === '')) {
	            return valid__createInvalid({nullInput: true});
	        }
	
	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }
	
	        if (isMoment(input)) {
	            return new Moment(checkOverflow(input));
	        } else if (isArray(format)) {
	            configFromStringAndArray(config);
	        } else if (isDate(input)) {
	            config._d = input;
	        } else if (format) {
	            configFromStringAndFormat(config);
	        }  else {
	            configFromInput(config);
	        }
	
	        if (!valid__isValid(config)) {
	            config._d = null;
	        }
	
	        return config;
	    }
	
	    function configFromInput(config) {
	        var input = config._i;
	        if (input === undefined) {
	            config._d = new Date(utils_hooks__hooks.now());
	        } else if (isDate(input)) {
	            config._d = new Date(input.valueOf());
	        } else if (typeof input === 'string') {
	            configFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            configFromArray(config);
	        } else if (typeof(input) === 'object') {
	            configFromObject(config);
	        } else if (typeof(input) === 'number') {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            utils_hooks__hooks.createFromInputFallback(config);
	        }
	    }
	
	    function createLocalOrUTC (input, format, locale, strict, isUTC) {
	        var c = {};
	
	        if (typeof(locale) === 'boolean') {
	            strict = locale;
	            locale = undefined;
	        }
	
	        if ((isObject(input) && isObjectEmpty(input)) ||
	                (isArray(input) && input.length === 0)) {
	            input = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c._isAMomentObject = true;
	        c._useUTC = c._isUTC = isUTC;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;
	
	        return createFromConfig(c);
	    }
	
	    function local__createLocal (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, false);
	    }
	
	    var prototypeMin = deprecate(
	        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	        function () {
	            var other = local__createLocal.apply(null, arguments);
	            if (this.isValid() && other.isValid()) {
	                return other < this ? this : other;
	            } else {
	                return valid__createInvalid();
	            }
	        }
	    );
	
	    var prototypeMax = deprecate(
	        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	        function () {
	            var other = local__createLocal.apply(null, arguments);
	            if (this.isValid() && other.isValid()) {
	                return other > this ? this : other;
	            } else {
	                return valid__createInvalid();
	            }
	        }
	    );
	
	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return local__createLocal();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (!moments[i].isValid() || moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }
	
	    // TODO: Use [].sort instead?
	    function min () {
	        var args = [].slice.call(arguments, 0);
	
	        return pickBy('isBefore', args);
	    }
	
	    function max () {
	        var args = [].slice.call(arguments, 0);
	
	        return pickBy('isAfter', args);
	    }
	
	    var now = function () {
	        return Date.now ? Date.now() : +(new Date());
	    };
	
	    function Duration (duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;
	
	        // representation for dateAddRemove
	        this._milliseconds = +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days +
	            weeks * 7;
	        // It is impossible translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months +
	            quarters * 3 +
	            years * 12;
	
	        this._data = {};
	
	        this._locale = locale_locales__getLocale();
	
	        this._bubble();
	    }
	
	    function isDuration (obj) {
	        return obj instanceof Duration;
	    }
	
	    function absRound (number) {
	        if (number < 0) {
	            return Math.round(-1 * number) * -1;
	        } else {
	            return Math.round(number);
	        }
	    }
	
	    // FORMATTING
	
	    function offset (token, separator) {
	        addFormatToken(token, 0, 0, function () {
	            var offset = this.utcOffset();
	            var sign = '+';
	            if (offset < 0) {
	                offset = -offset;
	                sign = '-';
	            }
	            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	        });
	    }
	
	    offset('Z', ':');
	    offset('ZZ', '');
	
	    // PARSING
	
	    addRegexToken('Z',  matchShortOffset);
	    addRegexToken('ZZ', matchShortOffset);
	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
	        config._useUTC = true;
	        config._tzm = offsetFromString(matchShortOffset, input);
	    });
	
	    // HELPERS
	
	    // timezone chunker
	    // '+10:00' > ['10',  '00']
	    // '-1530'  > ['-15', '30']
	    var chunkOffset = /([\+\-]|\d\d)/gi;
	
	    function offsetFromString(matcher, string) {
	        var matches = ((string || '').match(matcher) || []);
	        var chunk   = matches[matches.length - 1] || [];
	        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	        var minutes = +(parts[1] * 60) + toInt(parts[2]);
	
	        return parts[0] === '+' ? minutes : -minutes;
	    }
	
	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function cloneWithOffset(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff = (isMoment(input) || isDate(input) ? input.valueOf() : local__createLocal(input).valueOf()) - res.valueOf();
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(res._d.valueOf() + diff);
	            utils_hooks__hooks.updateOffset(res, false);
	            return res;
	        } else {
	            return local__createLocal(input).local();
	        }
	    }
	
	    function getDateOffset (m) {
	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	        // https://github.com/moment/moment/pull/1871
	        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	    }
	
	    // HOOKS
	
	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    utils_hooks__hooks.updateOffset = function () {};
	
	    // MOMENTS
	
	    // keepLocalTime = true means only change the timezone, without
	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	    // +0200, so we adjust the time as needed, to be valid.
	    //
	    // Keeping the time actually adds/subtracts (one hour)
	    // from the actual represented time. That is why we call updateOffset
	    // a second time. In case it wants us to change the offset again
	    // _changeInProgress == true case, then we have to adjust, because
	    // there is no such time in the given timezone.
	    function getSetOffset (input, keepLocalTime) {
	        var offset = this._offset || 0,
	            localAdjust;
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        if (input != null) {
	            if (typeof input === 'string') {
	                input = offsetFromString(matchShortOffset, input);
	            } else if (Math.abs(input) < 16) {
	                input = input * 60;
	            }
	            if (!this._isUTC && keepLocalTime) {
	                localAdjust = getDateOffset(this);
	            }
	            this._offset = input;
	            this._isUTC = true;
	            if (localAdjust != null) {
	                this.add(localAdjust, 'm');
	            }
	            if (offset !== input) {
	                if (!keepLocalTime || this._changeInProgress) {
	                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
	                } else if (!this._changeInProgress) {
	                    this._changeInProgress = true;
	                    utils_hooks__hooks.updateOffset(this, true);
	                    this._changeInProgress = null;
	                }
	            }
	            return this;
	        } else {
	            return this._isUTC ? offset : getDateOffset(this);
	        }
	    }
	
	    function getSetZone (input, keepLocalTime) {
	        if (input != null) {
	            if (typeof input !== 'string') {
	                input = -input;
	            }
	
	            this.utcOffset(input, keepLocalTime);
	
	            return this;
	        } else {
	            return -this.utcOffset();
	        }
	    }
	
	    function setOffsetToUTC (keepLocalTime) {
	        return this.utcOffset(0, keepLocalTime);
	    }
	
	    function setOffsetToLocal (keepLocalTime) {
	        if (this._isUTC) {
	            this.utcOffset(0, keepLocalTime);
	            this._isUTC = false;
	
	            if (keepLocalTime) {
	                this.subtract(getDateOffset(this), 'm');
	            }
	        }
	        return this;
	    }
	
	    function setOffsetToParsedOffset () {
	        if (this._tzm) {
	            this.utcOffset(this._tzm);
	        } else if (typeof this._i === 'string') {
	            var tZone = offsetFromString(matchOffset, this._i);
	
	            if (tZone === 0) {
	                this.utcOffset(0, true);
	            } else {
	                this.utcOffset(offsetFromString(matchOffset, this._i));
	            }
	        }
	        return this;
	    }
	
	    function hasAlignedHourOffset (input) {
	        if (!this.isValid()) {
	            return false;
	        }
	        input = input ? local__createLocal(input).utcOffset() : 0;
	
	        return (this.utcOffset() - input) % 60 === 0;
	    }
	
	    function isDaylightSavingTime () {
	        return (
	            this.utcOffset() > this.clone().month(0).utcOffset() ||
	            this.utcOffset() > this.clone().month(5).utcOffset()
	        );
	    }
	
	    function isDaylightSavingTimeShifted () {
	        if (!isUndefined(this._isDSTShifted)) {
	            return this._isDSTShifted;
	        }
	
	        var c = {};
	
	        copyConfig(c, this);
	        c = prepareConfig(c);
	
	        if (c._a) {
	            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
	            this._isDSTShifted = this.isValid() &&
	                compareArrays(c._a, other.toArray()) > 0;
	        } else {
	            this._isDSTShifted = false;
	        }
	
	        return this._isDSTShifted;
	    }
	
	    function isLocal () {
	        return this.isValid() ? !this._isUTC : false;
	    }
	
	    function isUtcOffset () {
	        return this.isValid() ? this._isUTC : false;
	    }
	
	    function isUtc () {
	        return this.isValid() ? this._isUTC && this._offset === 0 : false;
	    }
	
	    // ASP.NET json date format regex
	    var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
	
	    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	    // and further modified to allow for strings containing both week and day
	    var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;
	
	    function create__createDuration (input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            diffRes;
	
	        if (isDuration(input)) {
	            duration = {
	                ms : input._milliseconds,
	                d  : input._days,
	                M  : input._months
	            };
	        } else if (typeof input === 'number') {
	            duration = {};
	            if (key) {
	                duration[key] = input;
	            } else {
	                duration.milliseconds = input;
	            }
	        } else if (!!(match = aspNetRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y  : 0,
	                d  : toInt(match[DATE])                         * sign,
	                h  : toInt(match[HOUR])                         * sign,
	                m  : toInt(match[MINUTE])                       * sign,
	                s  : toInt(match[SECOND])                       * sign,
	                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
	            };
	        } else if (!!(match = isoRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y : parseIso(match[2], sign),
	                M : parseIso(match[3], sign),
	                w : parseIso(match[4], sign),
	                d : parseIso(match[5], sign),
	                h : parseIso(match[6], sign),
	                m : parseIso(match[7], sign),
	                s : parseIso(match[8], sign)
	            };
	        } else if (duration == null) {// checks for null or undefined
	            duration = {};
	        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));
	
	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }
	
	        ret = new Duration(duration);
	
	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }
	
	        return ret;
	    }
	
	    create__createDuration.fn = Duration.prototype;
	
	    function parseIso (inp, sign) {
	        // We'd normally use ~~inp for this, but unfortunately it also
	        // converts floats to ints.
	        // inp may be undefined, so careful calling replace on it.
	        var res = inp && parseFloat(inp.replace(',', '.'));
	        // apply sign while we're at it
	        return (isNaN(res) ? 0 : res) * sign;
	    }
	
	    function positiveMomentsDifference(base, other) {
	        var res = {milliseconds: 0, months: 0};
	
	        res.months = other.month() - base.month() +
	            (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }
	
	        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));
	
	        return res;
	    }
	
	    function momentsDifference(base, other) {
	        var res;
	        if (!(base.isValid() && other.isValid())) {
	            return {milliseconds: 0, months: 0};
	        }
	
	        other = cloneWithOffset(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }
	
	        return res;
	    }
	
	    // TODO: remove 'name' arg after deprecation is removed
	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
	                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
	                tmp = val; val = period; period = tmp;
	            }
	
	            val = typeof val === 'string' ? +val : val;
	            dur = create__createDuration(val, period);
	            add_subtract__addSubtract(this, dur, direction);
	            return this;
	        };
	    }
	
	    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = absRound(duration._days),
	            months = absRound(duration._months);
	
	        if (!mom.isValid()) {
	            // No op
	            return;
	        }
	
	        updateOffset = updateOffset == null ? true : updateOffset;
	
	        if (milliseconds) {
	            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	        }
	        if (days) {
	            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
	        }
	        if (months) {
	            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
	        }
	        if (updateOffset) {
	            utils_hooks__hooks.updateOffset(mom, days || months);
	        }
	    }
	
	    var add_subtract__add      = createAdder(1, 'add');
	    var add_subtract__subtract = createAdder(-1, 'subtract');
	
	    function getCalendarFormat(myMoment, now) {
	        var diff = myMoment.diff(now, 'days', true);
	        return diff < -6 ? 'sameElse' :
	                diff < -1 ? 'lastWeek' :
	                diff < 0 ? 'lastDay' :
	                diff < 1 ? 'sameDay' :
	                diff < 2 ? 'nextDay' :
	                diff < 7 ? 'nextWeek' : 'sameElse';
	    }
	
	    function moment_calendar__calendar (time, formats) {
	        // We want to compare the start of today, vs this.
	        // Getting start-of-today depends on whether we're local/utc/offset or not.
	        var now = time || local__createLocal(),
	            sod = cloneWithOffset(now, this).startOf('day'),
	            format = utils_hooks__hooks.calendarFormat(this, sod) || 'sameElse';
	
	        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
	
	        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));
	    }
	
	    function clone () {
	        return new Moment(this);
	    }
	
	    function isAfter (input, units) {
	        var localInput = isMoment(input) ? input : local__createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	        if (units === 'millisecond') {
	            return this.valueOf() > localInput.valueOf();
	        } else {
	            return localInput.valueOf() < this.clone().startOf(units).valueOf();
	        }
	    }
	
	    function isBefore (input, units) {
	        var localInput = isMoment(input) ? input : local__createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	        if (units === 'millisecond') {
	            return this.valueOf() < localInput.valueOf();
	        } else {
	            return this.clone().endOf(units).valueOf() < localInput.valueOf();
	        }
	    }
	
	    function isBetween (from, to, units, inclusivity) {
	        inclusivity = inclusivity || '()';
	        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
	            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
	    }
	
	    function isSame (input, units) {
	        var localInput = isMoment(input) ? input : local__createLocal(input),
	            inputMs;
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units || 'millisecond');
	        if (units === 'millisecond') {
	            return this.valueOf() === localInput.valueOf();
	        } else {
	            inputMs = localInput.valueOf();
	            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
	        }
	    }
	
	    function isSameOrAfter (input, units) {
	        return this.isSame(input, units) || this.isAfter(input,units);
	    }
	
	    function isSameOrBefore (input, units) {
	        return this.isSame(input, units) || this.isBefore(input,units);
	    }
	
	    function diff (input, units, asFloat) {
	        var that,
	            zoneDelta,
	            delta, output;
	
	        if (!this.isValid()) {
	            return NaN;
	        }
	
	        that = cloneWithOffset(input, this);
	
	        if (!that.isValid()) {
	            return NaN;
	        }
	
	        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
	
	        units = normalizeUnits(units);
	
	        if (units === 'year' || units === 'month' || units === 'quarter') {
	            output = monthDiff(this, that);
	            if (units === 'quarter') {
	                output = output / 3;
	            } else if (units === 'year') {
	                output = output / 12;
	            }
	        } else {
	            delta = this - that;
	            output = units === 'second' ? delta / 1e3 : // 1000
	                units === 'minute' ? delta / 6e4 : // 1000 * 60
	                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
	                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
	                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
	                delta;
	        }
	        return asFloat ? output : absFloor(output);
	    }
	
	    function monthDiff (a, b) {
	        // difference in months
	        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	            // b is in (anchor - 1 month, anchor + 1 month)
	            anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2, adjust;
	
	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }
	
	        //check for negative zero, return zero if negative zero
	        return -(wholeMonthDiff + adjust) || 0;
	    }
	
	    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	    utils_hooks__hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
	
	    function toString () {
	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	    }
	
	    function moment_format__toISOString () {
	        var m = this.clone().utc();
	        if (0 < m.year() && m.year() <= 9999) {
	            if (isFunction(Date.prototype.toISOString)) {
	                // native implementation is ~50x faster, use it when we can
	                return this.toDate().toISOString();
	            } else {
	                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	            }
	        } else {
	            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	        }
	    }
	
	    function format (inputString) {
	        if (!inputString) {
	            inputString = this.isUtc() ? utils_hooks__hooks.defaultFormatUtc : utils_hooks__hooks.defaultFormat;
	        }
	        var output = formatMoment(this, inputString);
	        return this.localeData().postformat(output);
	    }
	
	    function from (time, withoutSuffix) {
	        if (this.isValid() &&
	                ((isMoment(time) && time.isValid()) ||
	                 local__createLocal(time).isValid())) {
	            return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }
	
	    function fromNow (withoutSuffix) {
	        return this.from(local__createLocal(), withoutSuffix);
	    }
	
	    function to (time, withoutSuffix) {
	        if (this.isValid() &&
	                ((isMoment(time) && time.isValid()) ||
	                 local__createLocal(time).isValid())) {
	            return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }
	
	    function toNow (withoutSuffix) {
	        return this.to(local__createLocal(), withoutSuffix);
	    }
	
	    // If passed a locale key, it will set the locale for this
	    // instance.  Otherwise, it will return the locale configuration
	    // variables for this instance.
	    function locale (key) {
	        var newLocaleData;
	
	        if (key === undefined) {
	            return this._locale._abbr;
	        } else {
	            newLocaleData = locale_locales__getLocale(key);
	            if (newLocaleData != null) {
	                this._locale = newLocaleData;
	            }
	            return this;
	        }
	    }
	
	    var lang = deprecate(
	        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	        function (key) {
	            if (key === undefined) {
	                return this.localeData();
	            } else {
	                return this.locale(key);
	            }
	        }
	    );
	
	    function localeData () {
	        return this._locale;
	    }
	
	    function startOf (units) {
	        units = normalizeUnits(units);
	        // the following switch intentionally omits break keywords
	        // to utilize falling through the cases.
	        switch (units) {
	            case 'year':
	                this.month(0);
	                /* falls through */
	            case 'quarter':
	            case 'month':
	                this.date(1);
	                /* falls through */
	            case 'week':
	            case 'isoWeek':
	            case 'day':
	            case 'date':
	                this.hours(0);
	                /* falls through */
	            case 'hour':
	                this.minutes(0);
	                /* falls through */
	            case 'minute':
	                this.seconds(0);
	                /* falls through */
	            case 'second':
	                this.milliseconds(0);
	        }
	
	        // weeks are a special case
	        if (units === 'week') {
	            this.weekday(0);
	        }
	        if (units === 'isoWeek') {
	            this.isoWeekday(1);
	        }
	
	        // quarters are also special
	        if (units === 'quarter') {
	            this.month(Math.floor(this.month() / 3) * 3);
	        }
	
	        return this;
	    }
	
	    function endOf (units) {
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond') {
	            return this;
	        }
	
	        // 'date' is an alias for 'day', so it should be considered as such.
	        if (units === 'date') {
	            units = 'day';
	        }
	
	        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	    }
	
	    function to_type__valueOf () {
	        return this._d.valueOf() - ((this._offset || 0) * 60000);
	    }
	
	    function unix () {
	        return Math.floor(this.valueOf() / 1000);
	    }
	
	    function toDate () {
	        return new Date(this.valueOf());
	    }
	
	    function toArray () {
	        var m = this;
	        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	    }
	
	    function toObject () {
	        var m = this;
	        return {
	            years: m.year(),
	            months: m.month(),
	            date: m.date(),
	            hours: m.hours(),
	            minutes: m.minutes(),
	            seconds: m.seconds(),
	            milliseconds: m.milliseconds()
	        };
	    }
	
	    function toJSON () {
	        // new Date(NaN).toJSON() === null
	        return this.isValid() ? this.toISOString() : null;
	    }
	
	    function moment_valid__isValid () {
	        return valid__isValid(this);
	    }
	
	    function parsingFlags () {
	        return extend({}, getParsingFlags(this));
	    }
	
	    function invalidAt () {
	        return getParsingFlags(this).overflow;
	    }
	
	    function creationData() {
	        return {
	            input: this._i,
	            format: this._f,
	            locale: this._locale,
	            isUTC: this._isUTC,
	            strict: this._strict
	        };
	    }
	
	    // FORMATTING
	
	    addFormatToken(0, ['gg', 2], 0, function () {
	        return this.weekYear() % 100;
	    });
	
	    addFormatToken(0, ['GG', 2], 0, function () {
	        return this.isoWeekYear() % 100;
	    });
	
	    function addWeekYearFormatToken (token, getter) {
	        addFormatToken(0, [token, token.length], 0, getter);
	    }
	
	    addWeekYearFormatToken('gggg',     'weekYear');
	    addWeekYearFormatToken('ggggg',    'weekYear');
	    addWeekYearFormatToken('GGGG',  'isoWeekYear');
	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
	
	    // ALIASES
	
	    addUnitAlias('weekYear', 'gg');
	    addUnitAlias('isoWeekYear', 'GG');
	
	    // PRIORITY
	
	    addUnitPriority('weekYear', 1);
	    addUnitPriority('isoWeekYear', 1);
	
	
	    // PARSING
	
	    addRegexToken('G',      matchSigned);
	    addRegexToken('g',      matchSigned);
	    addRegexToken('GG',     match1to2, match2);
	    addRegexToken('gg',     match1to2, match2);
	    addRegexToken('GGGG',   match1to4, match4);
	    addRegexToken('gggg',   match1to4, match4);
	    addRegexToken('GGGGG',  match1to6, match6);
	    addRegexToken('ggggg',  match1to6, match6);
	
	    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	        week[token.substr(0, 2)] = toInt(input);
	    });
	
	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
	    });
	
	    // MOMENTS
	
	    function getSetWeekYear (input) {
	        return getSetWeekYearHelper.call(this,
	                input,
	                this.week(),
	                this.weekday(),
	                this.localeData()._week.dow,
	                this.localeData()._week.doy);
	    }
	
	    function getSetISOWeekYear (input) {
	        return getSetWeekYearHelper.call(this,
	                input, this.isoWeek(), this.isoWeekday(), 1, 4);
	    }
	
	    function getISOWeeksInYear () {
	        return weeksInYear(this.year(), 1, 4);
	    }
	
	    function getWeeksInYear () {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	    }
	
	    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	        var weeksTarget;
	        if (input == null) {
	            return weekOfYear(this, dow, doy).year;
	        } else {
	            weeksTarget = weeksInYear(input, dow, doy);
	            if (week > weeksTarget) {
	                week = weeksTarget;
	            }
	            return setWeekAll.call(this, input, week, weekday, dow, doy);
	        }
	    }
	
	    function setWeekAll(weekYear, week, weekday, dow, doy) {
	        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
	
	        this.year(date.getUTCFullYear());
	        this.month(date.getUTCMonth());
	        this.date(date.getUTCDate());
	        return this;
	    }
	
	    // FORMATTING
	
	    addFormatToken('Q', 0, 'Qo', 'quarter');
	
	    // ALIASES
	
	    addUnitAlias('quarter', 'Q');
	
	    // PRIORITY
	
	    addUnitPriority('quarter', 7);
	
	    // PARSING
	
	    addRegexToken('Q', match1);
	    addParseToken('Q', function (input, array) {
	        array[MONTH] = (toInt(input) - 1) * 3;
	    });
	
	    // MOMENTS
	
	    function getSetQuarter (input) {
	        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	    }
	
	    // FORMATTING
	
	    addFormatToken('D', ['DD', 2], 'Do', 'date');
	
	    // ALIASES
	
	    addUnitAlias('date', 'D');
	
	    // PRIOROITY
	    addUnitPriority('date', 9);
	
	    // PARSING
	
	    addRegexToken('D',  match1to2);
	    addRegexToken('DD', match1to2, match2);
	    addRegexToken('Do', function (isStrict, locale) {
	        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
	    });
	
	    addParseToken(['D', 'DD'], DATE);
	    addParseToken('Do', function (input, array) {
	        array[DATE] = toInt(input.match(match1to2)[0], 10);
	    });
	
	    // MOMENTS
	
	    var getSetDayOfMonth = makeGetSet('Date', true);
	
	    // FORMATTING
	
	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
	
	    // ALIASES
	
	    addUnitAlias('dayOfYear', 'DDD');
	
	    // PRIORITY
	    addUnitPriority('dayOfYear', 4);
	
	    // PARSING
	
	    addRegexToken('DDD',  match1to3);
	    addRegexToken('DDDD', match3);
	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	        config._dayOfYear = toInt(input);
	    });
	
	    // HELPERS
	
	    // MOMENTS
	
	    function getSetDayOfYear (input) {
	        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	    }
	
	    // FORMATTING
	
	    addFormatToken('m', ['mm', 2], 0, 'minute');
	
	    // ALIASES
	
	    addUnitAlias('minute', 'm');
	
	    // PRIORITY
	
	    addUnitPriority('minute', 14);
	
	    // PARSING
	
	    addRegexToken('m',  match1to2);
	    addRegexToken('mm', match1to2, match2);
	    addParseToken(['m', 'mm'], MINUTE);
	
	    // MOMENTS
	
	    var getSetMinute = makeGetSet('Minutes', false);
	
	    // FORMATTING
	
	    addFormatToken('s', ['ss', 2], 0, 'second');
	
	    // ALIASES
	
	    addUnitAlias('second', 's');
	
	    // PRIORITY
	
	    addUnitPriority('second', 15);
	
	    // PARSING
	
	    addRegexToken('s',  match1to2);
	    addRegexToken('ss', match1to2, match2);
	    addParseToken(['s', 'ss'], SECOND);
	
	    // MOMENTS
	
	    var getSetSecond = makeGetSet('Seconds', false);
	
	    // FORMATTING
	
	    addFormatToken('S', 0, 0, function () {
	        return ~~(this.millisecond() / 100);
	    });
	
	    addFormatToken(0, ['SS', 2], 0, function () {
	        return ~~(this.millisecond() / 10);
	    });
	
	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	    addFormatToken(0, ['SSSS', 4], 0, function () {
	        return this.millisecond() * 10;
	    });
	    addFormatToken(0, ['SSSSS', 5], 0, function () {
	        return this.millisecond() * 100;
	    });
	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
	        return this.millisecond() * 1000;
	    });
	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	        return this.millisecond() * 10000;
	    });
	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	        return this.millisecond() * 100000;
	    });
	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	        return this.millisecond() * 1000000;
	    });
	
	
	    // ALIASES
	
	    addUnitAlias('millisecond', 'ms');
	
	    // PRIORITY
	
	    addUnitPriority('millisecond', 16);
	
	    // PARSING
	
	    addRegexToken('S',    match1to3, match1);
	    addRegexToken('SS',   match1to3, match2);
	    addRegexToken('SSS',  match1to3, match3);
	
	    var token;
	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
	        addRegexToken(token, matchUnsigned);
	    }
	
	    function parseMs(input, array) {
	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
	    }
	
	    for (token = 'S'; token.length <= 9; token += 'S') {
	        addParseToken(token, parseMs);
	    }
	    // MOMENTS
	
	    var getSetMillisecond = makeGetSet('Milliseconds', false);
	
	    // FORMATTING
	
	    addFormatToken('z',  0, 0, 'zoneAbbr');
	    addFormatToken('zz', 0, 0, 'zoneName');
	
	    // MOMENTS
	
	    function getZoneAbbr () {
	        return this._isUTC ? 'UTC' : '';
	    }
	
	    function getZoneName () {
	        return this._isUTC ? 'Coordinated Universal Time' : '';
	    }
	
	    var momentPrototype__proto = Moment.prototype;
	
	    momentPrototype__proto.add               = add_subtract__add;
	    momentPrototype__proto.calendar          = moment_calendar__calendar;
	    momentPrototype__proto.clone             = clone;
	    momentPrototype__proto.diff              = diff;
	    momentPrototype__proto.endOf             = endOf;
	    momentPrototype__proto.format            = format;
	    momentPrototype__proto.from              = from;
	    momentPrototype__proto.fromNow           = fromNow;
	    momentPrototype__proto.to                = to;
	    momentPrototype__proto.toNow             = toNow;
	    momentPrototype__proto.get               = stringGet;
	    momentPrototype__proto.invalidAt         = invalidAt;
	    momentPrototype__proto.isAfter           = isAfter;
	    momentPrototype__proto.isBefore          = isBefore;
	    momentPrototype__proto.isBetween         = isBetween;
	    momentPrototype__proto.isSame            = isSame;
	    momentPrototype__proto.isSameOrAfter     = isSameOrAfter;
	    momentPrototype__proto.isSameOrBefore    = isSameOrBefore;
	    momentPrototype__proto.isValid           = moment_valid__isValid;
	    momentPrototype__proto.lang              = lang;
	    momentPrototype__proto.locale            = locale;
	    momentPrototype__proto.localeData        = localeData;
	    momentPrototype__proto.max               = prototypeMax;
	    momentPrototype__proto.min               = prototypeMin;
	    momentPrototype__proto.parsingFlags      = parsingFlags;
	    momentPrototype__proto.set               = stringSet;
	    momentPrototype__proto.startOf           = startOf;
	    momentPrototype__proto.subtract          = add_subtract__subtract;
	    momentPrototype__proto.toArray           = toArray;
	    momentPrototype__proto.toObject          = toObject;
	    momentPrototype__proto.toDate            = toDate;
	    momentPrototype__proto.toISOString       = moment_format__toISOString;
	    momentPrototype__proto.toJSON            = toJSON;
	    momentPrototype__proto.toString          = toString;
	    momentPrototype__proto.unix              = unix;
	    momentPrototype__proto.valueOf           = to_type__valueOf;
	    momentPrototype__proto.creationData      = creationData;
	
	    // Year
	    momentPrototype__proto.year       = getSetYear;
	    momentPrototype__proto.isLeapYear = getIsLeapYear;
	
	    // Week Year
	    momentPrototype__proto.weekYear    = getSetWeekYear;
	    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;
	
	    // Quarter
	    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;
	
	    // Month
	    momentPrototype__proto.month       = getSetMonth;
	    momentPrototype__proto.daysInMonth = getDaysInMonth;
	
	    // Week
	    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
	    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
	    momentPrototype__proto.weeksInYear    = getWeeksInYear;
	    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;
	
	    // Day
	    momentPrototype__proto.date       = getSetDayOfMonth;
	    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
	    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
	    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
	    momentPrototype__proto.dayOfYear  = getSetDayOfYear;
	
	    // Hour
	    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;
	
	    // Minute
	    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;
	
	    // Second
	    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;
	
	    // Millisecond
	    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;
	
	    // Offset
	    momentPrototype__proto.utcOffset            = getSetOffset;
	    momentPrototype__proto.utc                  = setOffsetToUTC;
	    momentPrototype__proto.local                = setOffsetToLocal;
	    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
	    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
	    momentPrototype__proto.isDST                = isDaylightSavingTime;
	    momentPrototype__proto.isLocal              = isLocal;
	    momentPrototype__proto.isUtcOffset          = isUtcOffset;
	    momentPrototype__proto.isUtc                = isUtc;
	    momentPrototype__proto.isUTC                = isUtc;
	
	    // Timezone
	    momentPrototype__proto.zoneAbbr = getZoneAbbr;
	    momentPrototype__proto.zoneName = getZoneName;
	
	    // Deprecations
	    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
	    momentPrototype__proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
	
	    var momentPrototype = momentPrototype__proto;
	
	    function moment__createUnix (input) {
	        return local__createLocal(input * 1000);
	    }
	
	    function moment__createInZone () {
	        return local__createLocal.apply(null, arguments).parseZone();
	    }
	
	    function preParsePostFormat (string) {
	        return string;
	    }
	
	    var prototype__proto = Locale.prototype;
	
	    prototype__proto.calendar        = locale_calendar__calendar;
	    prototype__proto.longDateFormat  = longDateFormat;
	    prototype__proto.invalidDate     = invalidDate;
	    prototype__proto.ordinal         = ordinal;
	    prototype__proto.preparse        = preParsePostFormat;
	    prototype__proto.postformat      = preParsePostFormat;
	    prototype__proto.relativeTime    = relative__relativeTime;
	    prototype__proto.pastFuture      = pastFuture;
	    prototype__proto.set             = locale_set__set;
	
	    // Month
	    prototype__proto.months            =        localeMonths;
	    prototype__proto.monthsShort       =        localeMonthsShort;
	    prototype__proto.monthsParse       =        localeMonthsParse;
	    prototype__proto.monthsRegex       = monthsRegex;
	    prototype__proto.monthsShortRegex  = monthsShortRegex;
	
	    // Week
	    prototype__proto.week = localeWeek;
	    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
	    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;
	
	    // Day of Week
	    prototype__proto.weekdays       =        localeWeekdays;
	    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
	    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
	    prototype__proto.weekdaysParse  =        localeWeekdaysParse;
	
	    prototype__proto.weekdaysRegex       =        weekdaysRegex;
	    prototype__proto.weekdaysShortRegex  =        weekdaysShortRegex;
	    prototype__proto.weekdaysMinRegex    =        weekdaysMinRegex;
	
	    // Hours
	    prototype__proto.isPM = localeIsPM;
	    prototype__proto.meridiem = localeMeridiem;
	
	    function lists__get (format, index, field, setter) {
	        var locale = locale_locales__getLocale();
	        var utc = create_utc__createUTC().set(setter, index);
	        return locale[field](utc, format);
	    }
	
	    function listMonthsImpl (format, index, field) {
	        if (typeof format === 'number') {
	            index = format;
	            format = undefined;
	        }
	
	        format = format || '';
	
	        if (index != null) {
	            return lists__get(format, index, field, 'month');
	        }
	
	        var i;
	        var out = [];
	        for (i = 0; i < 12; i++) {
	            out[i] = lists__get(format, i, field, 'month');
	        }
	        return out;
	    }
	
	    // ()
	    // (5)
	    // (fmt, 5)
	    // (fmt)
	    // (true)
	    // (true, 5)
	    // (true, fmt, 5)
	    // (true, fmt)
	    function listWeekdaysImpl (localeSorted, format, index, field) {
	        if (typeof localeSorted === 'boolean') {
	            if (typeof format === 'number') {
	                index = format;
	                format = undefined;
	            }
	
	            format = format || '';
	        } else {
	            format = localeSorted;
	            index = format;
	            localeSorted = false;
	
	            if (typeof format === 'number') {
	                index = format;
	                format = undefined;
	            }
	
	            format = format || '';
	        }
	
	        var locale = locale_locales__getLocale(),
	            shift = localeSorted ? locale._week.dow : 0;
	
	        if (index != null) {
	            return lists__get(format, (index + shift) % 7, field, 'day');
	        }
	
	        var i;
	        var out = [];
	        for (i = 0; i < 7; i++) {
	            out[i] = lists__get(format, (i + shift) % 7, field, 'day');
	        }
	        return out;
	    }
	
	    function lists__listMonths (format, index) {
	        return listMonthsImpl(format, index, 'months');
	    }
	
	    function lists__listMonthsShort (format, index) {
	        return listMonthsImpl(format, index, 'monthsShort');
	    }
	
	    function lists__listWeekdays (localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	    }
	
	    function lists__listWeekdaysShort (localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	    }
	
	    function lists__listWeekdaysMin (localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	    }
	
	    locale_locales__getSetGlobalLocale('en', {
	        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (toInt(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });
	
	    // Side effect imports
	    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
	    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);
	
	    var mathAbs = Math.abs;
	
	    function duration_abs__abs () {
	        var data           = this._data;
	
	        this._milliseconds = mathAbs(this._milliseconds);
	        this._days         = mathAbs(this._days);
	        this._months       = mathAbs(this._months);
	
	        data.milliseconds  = mathAbs(data.milliseconds);
	        data.seconds       = mathAbs(data.seconds);
	        data.minutes       = mathAbs(data.minutes);
	        data.hours         = mathAbs(data.hours);
	        data.months        = mathAbs(data.months);
	        data.years         = mathAbs(data.years);
	
	        return this;
	    }
	
	    function duration_add_subtract__addSubtract (duration, input, value, direction) {
	        var other = create__createDuration(input, value);
	
	        duration._milliseconds += direction * other._milliseconds;
	        duration._days         += direction * other._days;
	        duration._months       += direction * other._months;
	
	        return duration._bubble();
	    }
	
	    // supports only 2.0-style add(1, 's') or add(duration)
	    function duration_add_subtract__add (input, value) {
	        return duration_add_subtract__addSubtract(this, input, value, 1);
	    }
	
	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
	    function duration_add_subtract__subtract (input, value) {
	        return duration_add_subtract__addSubtract(this, input, value, -1);
	    }
	
	    function absCeil (number) {
	        if (number < 0) {
	            return Math.floor(number);
	        } else {
	            return Math.ceil(number);
	        }
	    }
	
	    function bubble () {
	        var milliseconds = this._milliseconds;
	        var days         = this._days;
	        var months       = this._months;
	        var data         = this._data;
	        var seconds, minutes, hours, years, monthsFromDays;
	
	        // if we have a mix of positive and negative values, bubble down first
	        // check: https://github.com/moment/moment/issues/2166
	        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	                (milliseconds <= 0 && days <= 0 && months <= 0))) {
	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	            days = 0;
	            months = 0;
	        }
	
	        // The following code bubbles up values, see the tests for
	        // examples of what that means.
	        data.milliseconds = milliseconds % 1000;
	
	        seconds           = absFloor(milliseconds / 1000);
	        data.seconds      = seconds % 60;
	
	        minutes           = absFloor(seconds / 60);
	        data.minutes      = minutes % 60;
	
	        hours             = absFloor(minutes / 60);
	        data.hours        = hours % 24;
	
	        days += absFloor(hours / 24);
	
	        // convert days to months
	        monthsFromDays = absFloor(daysToMonths(days));
	        months += monthsFromDays;
	        days -= absCeil(monthsToDays(monthsFromDays));
	
	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;
	
	        data.days   = days;
	        data.months = months;
	        data.years  = years;
	
	        return this;
	    }
	
	    function daysToMonths (days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        // 400 years have 12 months === 4800
	        return days * 4800 / 146097;
	    }
	
	    function monthsToDays (months) {
	        // the reverse of daysToMonths
	        return months * 146097 / 4800;
	    }
	
	    function as (units) {
	        var days;
	        var months;
	        var milliseconds = this._milliseconds;
	
	        units = normalizeUnits(units);
	
	        if (units === 'month' || units === 'year') {
	            days   = this._days   + milliseconds / 864e5;
	            months = this._months + daysToMonths(days);
	            return units === 'month' ? months : months / 12;
	        } else {
	            // handle milliseconds separately because of floating point math errors (issue #1867)
	            days = this._days + Math.round(monthsToDays(this._months));
	            switch (units) {
	                case 'week'   : return days / 7     + milliseconds / 6048e5;
	                case 'day'    : return days         + milliseconds / 864e5;
	                case 'hour'   : return days * 24    + milliseconds / 36e5;
	                case 'minute' : return days * 1440  + milliseconds / 6e4;
	                case 'second' : return days * 86400 + milliseconds / 1000;
	                // Math.floor prevents floating point math errors here
	                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	                default: throw new Error('Unknown unit ' + units);
	            }
	        }
	    }
	
	    // TODO: Use this.as('ms')?
	    function duration_as__valueOf () {
	        return (
	            this._milliseconds +
	            this._days * 864e5 +
	            (this._months % 12) * 2592e6 +
	            toInt(this._months / 12) * 31536e6
	        );
	    }
	
	    function makeAs (alias) {
	        return function () {
	            return this.as(alias);
	        };
	    }
	
	    var asMilliseconds = makeAs('ms');
	    var asSeconds      = makeAs('s');
	    var asMinutes      = makeAs('m');
	    var asHours        = makeAs('h');
	    var asDays         = makeAs('d');
	    var asWeeks        = makeAs('w');
	    var asMonths       = makeAs('M');
	    var asYears        = makeAs('y');
	
	    function duration_get__get (units) {
	        units = normalizeUnits(units);
	        return this[units + 's']();
	    }
	
	    function makeGetter(name) {
	        return function () {
	            return this._data[name];
	        };
	    }
	
	    var milliseconds = makeGetter('milliseconds');
	    var seconds      = makeGetter('seconds');
	    var minutes      = makeGetter('minutes');
	    var hours        = makeGetter('hours');
	    var days         = makeGetter('days');
	    var months       = makeGetter('months');
	    var years        = makeGetter('years');
	
	    function weeks () {
	        return absFloor(this.days() / 7);
	    }
	
	    var round = Math.round;
	    var thresholds = {
	        s: 45,  // seconds to minute
	        m: 45,  // minutes to hour
	        h: 22,  // hours to day
	        d: 26,  // days to month
	        M: 11   // months to year
	    };
	
	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }
	
	    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
	        var duration = create__createDuration(posNegDuration).abs();
	        var seconds  = round(duration.as('s'));
	        var minutes  = round(duration.as('m'));
	        var hours    = round(duration.as('h'));
	        var days     = round(duration.as('d'));
	        var months   = round(duration.as('M'));
	        var years    = round(duration.as('y'));
	
	        var a = seconds < thresholds.s && ['s', seconds]  ||
	                minutes <= 1           && ['m']           ||
	                minutes < thresholds.m && ['mm', minutes] ||
	                hours   <= 1           && ['h']           ||
	                hours   < thresholds.h && ['hh', hours]   ||
	                days    <= 1           && ['d']           ||
	                days    < thresholds.d && ['dd', days]    ||
	                months  <= 1           && ['M']           ||
	                months  < thresholds.M && ['MM', months]  ||
	                years   <= 1           && ['y']           || ['yy', years];
	
	        a[2] = withoutSuffix;
	        a[3] = +posNegDuration > 0;
	        a[4] = locale;
	        return substituteTimeAgo.apply(null, a);
	    }
	
	    // This function allows you to set the rounding function for relative time strings
	    function duration_humanize__getSetRelativeTimeRounding (roundingFunction) {
	        if (roundingFunction === undefined) {
	            return round;
	        }
	        if (typeof(roundingFunction) === 'function') {
	            round = roundingFunction;
	            return true;
	        }
	        return false;
	    }
	
	    // This function allows you to set a threshold for relative time strings
	    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
	        if (thresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return thresholds[threshold];
	        }
	        thresholds[threshold] = limit;
	        return true;
	    }
	
	    function humanize (withSuffix) {
	        var locale = this.localeData();
	        var output = duration_humanize__relativeTime(this, !withSuffix, locale);
	
	        if (withSuffix) {
	            output = locale.pastFuture(+this, output);
	        }
	
	        return locale.postformat(output);
	    }
	
	    var iso_string__abs = Math.abs;
	
	    function iso_string__toISOString() {
	        // for ISO strings we do not use the normal bubbling rules:
	        //  * milliseconds bubble up until they become hours
	        //  * days do not bubble at all
	        //  * months bubble up until they become years
	        // This is because there is no context-free conversion between hours and days
	        // (think of clock changes)
	        // and also not between days and months (28-31 days per month)
	        var seconds = iso_string__abs(this._milliseconds) / 1000;
	        var days         = iso_string__abs(this._days);
	        var months       = iso_string__abs(this._months);
	        var minutes, hours, years;
	
	        // 3600 seconds -> 60 minutes -> 1 hour
	        minutes           = absFloor(seconds / 60);
	        hours             = absFloor(minutes / 60);
	        seconds %= 60;
	        minutes %= 60;
	
	        // 12 months -> 1 year
	        years  = absFloor(months / 12);
	        months %= 12;
	
	
	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	        var Y = years;
	        var M = months;
	        var D = days;
	        var h = hours;
	        var m = minutes;
	        var s = seconds;
	        var total = this.asSeconds();
	
	        if (!total) {
	            // this is the same as C#'s (Noda) and python (isodate)...
	            // but not other JS (goog.date)
	            return 'P0D';
	        }
	
	        return (total < 0 ? '-' : '') +
	            'P' +
	            (Y ? Y + 'Y' : '') +
	            (M ? M + 'M' : '') +
	            (D ? D + 'D' : '') +
	            ((h || m || s) ? 'T' : '') +
	            (h ? h + 'H' : '') +
	            (m ? m + 'M' : '') +
	            (s ? s + 'S' : '');
	    }
	
	    var duration_prototype__proto = Duration.prototype;
	
	    duration_prototype__proto.abs            = duration_abs__abs;
	    duration_prototype__proto.add            = duration_add_subtract__add;
	    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
	    duration_prototype__proto.as             = as;
	    duration_prototype__proto.asMilliseconds = asMilliseconds;
	    duration_prototype__proto.asSeconds      = asSeconds;
	    duration_prototype__proto.asMinutes      = asMinutes;
	    duration_prototype__proto.asHours        = asHours;
	    duration_prototype__proto.asDays         = asDays;
	    duration_prototype__proto.asWeeks        = asWeeks;
	    duration_prototype__proto.asMonths       = asMonths;
	    duration_prototype__proto.asYears        = asYears;
	    duration_prototype__proto.valueOf        = duration_as__valueOf;
	    duration_prototype__proto._bubble        = bubble;
	    duration_prototype__proto.get            = duration_get__get;
	    duration_prototype__proto.milliseconds   = milliseconds;
	    duration_prototype__proto.seconds        = seconds;
	    duration_prototype__proto.minutes        = minutes;
	    duration_prototype__proto.hours          = hours;
	    duration_prototype__proto.days           = days;
	    duration_prototype__proto.weeks          = weeks;
	    duration_prototype__proto.months         = months;
	    duration_prototype__proto.years          = years;
	    duration_prototype__proto.humanize       = humanize;
	    duration_prototype__proto.toISOString    = iso_string__toISOString;
	    duration_prototype__proto.toString       = iso_string__toISOString;
	    duration_prototype__proto.toJSON         = iso_string__toISOString;
	    duration_prototype__proto.locale         = locale;
	    duration_prototype__proto.localeData     = localeData;
	
	    // Deprecations
	    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
	    duration_prototype__proto.lang = lang;
	
	    // Side effect imports
	
	    // FORMATTING
	
	    addFormatToken('X', 0, 0, 'unix');
	    addFormatToken('x', 0, 0, 'valueOf');
	
	    // PARSING
	
	    addRegexToken('x', matchSigned);
	    addRegexToken('X', matchTimestamp);
	    addParseToken('X', function (input, array, config) {
	        config._d = new Date(parseFloat(input, 10) * 1000);
	    });
	    addParseToken('x', function (input, array, config) {
	        config._d = new Date(toInt(input));
	    });
	
	    // Side effect imports
	
	
	    utils_hooks__hooks.version = '2.15.2';
	
	    setHookCallback(local__createLocal);
	
	    utils_hooks__hooks.fn                    = momentPrototype;
	    utils_hooks__hooks.min                   = min;
	    utils_hooks__hooks.max                   = max;
	    utils_hooks__hooks.now                   = now;
	    utils_hooks__hooks.utc                   = create_utc__createUTC;
	    utils_hooks__hooks.unix                  = moment__createUnix;
	    utils_hooks__hooks.months                = lists__listMonths;
	    utils_hooks__hooks.isDate                = isDate;
	    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
	    utils_hooks__hooks.invalid               = valid__createInvalid;
	    utils_hooks__hooks.duration              = create__createDuration;
	    utils_hooks__hooks.isMoment              = isMoment;
	    utils_hooks__hooks.weekdays              = lists__listWeekdays;
	    utils_hooks__hooks.parseZone             = moment__createInZone;
	    utils_hooks__hooks.localeData            = locale_locales__getLocale;
	    utils_hooks__hooks.isDuration            = isDuration;
	    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
	    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
	    utils_hooks__hooks.defineLocale          = defineLocale;
	    utils_hooks__hooks.updateLocale          = updateLocale;
	    utils_hooks__hooks.locales               = locale_locales__listLocales;
	    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
	    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
	    utils_hooks__hooks.relativeTimeRounding = duration_humanize__getSetRelativeTimeRounding;
	    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
	    utils_hooks__hooks.calendarFormat        = getCalendarFormat;
	    utils_hooks__hooks.prototype             = momentPrototype;
	
	    var _moment = utils_hooks__hooks;
	
	    return _moment;
	
	}));
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./en-au": 29,
		"./en-au.js": 29,
		"./en-ca": 30,
		"./en-ca.js": 30,
		"./en-gb": 31,
		"./en-gb.js": 31,
		"./en-ie": 32,
		"./en-ie.js": 32,
		"./en-nz": 33,
		"./en-nz.js": 33
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 28;


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Australia) [en-au]
	//! author : Jared Morse : https://github.com/jarcoal
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var en_au = moment.defineLocale('en-au', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return en_au;
	
	}));

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Canada) [en-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var en_ca = moment.defineLocale('en-ca', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'YYYY-MM-DD',
	            LL : 'MMMM D, YYYY',
	            LLL : 'MMMM D, YYYY h:mm A',
	            LLLL : 'dddd, MMMM D, YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });
	
	    return en_ca;
	
	}));

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (United Kingdom) [en-gb]
	//! author : Chris Gedrim : https://github.com/chrisgedrim
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var en_gb = moment.defineLocale('en-gb', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return en_gb;
	
	}));

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Ireland) [en-ie]
	//! author : Chris Cartlidge : https://github.com/chriscartlidge
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var en_ie = moment.defineLocale('en-ie', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return en_ie;
	
	}));

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (New Zealand) [en-nz]
	//! author : Luke McGregor : https://github.com/lukemcgregor
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var en_nz = moment.defineLocale('en-nz', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return en_nz;
	
	}));

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_, Constants, numeral) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.getReferenceAddress = exports.getPaymentTr = exports.getRelationSelector = exports.getBankSelector = exports.getToggleMinimap = exports.getDevModePage = exports.getEditGroupPage = exports.getChildrenGroupPage = exports.getMasterGroupPage = exports.getChildrenGroupList = exports.getMasterGroupList = exports.getApplicationListPage = exports.getInternalAgent = exports.getPayments = exports.isAllRequiredQuestionsFilled = exports.getEappStatusList = exports.getEappProgress = exports.getSignProgress = exports.getSumPaymentProgress = exports.getSumPayment = exports.getUniqueAgentList = exports.getCurrentGroupOrEapp = exports.getCurrentEapp = exports.getCombinedEappList = exports.getNormalAndGroupEappList = exports.getFilteredEappHash = exports.getReducedEappHash = exports.getProductPage = exports.getSelectedRiderList = exports.getGroupSelectedRider = exports.getGroupedRiderList = exports.getMasterRiderHash = exports.getMasterGroupRiderList = exports.getMasterGroupBasicList = exports.transformTemplate = exports.getEappPage = exports.getEappPageLength = exports.getSectionListWithProgress = exports.getFormProgress = exports.getFormOnlyValue = exports.getDocumentProgress = exports.getFormOptionalQuestion = exports.getFormRequiredQuestion = exports.getFormQuestion = exports.currentSection = exports.getSectionList = exports.getSlideListByQuestion = exports.getSlideList = exports.isInvalidTR2N = exports.isInvalidWPTR = exports.isInvalidPB4N = exports.isInvalidWPB = exports.isInvalidWPF = exports.checkReadyPremiumCalculation = exports.getOADModel = exports.getOADModelWithQuotation = exports.isEffectProduct = exports.isValidProduct = exports.Fatca_Q1 = exports.Payer_HasTreatment = exports.Payer_HasDiagnosis = exports.hasPayerCiPastIllness = exports.hasPayerPastIllness = exports.Payer_WeightChangeReason = exports.Payer_HasWeightChange = exports.Payer_DrugWithdrawn = exports.Payer_DrugFlag = exports.Payer_HasBeenRejected = exports.Payer_RelationToInsured = exports.Insured_Tumor_DiagnosedAsMalicious = exports.Insured_Tumor_Recurrence = exports.Insured_Tumor_SpecialTreatment = exports.Insured_Tumor_Treatment = exports.Insured_Tumor_Followup = exports.Insured_Tumor_BeenOperated = exports.Insured_Hepatitis_HasAlcohol = exports.Insured_Hepatitis_UltrasoundTest = exports.Insured_Hepatitis_BloodTest = exports.Insured_Hepatitis_Heptatomegaly = exports.Insured_HighBp_SmokeFlag = exports.Insured_Hbp_HasEkg = exports.Insured_Hbp_HasCxr = exports.Insured_Hbp_Not_CurrentInTreatment = exports.Insured_Hbp_CurrentInTreatment = exports.Insured_Diabetes_HasEkg = exports.Insured_Diabetes_HasCxr = exports.Insured_Diabetes_BloodTest = exports.Insured_Diabetes_UrineTestResult = exports.Insured_Diabetes_HasFamily = exports.Insured_Tumor_Treatments_Treatment_Radio = exports.Insured_Tumor_Treatments_Treatment_Chemo = exports.Insured_Tumor_Treatments_Treatment_Other = exports.Insured_Hepatitis_Diagnoseds = exports.InsuredDiabetesPill = exports.InsuredDiabetesAnother = exports.Insured_IsPreferEPolicy = exports.hasCiPastIllness = exports.hasPastIllness = exports.Insured_HasSpouseLiverHiv = exports.hasFamilyHistory = exports.Insured_HasTreatment = exports.Insured_HasDiagnosis = exports.Dividend_PaymentOption = exports.Insured_WeightChangeReason = exports.Insured_HasWeightChange = exports.Insured_HasBeenRejected = exports.Insured_HasExistingPolicies = exports.Insured_SmokeFlag = exports.Insured_AlcoholFlag = exports.Insured_DrugFlag = exports.Insured_IsStudent = exports.isPayerStudent = exports.Payer_HasAnotherOccupation = exports.Insured_HasAnotherOccupation = exports.Insured_HealthyFlag = exports.Insured_SmokeWithdrawn = exports.Insured_AlcoholWithdrawn = exports.Insured_DrugWithdrawn = exports.Basic_HasDividend = exports.Insured_HasTreatment_CutOut = exports.Insured_HasDiagnosis_CutOut = exports.isHbp = exports.isTumor = exports.isHepatitis = exports.isDiabetes = exports.isCiPastIllness = exports.getFormPayerEmail = exports.getFormInsuredEmail = exports.getFormPayerMobile = exports.getFormInsuredMobile = exports.isPayerPastIllness = exports.isPayerRaceTH = exports.isRaceTH = exports.Payer_MaritalStatus = exports.Insured_MaritalStatus = exports.isPayerMale = exports.isPayerFemale = exports.isMale = exports.isFemale = exports.isNotHasPayer = exports.isHasPayer = exports.getAppPayer = exports.getPayerInfo = exports.getInsuredInfo = exports.getAppPayerInfo = exports.isNotAdult = exports.isJuvenile = exports.isAdultCommonAndPA = exports.isChildrenCommonAndPA = exports.isAdult = exports.isChildrenPA = exports.DocPayerPA = exports.isFormTypePA = exports.isInsuredNotAppPayer = exports.getFormPayerSign = exports.isSIOProductAdult = exports.isSIOProductChildren = exports.isSIOProduct = exports.getFormInsuredSign = exports.getFormAgentSign = exports.getFormConsentSign = exports.getFormProductPayment = exports.getFormProductResult = exports.getFormProductId = exports.getFormProduct = exports.getFormRider = exports.getPayerAge = exports.getFormInsuredAge = exports.getFormStatus = exports.getFormNo = exports.getFormMemo = exports.getFormType = exports.getFormId = exports.getCustomerBirthDate = exports.getCustomerLastName = exports.getCustomerFirstName = exports.getCustomerInfo = exports.getFormQuestionId = exports.getFormIndex = exports.getFormData = exports.getForm = exports.getCurrentForm = exports.getFormPrevState = exports.getTransformedAppGroup = exports.getCurrentEappGroup = exports.getAllDocumentFile = exports.getDocumentFileListWithRequired = exports.getDocumentFileList = exports.getDocumentList = exports.getAppAgentInfo = exports.getSyncInfo = exports.getOTPnewPhoneNum = exports.getDocumentFiles = exports.getDocumentsListFromSQL = exports.getDocument = exports.getSignaturePadState = exports.getOTPState = exports.getSingerList = exports.getStopRemoveProductPopup = exports.getStopFillAddress = exports.getPaymentRef = exports.getPaymentTrNumber = exports.getPaymentStatus = exports.getPaymentFlag = exports.getIsLoadAction = exports.getSort = exports.getSearch = exports.getEappStatus = exports.getPreviewLanguage = exports.getFormInvalid = exports.getFormCurrentIndex = exports.getFormSlides = exports.getFormTemplateType = exports.getFormTemplateSections = exports.getFormTemplateQuestion = exports.getFormTemplate = exports.getPageCurrentIndex = exports.getPageLength = exports.getPageLimit = exports.getMasterRiderProduct = exports.getMasterRider = exports.getMasterBasic = exports.getMasterPaymentMode = exports.getMasterData = exports.getMaster = exports.getConfigExpireDuration = exports.getEappGroupCurrentId = exports.getEappGroup = exports.getPrevState = exports.getPrevForm = exports.getEappListCurrentId = exports.getEappListCurrentIndex = exports.getEappList = exports.getEappState = exports.getEappSnapShot = exports.getEapp = exports.getModalState = exports.getAlert = exports.isSavedAction = exports.isSavingAction = exports.isSyncing = exports.getLanguage = exports.isApplicationStatusDrafted = exports.isLoading = exports.getAgentList = exports.getAgentId = exports.getAgent = exports.getCTversion = undefined;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _reselect = __webpack_require__(37);
	
	var _fp = __webpack_require__(3);
	
	var _moment = __webpack_require__(27);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _utils = __webpack_require__(38);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var concatPath = function concatPath(path) {
	    return (0, _fp.flow)((0, _fp.at)(path), (0, _fp.join)(' '), _fp.trim);
	};
	
	var getCTversion = exports.getCTversion = function getCTversion(state) {
	    return state.eapp.config.CTversion;
	};
	
	var getAgent = exports.getAgent = function getAgent(state) {
	    return state.agent;
	};
	var getAgentId = exports.getAgentId = function getAgentId(state) {
	    return state.agent.userCode;
	};
	var getAgentList = exports.getAgentList = function getAgentList(state) {
	    return state.agent.agList;
	};
	
	var isLoading = exports.isLoading = function isLoading(state) {
	    return state.quotation.ui.isLoading;
	};
	var isApplicationStatusDrafted = exports.isApplicationStatusDrafted = function isApplicationStatusDrafted(status) {
	    return status === 'DR';
	};
	
	var getLanguage = exports.getLanguage = function getLanguage(state) {
	    return state.eapp.ui.language;
	};
	var isSyncing = exports.isSyncing = function isSyncing(state) {
	    return state.eapp.state.isWaitSync === true;
	};
	var isSavingAction = exports.isSavingAction = function isSavingAction(state) {
	    return state.eapp.state.isWaitSaveAction === true;
	};
	var isSavedAction = exports.isSavedAction = function isSavedAction(state) {
	    return state.eapp.state.isWaitSaveAction === false;
	};
	
	var getAlert = exports.getAlert = function getAlert(state) {
	    return state.eapp.ui.alert;
	};
	var getModalState = exports.getModalState = function getModalState(state) {
	    return state.eapp.ui.modal;
	};
	
	var getEapp = exports.getEapp = function getEapp(state) {
	    return state.eapp;
	};
	var getEappSnapShot = exports.getEappSnapShot = function getEappSnapShot(state) {
	    return _.omit(state.eapp, ['ui', 'state', 'master']);
	};
	var getEappState = exports.getEappState = function getEappState(state, paths) {
	    return paths ? _.get(state.eapp.state, paths) : state.eapp.state;
	};
	var getEappList = exports.getEappList = function getEappList(state) {
	    return state.eapp.form.list;
	};
	var getEappListCurrentIndex = exports.getEappListCurrentIndex = function getEappListCurrentIndex(state) {
	    return state.eapp.form.currentIndex;
	};
	var getEappListCurrentId = exports.getEappListCurrentId = function getEappListCurrentId(state) {
	    return state.eapp.form.currentId;
	};
	var getPrevForm = exports.getPrevForm = function getPrevForm(state) {
	    return state.eapp.form.prevForm;
	};
	var getPrevState = exports.getPrevState = function getPrevState(state) {
	    return state.eapp.form.prevState;
	};
	
	var getEappGroup = exports.getEappGroup = function getEappGroup(state) {
	    return state.eapp.group.hash;
	};
	var getEappGroupCurrentId = exports.getEappGroupCurrentId = function getEappGroupCurrentId(state) {
	    return state.eapp.group.currentId;
	};
	
	var getConfigExpireDuration = exports.getConfigExpireDuration = function getConfigExpireDuration(state) {
	    return state.eapp.config['expireDuration'];
	};
	
	var getMaster = exports.getMaster = function getMaster(state) {
	    return state.eapp.master;
	};
	var getMasterData = exports.getMasterData = function getMasterData(state, name) {
	    return _.get(state.eapp.master, name);
	};
	var getMasterPaymentMode = exports.getMasterPaymentMode = function getMasterPaymentMode(state) {
	    return state.eapp.master.paymentMode || [];
	};
	var getMasterBasic = exports.getMasterBasic = function getMasterBasic(state) {
	    return state.eapp.master.basic || {};
	};
	var getMasterRider = exports.getMasterRider = function getMasterRider(state) {
	    return state.eapp.master.rider || {};
	};
	var getMasterRiderProduct = exports.getMasterRiderProduct = function getMasterRiderProduct(state) {
	    return _.get(state.eapp.master.rider, 'product');
	};
	
	var getPageLimit = exports.getPageLimit = function getPageLimit(state) {
	    return state.eapp.state.pageLimit;
	};
	var getPageLength = exports.getPageLength = function getPageLength(state) {
	    return state.eapp.state.pageLength;
	};
	var getPageCurrentIndex = exports.getPageCurrentIndex = function getPageCurrentIndex(state) {
	    return state.eapp.state.pageCurrentIndex;
	};
	var getFormTemplate = exports.getFormTemplate = function getFormTemplate(state) {
	    return state.eapp.state.template;
	};
	var getFormTemplateQuestion = exports.getFormTemplateQuestion = function getFormTemplateQuestion(state) {
	    return state.eapp.state.template.question;
	};
	var getFormTemplateSections = exports.getFormTemplateSections = function getFormTemplateSections(state) {
	    return state.eapp.state.template.sections;
	};
	var getFormTemplateType = exports.getFormTemplateType = function getFormTemplateType(state) {
	    return state.eapp.state.formType;
	};
	var getFormSlides = exports.getFormSlides = function getFormSlides(state) {
	    return state.eapp.state.slides;
	};
	var getFormCurrentIndex = exports.getFormCurrentIndex = function getFormCurrentIndex(state) {
	    return state.eapp.state.slideCurrentIndex;
	};
	var getFormInvalid = exports.getFormInvalid = function getFormInvalid(state) {
	    return state.eapp.state.invalid;
	};
	var getPreviewLanguage = exports.getPreviewLanguage = function getPreviewLanguage(state) {
	    return state.eapp.state.previewLanguage;
	};
	var getEappStatus = exports.getEappStatus = function getEappStatus(state) {
	    return state.eapp.state.eappStatus;
	};
	var getSearch = exports.getSearch = function getSearch(state) {
	    return state.eapp.state.search;
	};
	var getSort = exports.getSort = function getSort(state) {
	    return state.eapp.state.sort;
	};
	var getIsLoadAction = exports.getIsLoadAction = function getIsLoadAction(state) {
	    return state.eapp.state.isLoadingAction;
	};
	
	var getPaymentFlag = exports.getPaymentFlag = function getPaymentFlag(state) {
	    return state.eapp.state.paymentFlag;
	};
	var getPaymentStatus = exports.getPaymentStatus = function getPaymentStatus(state) {
	    return state.eapp.state.paymentStatus;
	};
	var getPaymentTrNumber = exports.getPaymentTrNumber = function getPaymentTrNumber(state) {
	    return state.eapp.state.paymentTrNumber;
	};
	var getPaymentRef = exports.getPaymentRef = function getPaymentRef(state) {
	    return state.eapp.state.paymentRef;
	};
	var getStopFillAddress = exports.getStopFillAddress = function getStopFillAddress(state) {
	    return state.eapp.state.isStopFillInsuredAddress || false;
	};
	var getStopRemoveProductPopup = exports.getStopRemoveProductPopup = function getStopRemoveProductPopup(state) {
	    return state.eapp.state.isStopRemoveProductPopup || false;
	};
	
	var getSingerList = exports.getSingerList = function getSingerList(state) {
	    return state.eapp.state.signerList;
	};
	var getOTPState = exports.getOTPState = function getOTPState(state) {
	    return state.eapp.state.OTP;
	};
	var getSignaturePadState = exports.getSignaturePadState = function getSignaturePadState(state) {
	    return state.eapp.state.signaturePad;
	};
	var getDocument = exports.getDocument = function getDocument(state) {
	    return state.eapp.doc;
	};
	var getDocumentsListFromSQL = exports.getDocumentsListFromSQL = function getDocumentsListFromSQL(state) {
	    return state.eapp.state.documentsList;
	};
	var getDocumentFiles = exports.getDocumentFiles = function getDocumentFiles(state, id) {
	    return _.get(state.eapp.doc, [id, 'files']);
	};
	var getOTPnewPhoneNum = exports.getOTPnewPhoneNum = function getOTPnewPhoneNum(state) {
	    return state.eapp.state.OTP.newPhoneNumber;
	};
	
	var getSyncInfo = exports.getSyncInfo = function getSyncInfo(state) {
	    return state.eapp.state.sync;
	};
	
	var getAppAgentInfo = exports.getAppAgentInfo = (0, _reselect.createSelector)(getAgent, function (agent) {
	    var getAgentName = function getAgentName(language) {
	        return _.get(agent, ['userFName', language]) + ' ' + _.get(agent, ['userLName', language]);
	    };
	    return {
	        AgentInfo_AgentName: {
	            th: getAgentName('th'),
	            en: getAgentName('en')
	        },
	        AgentInfo_AgentCode: _.get(agent, 'userCode'),
	        AgentInfo_AgentBranch: _.get(agent, 'userAreaName'),
	        AgentInfo_AgentLicenseNo: _.get(agent, 'licenseNumber'),
	        AgentInfo_AgentUnitCode: _.get(agent, 'unitCode'),
	        AgentInfo_AgentUnitName: _.get(agent, 'unitName'),
	        AgentInfo_AgentRole: _.get(agent, 'role'),
	        AgentInfo_MobileNo: _.get(agent, 'userTelNumber'),
	        AgentInfo_Email: _.get(agent, 'userEmail')
	    };
	});
	
	var getDocumentList = exports.getDocumentList = (0, _reselect.createSelector)(getDocument, function (state, appId) {
	    return appId;
	}, function (doc, appId) {
	    return _(doc).values().filter(function (doc) {
	        return _.isNil(appId) ? doc : _(doc).chain().get('appList').includes(appId).value();
	    }).value();
	});
	var getDocumentFileList = exports.getDocumentFileList = (0, _reselect.createSelector)(getDocumentList, function (documentList) {
	    return _(documentList).map('files').map(function (obj) {
	        return _.values(obj);
	    }).flatten().reject(_.isEmpty).orderBy(['created'], ['asc']).value();
	});
	var getDocumentFileListWithRequired = exports.getDocumentFileListWithRequired = (0, _reselect.createSelector)(getDocumentList, function (documentList) {
	    return _.chain(documentList).filter({ isRequired: 'Y' }).map('files').flatten().value();
	});
	var getAllDocumentFile = exports.getAllDocumentFile = (0, _reselect.createSelector)(getDocumentList, function (documentList) {
	    return _(documentList).reduce(function (result, value) {
	        var docId = _.get(value, 'id');
	        var files = _.get(value, 'files');
	        var appList = _.get(value, 'appList');
	
	        return _.reduce(appList, function (result, appId) {
	            return _extends({}, result, _defineProperty({}, appId, _(result[appId] || []).concat(_.values(files)).orderBy(['created'], ['asc']).map(function (file) {
	                return _extends({}, file, {
	                    docId: _.concat([], _.get(file, 'docId', []), docId)
	                });
	            }).value()));
	        }, result);
	    }, {});
	});
	var getCurrentEappGroup = exports.getCurrentEappGroup = (0, _reselect.createSelector)(getEappGroup, getEappGroupCurrentId, function (group, currentId) {
	    return _.get(group, currentId, {});
	});
	var getTransformedAppGroup = exports.getTransformedAppGroup = (0, _reselect.createSelector)(getEappGroup, function (group) {
	    return group.map(function (item) {
	        return _extends({}, item, {
	            appList: _(item).get(appList).keyBy()
	        });
	    });
	});
	var getFormPrevState = exports.getFormPrevState = function getFormPrevState(state) {
	    return state.eapp.form.prevState;
	};
	var getCurrentForm = exports.getCurrentForm = (0, _reselect.createSelector)(getEappList, getEappListCurrentIndex, function (list, index) {
	    return _.get(list, index, {});
	});
	var getForm = exports.getForm = (0, _reselect.createSelector)(getCurrentForm, getEappList, function (state, appId) {
	    return appId;
	}, function (form, list, appId) {
	    if (_.isString(appId)) {
	        return _.find(list, ['appId', appId]);
	    }
	
	    return form;
	});
	var getFormData = exports.getFormData = function getFormData() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	    }
	
	    return function (state, props) {
	        var _ref;
	
	        var form = _.has(state, ['eapp', 'form']) ? getForm(state, props) : state;
	        return (_ref = _).get.apply(_ref, [form].concat(args));
	    };
	};
	var getFormIndex = exports.getFormIndex = (0, _reselect.createSelector)(getFormSlides, function (props, questionId) {
	    return questionId;
	}, function (slideList, questionId) {
	    return _.findIndex(slideList, function (_ref2) {
	        var questions = _ref2.questions;
	        return _.includes(questions, questionId);
	    });
	});
	
	var getFormQuestionId = exports.getFormQuestionId = function getFormQuestionId(id) {
	    if (_.includes(id, '[i]')) {
	        var charList = _.split(id, '');
	        var lastIndex = _.findLastIndex(charList, function (ch) {
	            return ch === '[';
	        });
	
	        return _(charList).slice(0, lastIndex).join('');
	    }
	
	    return id;
	};
	
	var getCustomerInfo = exports.getCustomerInfo = getFormData(['customerInfo']);
	var getCustomerFirstName = exports.getCustomerFirstName = getFormData(['customerInfo', 'customerData', 'ThNameFirst']);
	var getCustomerLastName = exports.getCustomerLastName = getFormData(['customerInfo', 'customerData', 'ThNameLast']);
	var getCustomerBirthDate = exports.getCustomerBirthDate = getFormData(['customerInfo', 'customerData', 'BirthDate']);
	var getFormId = exports.getFormId = getFormData(['appId'], '');
	var getFormType = exports.getFormType = getFormData(['formType']);
	var getFormMemo = exports.getFormMemo = getFormData(['Memo']);
	var getFormNo = exports.getFormNo = getFormData(['AppNo']);
	var getFormStatus = exports.getFormStatus = getFormData(['Status']);
	var getFormInsuredAge = exports.getFormInsuredAge = getFormData(['Insured_RoundedAge'], 0);
	var getPayerAge = exports.getPayerAge = getFormData(['Payer_RoundedAge'], 0);
	var getFormRider = exports.getFormRider = getFormData(['ProSelection', 'RIDERS']);
	var getFormProduct = exports.getFormProduct = getFormData(['ProSelection'], {});
	var getFormProductId = exports.getFormProductId = getFormData(['ProSelection', 'ProdCode']);
	var getFormProductResult = exports.getFormProductResult = getFormData(['ProResult'], {});
	var getFormProductPayment = exports.getFormProductPayment = getFormData(['PaymentOption'], {});
	
	var getFormConsentSign = exports.getFormConsentSign = getFormData('Contract_ConsentByRepresentative');
	var getFormAgentSign = exports.getFormAgentSign = getFormData(['AgentInfo_AgentName', 'th']);
	var getFormInsuredSign = exports.getFormInsuredSign = (0, _reselect.createSelector)(getFormData('Insured_ThName_First'), getFormData('Insured_ThName_Last'), function (firstName, lastName) {
	    return firstName + ' ' + lastName;
	});
	
	var isSIOProduct = exports.isSIOProduct = (0, _reselect.createSelector)(getFormProductId, function (sio) {
	    return true;
	    // return !(sio === 'HL1N')
	});
	var isSIOProductChildren = exports.isSIOProductChildren = (0, _reselect.createSelector)(getFormInsuredAge, isSIOProduct, function (children, isSio) {
	    return children > 15 && !isSio;
	});
	var isSIOProductAdult = exports.isSIOProductAdult = (0, _reselect.createSelector)(getFormInsuredAge, isSIOProduct, function (adult, isSio) {
	    return adult < 16 && !isSio;
	});
	
	var getFormPayerSign = exports.getFormPayerSign = (0, _reselect.createSelector)(getFormData('Payer_ThName_First'), getFormData('Payer_ThName_Last'), function (firstName, lastName) {
	    return firstName + ' ' + lastName;
	});
	var isInsuredNotAppPayer = exports.isInsuredNotAppPayer = (0, _reselect.createSelector)(getFormData('AppPayer_First'), getFormData('Insured_ThName_First'), function (AppFirst, InsuredFirst) {
	    return AppFirst !== '' && AppFirst !== InsuredFirst;
	});
	var isFormTypePA = exports.isFormTypePA = (0, _reselect.createSelector)(getFormType, function (formType) {
	    return formType === Constants.FORM_TYPE_PA;
	});
	
	var DocPayerPA = exports.DocPayerPA = (0, _reselect.createSelector)(getFormInsuredAge, isFormTypePA, function (age, PAform) {
	    return age < 20 && PAform;
	});
	var isChildrenPA = exports.isChildrenPA = (0, _reselect.createSelector)(getFormInsuredAge, isFormTypePA, function (age, PAform) {
	    return age < 16 && !PAform || age < 20 && PAform;
	});
	var isAdult = exports.isAdult = (0, _reselect.createSelector)(getFormInsuredAge, isFormTypePA, function (age, PAform) {
	    return age > 15 && !PAform || age > 19 && PAform;
	});
	var isChildrenCommonAndPA = exports.isChildrenCommonAndPA = (0, _reselect.createSelector)(getFormInsuredAge, isFormTypePA, function (age, PAform) {
	    return age < 16 && !PAform || PAform;
	});
	var isAdultCommonAndPA = exports.isAdultCommonAndPA = (0, _reselect.createSelector)(getFormInsuredAge, isFormTypePA, function (age, PAform) {
	    return age > 15 && !PAform || PAform;
	});
	
	var isJuvenile = exports.isJuvenile = (0, _reselect.createSelector)(getFormInsuredAge, isFormTypePA, function (age, isPa) {
	    if (isPa) {
	        return age < 20;
	    }
	    return age < 16;
	});
	
	var isNotAdult = exports.isNotAdult = (0, _reselect.createSelector)(isAdult, function (isAdult) {
	    return !isAdult;
	});
	
	var getAppPayerInfo = exports.getAppPayerInfo = (0, _reselect.createSelector)(getFormData('AppPayer_RelationToInsured'), getFormData('AppPayer_Title'), getFormData('AppPayer_First'), getFormData('AppPayer_Last'), getFormData('AppPayer_Age'), getFormData('AppPayer_Occupation'), function (relationToInsured, title, firstName, lastName, age, occupation) {
	    var result = { relationToInsured: relationToInsured, title: title, firstName: firstName, lastName: lastName, age: age, occupation: occupation };
	    return _.omitBy(result, _.isNil);
	});
	
	var getInsuredInfo = exports.getInsuredInfo = (0, _reselect.createSelector)(getFormData('Insured_ThName_Title'), getFormData('Insured_ThName_First'), getFormData('Insured_ThName_Last'), getFormData('Insured_RoundedAge'), getFormData('Insured_Occupation1_Occupation'), function (title, firstName, lastName, age, occupation) {
	    var result = {
	        relationToInsured: {
	            value: '00',
	            label: { en: 'Insured', th: 'ตนเอง' }
	        },
	        title: title,
	        firstName: firstName,
	        lastName: lastName,
	        age: age,
	        occupation: occupation
	    };
	    return _.omitBy(result, _.isNil);
	});
	
	var getPayerInfo = exports.getPayerInfo = (0, _reselect.createSelector)(getFormData('Payer_RelationToInsured'), getFormData('Payer_ThName_Title'), getFormData('Payer_ThName_First'), getFormData('Payer_ThName_Last'), getFormData('Payer_RoundedAge'), getFormData('Payer_Occupation1_Occupation'), function (relationToInsured, title, firstName, lastName, age, occupation) {
	    var result = { relationToInsured: relationToInsured, title: title, firstName: firstName, lastName: lastName, age: age, occupation: occupation };
	    return _.omitBy(result, _.isNil);
	});
	
	var getAppPayer = exports.getAppPayer = (0, _reselect.createSelector)(getAppPayerInfo, getPayerInfo, getInsuredInfo, isAdult, getFormData('AppPayer_CompanyName'), getFormData('AppPayer_CompanyAddress'), getFormData('AppPayer_CompanyLicense'), getFormData('AppPayer_IsPersonal'), getFormData('AppPayer_RelationOtherToInsured'), function (appPayer, payer, insured, adult, companyName, companyAddress, companyLicense) {
	    var isPersonal = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : true;
	    var relationOtherToInsured = arguments[8];
	
	    var _appPayer = {};
	    if (!_.isEmpty(appPayer)) {
	        _appPayer = appPayer;
	    } else {
	        if (adult) {
	            if (!_.isEmpty(insured)) {
	                _appPayer = insured;
	            }
	        } else {
	            if (!_.isEmpty(payer)) {
	                _appPayer = payer;
	            }
	        }
	    }
	    return {
	        AppPayer_RelationToInsured: _.get(_appPayer, 'relationToInsured'),
	        AppPayer_RelationOtherToInsured: relationOtherToInsured,
	        AppPayer_Title: _.get(_appPayer, 'title'),
	        AppPayer_First: _.get(_appPayer, 'firstName'),
	        AppPayer_Last: _.get(_appPayer, 'lastName'),
	        AppPayer_Age: _.get(_appPayer, 'age'),
	        AppPayer_Occupation: _.get(_appPayer, 'occupation'),
	        AppPayer_CompanyName: companyName,
	        AppPayer_CompanyAddress: companyAddress,
	        AppPayer_CompanyLicense: companyLicense,
	        AppPayer_IsPersonal: _.get(_appPayer.relationToInsured, 'value') === 'C4' ? false : true,
	        AppPayer_OtherRelation: _.get(_appPayer.relationToInsured, 'value') === 'C2' ? true : false
	    };
	});
	
	var isHasPayer = exports.isHasPayer = (0, _reselect.createSelector)(getFormInsuredAge, function (age) {
	    return age < 20;
	});
	var isNotHasPayer = exports.isNotHasPayer = (0, _reselect.createSelector)(isHasPayer, function (isHasPayer) {
	    return !isHasPayer;
	});
	
	var isFemale = exports.isFemale = (0, _reselect.createSelector)(getFormData('Insured_Gender'), function (gender) {
	    return gender === 'F';
	});
	var isMale = exports.isMale = (0, _reselect.createSelector)(getFormData('Insured_Gender'), function (gender) {
	    return gender === 'M';
	});
	var isPayerFemale = exports.isPayerFemale = (0, _reselect.createSelector)(getFormData('Payer_Gender'), function (gender) {
	    return gender === 'F';
	});
	var isPayerMale = exports.isPayerMale = (0, _reselect.createSelector)(getFormData('Payer_Gender'), function (gender) {
	    return gender === 'M';
	});
	var Insured_MaritalStatus = exports.Insured_MaritalStatus = (0, _reselect.createSelector)(getFormData('Insured_MaritalStatus'), function (value) {
	    return _.get(value, 'value') === 'M';
	});
	var Payer_MaritalStatus = exports.Payer_MaritalStatus = (0, _reselect.createSelector)(getFormData('Payer_MaritalStatus'), function (value) {
	    return _.get(value, 'value') === 'M';
	});
	var isRaceTH = exports.isRaceTH = (0, _reselect.createSelector)(getFormData('Insured_Nationality'), function (value) {
	    return _.get(value, 'value') === 'TH';
	});
	var isPayerRaceTH = exports.isPayerRaceTH = (0, _reselect.createSelector)(getFormData('Payer_Nationality'), function (value) {
	    return _.get(value, 'value') === 'TH';
	});
	var isPayerPastIllness = exports.isPayerPastIllness = (0, _reselect.createSelector)(getFormRider, function (value) {
	    return _.has(value, 'PB4N') || _.has(value, 'TRP2');
	});
	
	var getFormInsuredMobile = exports.getFormInsuredMobile = (0, _reselect.createSelector)(getFormData('Insured_MobileNo'), function (state) {
	    return state;
	});
	var getFormPayerMobile = exports.getFormPayerMobile = (0, _reselect.createSelector)(getFormData('Payer_MobileNo'), function (state) {
	    return state;
	});
	var getFormInsuredEmail = exports.getFormInsuredEmail = (0, _reselect.createSelector)(getFormData('Insured_Email'), function (state) {
	    return state;
	});
	var getFormPayerEmail = exports.getFormPayerEmail = (0, _reselect.createSelector)(getFormData('Payer_Email'), function (state) {
	    return state;
	});
	var isCiPastIllness = exports.isCiPastIllness = (0, _reselect.createSelector)(getFormRider, function (value) {
	    return _.has(value, 'HS2N') || _.has(value, 'HSHC') || _.has(value, 'HB-N') || _.has(value, 'CIR3') || _.has(value, 'CIR2') || _.has(value, 'FSDN') || _.has(value, 'OPD1') || _.has(value, 'OPD2');
	});
	var isDiabetes = exports.isDiabetes = (0, _reselect.createSelector)(getFormData('Insured_PastIllnesses'), function () {
	    var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	
	    var IllnessValue = 'p27';
	    var isHasIllness = form.filter(function (question) {
	        return question.value === IllnessValue;
	    });
	    return !!isHasIllness.length;
	});
	var isHepatitis = exports.isHepatitis = (0, _reselect.createSelector)(getFormData('Insured_PastIllnesses'), function () {
	    var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	
	    var IllnessValue = 'p9';
	    var isHasIllness = form.filter(function (question) {
	        return question.value === IllnessValue;
	    });
	    return !!isHasIllness.length;
	});
	var isTumor = exports.isTumor = (0, _reselect.createSelector)(getFormData('Insured_PastIllnesses'), function () {
	    var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	
	    var IllnessValue = 'p33';
	    var isHasIllness = form.filter(function (question) {
	        return question.value === IllnessValue;
	    });
	    return !!isHasIllness.length;
	});
	var isHbp = exports.isHbp = (0, _reselect.createSelector)(getFormData('Insured_PastIllnesses'), function () {
	    var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	
	    var IllnessValue = 'p29';
	    var isHasIllness = form.filter(function (question) {
	        return question.value === IllnessValue;
	    });
	    return !!isHasIllness.length;
	});
	var Insured_HasDiagnosis_CutOut = exports.Insured_HasDiagnosis_CutOut = (0, _reselect.createSelector)(getFormData('Insured_HasDiagnosis_CutOut'), function (status) {
	    return status === 'Y';
	});
	var Insured_HasTreatment_CutOut = exports.Insured_HasTreatment_CutOut = (0, _reselect.createSelector)(getFormData('Insured_HasTreatment_CutOut'), function (status) {
	    return status === 'Y';
	});
	var Basic_HasDividend = exports.Basic_HasDividend = (0, _reselect.createSelector)(getFormData(['ProSelection', 'HasDividend']), function (status) {
	    return status === 'Y';
	});
	var Insured_DrugWithdrawn = exports.Insured_DrugWithdrawn = (0, _reselect.createSelector)(getFormData('Insured_DrugWithdrawn'), function (status) {
	    return status === 'Y';
	});
	var Insured_AlcoholWithdrawn = exports.Insured_AlcoholWithdrawn = (0, _reselect.createSelector)(getFormData('Insured_AlcoholWithdrawn'), function (status) {
	    return status === 'Y';
	});
	var Insured_SmokeWithdrawn = exports.Insured_SmokeWithdrawn = (0, _reselect.createSelector)(getFormData('Insured_SmokeWithdrawn'), function (status) {
	    return status === 'Y';
	});
	var Insured_HealthyFlag = exports.Insured_HealthyFlag = (0, _reselect.createSelector)(getFormData('Insured_HealthyFlag'), function (status) {
	    return status === 'N';
	});
	var Insured_HasAnotherOccupation = exports.Insured_HasAnotherOccupation = (0, _reselect.createSelector)(getFormData('Insured_HasAnotherOccupation'), function (status) {
	    return status === 'Y';
	});
	var Payer_HasAnotherOccupation = exports.Payer_HasAnotherOccupation = (0, _reselect.createSelector)(getFormData('Payer_HasAnotherOccupation'), function (status) {
	    return status === 'Y';
	});
	var isPayerStudent = exports.isPayerStudent = (0, _reselect.createSelector)(getFormData('Payer_IsStudent'), function (status) {
	    return status === 'Y';
	});
	var Insured_IsStudent = exports.Insured_IsStudent = (0, _reselect.createSelector)(getFormData('Insured_IsStudent'), function (status) {
	    return status === 'Y';
	});
	var Insured_DrugFlag = exports.Insured_DrugFlag = (0, _reselect.createSelector)(getFormData('Insured_DrugFlag'), function (status) {
	    return status === 'Y';
	});
	var Insured_AlcoholFlag = exports.Insured_AlcoholFlag = (0, _reselect.createSelector)(getFormData('Insured_AlcoholFlag'), function (status) {
	    return status === 'Y';
	});
	var Insured_SmokeFlag = exports.Insured_SmokeFlag = (0, _reselect.createSelector)(getFormData('Insured_SmokeFlag'), function (status) {
	    return status === 'Y';
	});
	var Insured_HasExistingPolicies = exports.Insured_HasExistingPolicies = (0, _reselect.createSelector)(getFormData('Insured_HasExistingPolicies'), function (status) {
	    return status === 'Y';
	});
	var Insured_HasBeenRejected = exports.Insured_HasBeenRejected = (0, _reselect.createSelector)(getFormData('Insured_HasBeenRejected'), function (status) {
	    return status === 'Y';
	});
	var Insured_HasWeightChange = exports.Insured_HasWeightChange = (0, _reselect.createSelector)(getFormData('Insured_HasWeightChange'), function (status) {
	    return status === 'Y';
	});
	var Insured_WeightChangeReason = exports.Insured_WeightChangeReason = (0, _reselect.createSelector)(getFormData('Insured_WeightChangeReason'), function (status) {
	    return _.get(status, 'value') === 0;
	});
	var Dividend_PaymentOption = exports.Dividend_PaymentOption = (0, _reselect.createSelector)(getFormData('Dividend_PaymentOption'), function (status) {
	    return _.get(status, 'value') === 0;
	});
	var Insured_HasDiagnosis = exports.Insured_HasDiagnosis = (0, _reselect.createSelector)(getFormData('Insured_HasDiagnosis'), function (status) {
	    return status === 'Y';
	});
	var Insured_HasTreatment = exports.Insured_HasTreatment = (0, _reselect.createSelector)(getFormData('Insured_HasTreatment'), function (status) {
	    return status === 'Y';
	});
	var hasFamilyHistory = exports.hasFamilyHistory = (0, _reselect.createSelector)(getFormData('Insured_HasFamilyHistory'), function (status) {
	    return status === 'Y';
	});
	var Insured_HasSpouseLiverHiv = exports.Insured_HasSpouseLiverHiv = (0, _reselect.createSelector)(getFormData('Insured_HasSpouseLiverHiv'), function (status) {
	    return status === 'Y';
	});
	var hasPastIllness = exports.hasPastIllness = (0, _reselect.createSelector)(getFormData('Insured_HasPastIllness'), function (status) {
	    return status === 'Y';
	});
	var hasCiPastIllness = exports.hasCiPastIllness = (0, _reselect.createSelector)(getFormData('Insured_HasCiPastIllness'), function (status) {
	    return status === 'Y';
	});
	
	var Insured_IsPreferEPolicy = exports.Insured_IsPreferEPolicy = (0, _reselect.createSelector)(getFormData('Insured_IsPreferEPolicy'), function (status) {
	    return _.get(status, 'value', 'N') === 'Y';
	});
	
	var InsuredDiabetesAnother = exports.InsuredDiabetesAnother = (0, _reselect.createSelector)(getFormData('Insured_Diabetes_Treatments_Treatment'), function () {
	    var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	    return _.chain(form).map('value').includes(2).value();
	});
	var InsuredDiabetesPill = exports.InsuredDiabetesPill = (0, _reselect.createSelector)(getFormData('Insured_Diabetes_Treatments_Treatment'), function () {
	    var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	    return _.chain(form).map('value').includes(1).value();
	});
	var Insured_Hepatitis_Diagnoseds = exports.Insured_Hepatitis_Diagnoseds = (0, _reselect.createSelector)(getFormData('Insured_Hepatitis_Diagnoseds'), function () {
	    var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	    return _.chain(form).map('value').includes(5).value();
	});
	var Insured_Tumor_Treatments_Treatment_Other = exports.Insured_Tumor_Treatments_Treatment_Other = (0, _reselect.createSelector)(getFormData('Insured_Tumor_Treatments'), function () {
	    var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	    return _.chain(form).map('value').includes(2).value();
	});
	var Insured_Tumor_Treatments_Treatment_Chemo = exports.Insured_Tumor_Treatments_Treatment_Chemo = (0, _reselect.createSelector)(getFormData('Insured_Tumor_Treatments'), function () {
	    var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	    return _.chain(form).map('value').includes(1).value();
	});
	var Insured_Tumor_Treatments_Treatment_Radio = exports.Insured_Tumor_Treatments_Treatment_Radio = (0, _reselect.createSelector)(getFormData('Insured_Tumor_Treatments'), function () {
	    var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	    return _.chain(form).map('value').includes(0).value();
	});
	var Insured_Diabetes_HasFamily = exports.Insured_Diabetes_HasFamily = (0, _reselect.createSelector)(getFormData('Insured_Diabetes_HasFamily'), function (status) {
	    return status === 'Y';
	});
	var Insured_Diabetes_UrineTestResult = exports.Insured_Diabetes_UrineTestResult = (0, _reselect.createSelector)(getFormData('Insured_Diabetes_UrineTestResult'), function (status) {
	    return status === 0;
	});
	var Insured_Diabetes_BloodTest = exports.Insured_Diabetes_BloodTest = (0, _reselect.createSelector)(getFormData('Insured_Diabetes_BloodTest'), function (status) {
	    return status === 'Y';
	});
	var Insured_Diabetes_HasCxr = exports.Insured_Diabetes_HasCxr = (0, _reselect.createSelector)(getFormData('Insured_Diabetes_HasCxr'), function (status) {
	    return status === 'Y';
	});
	var Insured_Diabetes_HasEkg = exports.Insured_Diabetes_HasEkg = (0, _reselect.createSelector)(getFormData('Insured_Diabetes_HasEkg'), function (status) {
	    return status === 'Y';
	});
	var Insured_Hbp_CurrentInTreatment = exports.Insured_Hbp_CurrentInTreatment = (0, _reselect.createSelector)(getFormData('Insured_Hbp_CurrentInTreatment'), function (status) {
	    return status === 'Y';
	});
	var Insured_Hbp_Not_CurrentInTreatment = exports.Insured_Hbp_Not_CurrentInTreatment = (0, _reselect.createSelector)(getFormData('Insured_Hbp_CurrentInTreatment'), function (status) {
	    return status === 'N';
	});
	var Insured_Hbp_HasCxr = exports.Insured_Hbp_HasCxr = (0, _reselect.createSelector)(getFormData('Insured_Hbp_HasCxr'), function (status) {
	    return status === 'Y';
	});
	var Insured_Hbp_HasEkg = exports.Insured_Hbp_HasEkg = (0, _reselect.createSelector)(getFormData('Insured_Hbp_HasEkg'), function (status) {
	    return status === 'Y';
	});
	var Insured_HighBp_SmokeFlag = exports.Insured_HighBp_SmokeFlag = (0, _reselect.createSelector)(getFormData('Insured_Hbp_SmokeFlag'), function (status) {
	    return status === 'Y';
	});
	var Insured_Hepatitis_Heptatomegaly = exports.Insured_Hepatitis_Heptatomegaly = (0, _reselect.createSelector)(getFormData('Insured_Hepatitis_Heptatomegaly'), function (status) {
	    return status === 'Y';
	});
	var Insured_Hepatitis_BloodTest = exports.Insured_Hepatitis_BloodTest = (0, _reselect.createSelector)(getFormData('Insured_Hepatitis_BloodTest'), function (status) {
	    return status === 'Y';
	});
	var Insured_Hepatitis_UltrasoundTest = exports.Insured_Hepatitis_UltrasoundTest = (0, _reselect.createSelector)(getFormData('Insured_Hepatitis_UltrasoundTest'), function (status) {
	    return status === 'Y';
	});
	var Insured_Hepatitis_HasAlcohol = exports.Insured_Hepatitis_HasAlcohol = (0, _reselect.createSelector)(getFormData('Insured_Hepatitis_Diagnoseds'), function () {
	    var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	    return _.chain(form).map('value').includes(3).value();
	});
	var Insured_Tumor_BeenOperated = exports.Insured_Tumor_BeenOperated = (0, _reselect.createSelector)(getFormData('Insured_Tumor_BeenOperated'), function (status) {
	    return status === 'Y';
	});
	var Insured_Tumor_Followup = exports.Insured_Tumor_Followup = (0, _reselect.createSelector)(getFormData('Insured_Tumor_Followup'), function (status) {
	    return status === 'Y';
	});
	var Insured_Tumor_Treatment = exports.Insured_Tumor_Treatment = (0, _reselect.createSelector)(getFormData('Insured_Tumor_Treatment'), function (status) {
	    return status === 'Y';
	});
	var Insured_Tumor_SpecialTreatment = exports.Insured_Tumor_SpecialTreatment = (0, _reselect.createSelector)(getFormData('Insured_Tumor_SpecialTreatment'), function (status) {
	    return status === 'Y';
	});
	var Insured_Tumor_Recurrence = exports.Insured_Tumor_Recurrence = (0, _reselect.createSelector)(getFormData('Insured_Tumor_Recurrence'), function (status) {
	    return status === 'Y';
	});
	var Insured_Tumor_DiagnosedAsMalicious = exports.Insured_Tumor_DiagnosedAsMalicious = (0, _reselect.createSelector)(getFormData('Insured_Tumor_DiagnosedAsMalicious'), function (status) {
	    return status === 'Y';
	});
	var Payer_RelationToInsured = exports.Payer_RelationToInsured = (0, _reselect.createSelector)(getFormData('Payer_RelationToInsured'), function (value) {
	    return _.get(value, 'value') === 'C2';
	});
	var Payer_HasBeenRejected = exports.Payer_HasBeenRejected = (0, _reselect.createSelector)(getFormData('Payer_HasBeenRejected'), function (status) {
	    return status === 'Y';
	});
	var Payer_DrugFlag = exports.Payer_DrugFlag = (0, _reselect.createSelector)(getFormData('Payer_DrugFlag'), function (status) {
	    return status === 'Y';
	});
	var Payer_DrugWithdrawn = exports.Payer_DrugWithdrawn = (0, _reselect.createSelector)(getFormData('Payer_DrugWithdrawn'), function (status) {
	    return status === 'Y';
	});
	var Payer_HasWeightChange = exports.Payer_HasWeightChange = (0, _reselect.createSelector)(getFormData('Payer_HasWeightChange'), function (status) {
	    return status === 'Y';
	});
	var Payer_WeightChangeReason = exports.Payer_WeightChangeReason = (0, _reselect.createSelector)(getFormData('Payer_WeightChangeReason'), function (status) {
	    return _.get(status, 'value') === 0;
	});
	var hasPayerPastIllness = exports.hasPayerPastIllness = (0, _reselect.createSelector)(getFormData('Payer_HasPastIllness'), function (status) {
	    return status === 'Y';
	});
	var hasPayerCiPastIllness = exports.hasPayerCiPastIllness = (0, _reselect.createSelector)(getFormData('Payer_HasCiPastIllness'), function (status) {
	    return status === 'Y';
	});
	var Payer_HasDiagnosis = exports.Payer_HasDiagnosis = (0, _reselect.createSelector)(getFormData('Payer_HasDiagnosis'), function (status) {
	    return status === 'Y';
	});
	var Payer_HasTreatment = exports.Payer_HasTreatment = (0, _reselect.createSelector)(getFormData('Payer_HasTreatment'), function (status) {
	    return status === 'Y';
	});
	
	var Fatca_Q1 = exports.Fatca_Q1 = (0, _reselect.createSelector)(getFormData('Fatca_Q1'), function (value) {
	    return _.get(value, 'value') === 'Y';
	});
	
	var isValidProduct = exports.isValidProduct = (0, _reselect.createSelector)(getFormProduct, getFormProductResult, function (ProSelection, ProResult) {
	    var validBasic = !_.has(ProResult, 'ERRORS') && !_.has(ProResult, 'ERROR_PAYMENT_MODE');
	    var validRider = _.every(_.get(ProResult, 'RIDERS'), function (result) {
	        return !_.has(result, 'ERRORS');
	    });
	
	    return !_.isEmpty(ProSelection) && !_.isEmpty(ProResult) && validBasic && validRider;
	});
	
	var isEffectProduct = exports.isEffectProduct = function isEffectProduct(payload) {
	    var PRODUCT_EFFECT_PROPS = ['Insured_BirthDate', 'Insured_ThName_Title', 'Insured_Occupation1_Occupation', 'Payer_RoundedAge', 'Payer_Gender', 'Payer_Occupation1_Occupation'];
	
	    if (_.get(payload, 0) === 'ProSelection') {
	        return _.has(payload, [1, 'ProdCode']) || _.has(payload, [1, 'SA']) || _.has(payload, [1, 'PREMIUM']);
	    } else {
	        return _.some(PRODUCT_EFFECT_PROPS, function (prop) {
	            return _.get(payload, 0) === prop;
	        });
	    }
	};
	
	var getOADModelWithQuotation = exports.getOADModelWithQuotation = (0, _reselect.createSelector)(function (state) {
	    var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    return form;
	}, getAgent, function (form, agent) {
	    return {
	        AgentInfo: agent,
	        Quotation: form
	    };
	});
	
	var getOADModel = exports.getOADModel = (0, _reselect.createSelector)(getForm, getAgent, isAdult, function (form, agent, isAdultForm) {
	    var InsOccuClass = isAdultForm ? (0, _fp.get)('Insured_Occupation1_Occupation.OccuClass')(form) : 1;
	    return {
	        AgentInfo: agent,
	        Quotation: _extends({}, form, {
	            ProSelection: (0, _fp.getOr)({}, 'ProSelection')(form),
	            ProResult: (0, _fp.getOr)({}, 'ProResult')(form),
	            InsAge: (0, _fp.get)('Insured_RoundedAge')(form),
	            InsGender: (0, _fp.get)('Insured_Gender')(form),
	            InsOccu: (0, _fp.get)('Insured_Occupation1_Occupation')(form),
	            InsOccuClass: InsOccuClass,
	            PayAge: (0, _fp.get)('Payer_RoundedAge')(form),
	            PayGender: (0, _fp.get)('Payer_Gender')(form),
	            PayOccuClass: (0, _fp.get)('Payer_Occupation1_Occupation.OccuClass')(form),
	            PayOccu: (0, _fp.get)('Payer_Occupation1_Occupation')(form),
	            PaymentMode: (0, _fp.get)('PaymentOption')(form)
	        })
	    };
	});
	
	var checkReadyPremiumCalculation = exports.checkReadyPremiumCalculation = (0, _reselect.createSelector)(getOADModel, isAdult, function (_ref3, isAdultForm) {
	    var Quotation = _ref3.Quotation;
	
	    if (isAdultForm) {
	        var adultCheckList = _.pick(Quotation, ['InsAge', 'InsGender', 'InsOccu']);
	        return _.every(adultCheckList, function (item) {
	            return !_.isNil(item);
	        });
	    }
	    var juvenileCheckList = _.pick(Quotation, ['InsAge', 'InsGender']);
	    return _.every(juvenileCheckList, function (item) {
	        return !_.isNil(item);
	    });
	});
	
	var isInvalidWPF = exports.isInvalidWPF = (0, _reselect.createSelector)(getFormInsuredAge, getFormProduct, getFormRider, function (InsAge, ProSelection, selectedRider) {
	    return function () {
	        var rider = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : selectedRider;
	
	        var type = _.get(ProSelection, 'PlanPremiumType');
	        var AttachProductCode = _.get(ProSelection, 'AttachProductCode');
	        if (_.has(rider, 'WP-F') || AttachProductCode === '["WP-F"]') {
	            var term = _.get(ProSelection, 'PlanPremiumTerm');
	
	            if (type === 'FIX') {
	                term = term - InsAge;
	            }
	
	            return Math.min(term, 60 - InsAge) < 5;
	        }
	
	        return false;
	    };
	});
	var isInvalidWPB = exports.isInvalidWPB = (0, _reselect.createSelector)(getFormInsuredAge, getFormProduct, getFormRider, function (InsAge, ProSelection, selectedRider) {
	    return function () {
	        var rider = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : selectedRider;
	        var SA = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ProSelection['SA'];
	
	        var type = _.get(ProSelection, 'PlanPremiumType');
	
	        if (_.has(rider, 'WP-B')) {
	            if (SA <= 4000000) {
	                return true;
	            }
	
	            var term = _.get(ProSelection, 'PlanPremiumTerm');
	
	            if (type === 'FIX') {
	                term = term - InsAge;
	            }
	
	            return Math.min(term, 60 - InsAge) < 5;
	        }
	
	        return false;
	    };
	});
	var isInvalidPB4N = exports.isInvalidPB4N = (0, _reselect.createSelector)(getFormInsuredAge, getPayerAge, getFormProduct, getFormRider, function (InsAge, PayAge, ProSelection, selectedRider) {
	    return function () {
	        var rider = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : selectedRider;
	
	        var type = _.get(ProSelection, 'PlanPremiumType');
	
	        if (_.has(rider, 'PB4N')) {
	            var term = _.get(ProSelection, 'PlanPremiumTerm');
	
	            if (type === 'FIX') {
	                term = term - InsAge;
	            }
	
	            return Math.min(term, 60 - PayAge, 25 - InsAge) < 5;
	        }
	
	        return false;
	    };
	});
	var isInvalidWPTR = exports.isInvalidWPTR = (0, _reselect.createSelector)(getFormInsuredAge, getFormProduct, getFormRider, function (InsAge, ProSelection, selectedRider) {
	    return function () {
	        var rider = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : selectedRider;
	
	        var type = _.get(ProSelection, 'PlanPremiumType');
	
	        if (_.has(rider, 'WPTR') || _.has(rider, 'TR2N')) {
	            var term = _.get(rider, ['TR2N', 'PlanPremiumTerm']);
	
	            if (_.isInteger(term)) {
	                return Math.min(term, 60 - InsAge) < 5;
	            }
	
	            return false;
	        }
	
	        return false;
	    };
	});
	
	var isInvalidTR2N = exports.isInvalidTR2N = (0, _reselect.createSelector)(getFormInsuredAge, getFormProduct, getFormRider, function (InsAge, ProSelection, selectedRider) {
	    return function () {
	        var rider = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : selectedRider;
	
	        // const type = _.get(ProSelection, 'PlanPremiumType');
	        // if (_.has(rider, 'TR2N')) {
	        //     let term = _.get(ProSelection, ['PlanPremiumTerm']);
	        //     if (type === 'FIX') {
	        //         term = term - InsAge;
	        //     }
	
	        //     if (_.isInteger(term)) {
	        //         return Math.min(term, 60 - InsAge) < 5;
	        //     }
	
	        //     return false;
	        // }
	
	        return false;
	    };
	});
	
	var mergeQuestionToSlide = function mergeQuestionToSlide(questionHash) {
	    return function (_ref4) {
	        var questions = _ref4.questions,
	            props = _objectWithoutProperties(_ref4, ['questions']);
	
	        return _extends({}, props, {
	            questions: _.map(questions, function (id) {
	                return _.extend({
	                    id: id
	                }, _.get(questionHash, id));
	            })
	        });
	    };
	};
	
	var getSlideList = exports.getSlideList = (0, _reselect.createSelector)(getFormTemplate, getFormSlides, function (_ref5, slides) {
	    var question = _ref5.question;
	
	    return _(slides).map(mergeQuestionToSlide(question)).reject(function (_ref6) {
	        var questions = _ref6.questions,
	            hidden = _ref6.hidden;
	        return _.every(questions, ['condition', false]) || hidden === true;
	    }).value();
	});
	var getSlideListByQuestion = exports.getSlideListByQuestion = (0, _reselect.createSelector)(getSlideList, function (state, questionId) {
	    return questionId;
	}, function (slideList, questionId) {
	    return _.filter(slideList, function (slide) {
	        return _(slide).chain().get('questions').map('id').includes(questionId).value();
	    });
	});
	
	var getSectionList = exports.getSectionList = (0, _reselect.createSelector)(getFormTemplate, getFormSlides, function (_ref7, slides) {
	    var sections = _ref7.sections,
	        question = _ref7.question;
	
	    var slideSectionHash = _(slides).map(mergeQuestionToSlide(question)).reject(function (_ref8) {
	        var questions = _ref8.questions;
	        return _.every(questions, ['condition', false]);
	    }).groupBy(function (obj) {
	        return _.get(obj, ['questions', 0, 'sectionId']);
	    }).value();
	    return _(sections).map(function (section) {
	        return _extends({}, section, {
	            slides: _.get(slideSectionHash, _.get(section, 'id'))
	        });
	    }).filter(function (_ref9) {
	        var slides = _ref9.slides;
	        return !_.isEmpty(slides);
	    }).value();
	});
	
	var currentSection = exports.currentSection = (0, _reselect.createSelector)(getSlideList, getFormTemplateSections, getFormCurrentIndex, getFormTemplateQuestion, function (slides, sections, currentIndex, questions) {
	    var sectionId = _.get(slides[currentIndex], ['questions', 0, 'sectionId']);
	    if (_.isNil(sectionId)) {
	        var parent = _.get(slides[currentIndex], 'parent');
	        if (_.isNil(parent)) {
	            return null;
	        }
	        sectionId = _.get(questions, [parent, 'sectionId']);
	    }
	    var actualSection = _.find(sections, function (section) {
	        return sectionId === section.id;
	    });
	    return _.get(actualSection, 'label');
	});
	
	var getFormQuestion = exports.getFormQuestion = (0, _reselect.createSelector)(getSlideList, function (slideList) {
	    return _(slideList).map('questions').flatten().keyBy('id').value();
	});
	var getFormRequiredQuestion = exports.getFormRequiredQuestion = (0, _reselect.createSelector)(getFormQuestion, function (question) {
	    return _.pickBy(question, ['required', true]);
	});
	var getFormOptionalQuestion = exports.getFormOptionalQuestion = (0, _reselect.createSelector)(getFormQuestion, function (question) {
	    return _.pickBy(question, ['required', false]);
	});
	
	var getDocumentProgress = exports.getDocumentProgress = (0, _reselect.createSelector)(getDocumentFileListWithRequired, getDocumentsListFromSQL, function (docs, DocumentsListSQL) {
	    if (_.isEmpty(docs)) {
	        return 0;
	    }
	    var RequireList = _.chain(DocumentsListSQL).filter({ isRequired: 'Y' }).map('value').value();
	    var total = _.size(RequireList);
	    var current = _.chain(docs).filter(function (doc) {
	        return _.every(doc, function (file) {
	            return file.status === Constants.STATUS_UPLOAD_FINISHED;
	        });
	    }).size().value();
	    var result = total > 0 ? Math.floor(current * 100 / total) : 0;
	    return result;
	});
	
	var getFormOnlyValue = exports.getFormOnlyValue = (0, _reselect.createSelector)(getCurrentForm, function (form) {
	    return _(form).omitBy(function (value, key) {
	        if (key === 'ProSelection') {
	            var ProResult = _.get(form, 'ProResult');
	            var basicError = _.get(ProResult, 'ERRORS', []);
	            var ridersError = _.chain(ProResult).get('RIDERS', {}).filter(function (_ref10) {
	                var _ref10$ERRORS = _ref10.ERRORS,
	                    ERRORS = _ref10$ERRORS === undefined ? [] : _ref10$ERRORS;
	                return !_.isEmpty(ERRORS);
	            }).value();
	
	            return !_.isEmpty(basicError) || !_.isEmpty(ridersError);
	        }
	
	        if (_.isObject(value) && _.has(value, 'value')) {
	            var rawValue = _.get(value, 'value');
	            return _.isNil(rawValue) || rawValue === '';
	        }
	
	        return _.isNil(value) || value === '';
	    }).keys().value();
	});
	var getFormProgress = exports.getFormProgress = (0, _reselect.createSelector)(getFormOnlyValue, (0, _reselect.createSelector)(getSlideList, getFormInvalid, function (state, sectionId) {
	    return sectionId;
	}, function (slides, invalidForm, sectionId) {
	    return _(slides).map('questions').flatten().thru(function (list) {
	        return _.isNil(sectionId) ? list : _.filter(list, ['sectionId', sectionId]);
	    }).reject(function (_ref11) {
	        var condition = _ref11.condition;
	        return condition !== true;
	    }).reject(function (_ref12) {
	        var required = _ref12.required;
	        return required !== true;
	    }).map(function (_ref13) {
	        var id = _ref13.id;
	
	        if (_.indexOf(Object.keys(invalidForm), getFormQuestionId(id)) === -1) {
	            return getFormQuestionId(id);
	        }
	        return false;
	    }).uniq().value();
	}), function (form, template) {
	    if (_.isEmpty(template)) {
	        return 0;
	    }
	
	    var length = _.size(template);
	    var current = _(form).intersection(template).size();
	
	    return Math.floor(current * 100 / (length || 1));
	});
	
	var getSectionListWithProgress = exports.getSectionListWithProgress = (0, _reselect.createSelector)(getFormOnlyValue, getSectionList, getSlideList, getFormInvalid, function (form, sections, slides, invalidForm) {
	    var flatSlides = _(slides).slice(0).map('questions').flatten();
	
	    return _.map(sections, function (item) {
	        var sectionId = _.get(item, 'id');
	        var label = _.get(item, 'label');
	
	        var slideIndex = _(slides).findIndex(function (item) {
	            return _.chain(item).get('questions[0].sectionId').isEqual(sectionId).value();
	        });
	
	        var template = flatSlides.remove(['sectionId', sectionId]).reject(function (_ref14) {
	            var condition = _ref14.condition;
	            return condition !== true;
	        }).reject(function (_ref15) {
	            var required = _ref15.required;
	            return required !== true;
	        }).map(function (_ref16) {
	            var id = _ref16.id;
	
	            if (_.indexOf(Object.keys(invalidForm), getFormQuestionId(id)) === -1) {
	                return getFormQuestionId(id);
	            }
	            return false;
	        }).uniq().value();
	
	        var value = void 0;
	        if (_.isEmpty(template)) {
	            value = 0;
	            return {};
	        } else {
	            var length = _.size(template);
	            var current = _(form).intersection(template).size();
	            value = Math.floor(current * 100 / (length || 1));
	            return {
	                id: sectionId,
	                label: label,
	                slideIndex: slideIndex,
	                value: value
	            };
	        }
	    });
	});
	
	var getEappPageLength = exports.getEappPageLength = (0, _reselect.createSelector)(getPageLength, getPageLimit, function (length, limit) {
	    return length / limit;
	});
	
	var getEappPage = exports.getEappPage = (0, _reselect.createSelector)(getEappList, getPageLimit, getPageCurrentIndex, function (list, pageLimit, pageCurrentIndex) {
	    var start = pageCurrentIndex * pageLimit;
	    var end = start + pageLimit;
	
	    return _.slice(list, start, end);
	});
	
	var transformTemplate = exports.transformTemplate = (0, _reselect.createSelector)(function (state, _ref17) {
	    var _ref17$sections = _ref17.sections,
	        sections = _ref17$sections === undefined ? [] : _ref17$sections,
	        _ref17$question = _ref17.question,
	        question = _ref17$question === undefined ? {} : _ref17$question;
	    var extendQuestion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	    return {
	        sections: sections,
	        question: (0, _utils.mergeAndConcat)(extendQuestion)(question)
	    };
	}, function (state) {
	    return state;
	}, function (_ref18, state) {
	    var sections = _ref18.sections,
	        question = _ref18.question;
	
	    var isTrue = function isTrue(value) {
	        return _.isString(value) ? _.invoke(exports, value, state) : value;
	    };
	    var isShow = function isShow(condition) {
	        if (_.isString(condition) || _.isArray(condition)) {
	            return _([]).concat(condition).reject(_.isNil).every(isTrue);
	        } else if (_.isBoolean(condition)) {
	            return condition;
	        }
	        return true;
	    };
	
	    var transformSections = _(sections).map(function (obj) {
	        var condition = _.get(obj, 'condition');
	        return _extends({}, obj, {
	            condition: isShow(condition)
	        });
	    }).value();
	    var transformSectionHash = _.keyBy(transformSections, 'id');
	    var transformQuestion = _(question).mapValues(function (obj) {
	        var condition = _.get(obj, 'condition');
	        var sectionId = _.get(obj, 'sectionId');
	
	        var isShowSection = _.get(transformSectionHash, [sectionId, 'condition'], true);
	        var isShowSlide = isShow(condition);
	
	        return _extends({}, obj, {
	            condition: _.isNil(condition) || isShowSlide ? isShowSection : isShowSlide
	        });
	    }).mapValues(function (obj) {
	        var required = _.get(obj, 'required', false);
	
	        if (_.isString(required) || _.isArray(required)) {
	            required = isShow(required, true, obj);
	        }
	
	        return _extends({}, obj, {
	            required: required
	        });
	    }).value();
	    return {
	        sections: transformSections,
	        question: transformQuestion
	    };
	});
	
	var getMasterGroupBasicList = exports.getMasterGroupBasicList = (0, _reselect.createSelector)(getMasterBasic, function (_ref19) {
	    var group = _ref19.group,
	        product = _ref19.product;
	    return _(group).map(function (_ref20) {
	        var label = _ref20.label,
	            ProdGrpId = _ref20.ProdGrpId;
	        return {
	            label: label,
	            id: ProdGrpId,
	            list: _.filter(product, ['ProdGrpId', ProdGrpId])
	        };
	    }).value();
	});
	var getMasterGroupRiderList = exports.getMasterGroupRiderList = (0, _reselect.createSelector)(getMasterRider, function (_ref21) {
	    var group = _ref21.group,
	        product = _ref21.product;
	    return _(group).map(function (_ref22) {
	        var label = _ref22.label,
	            ProdGrpId = _ref22.ProdGrpId;
	        return {
	            label: label,
	            id: ProdGrpId,
	            list: _.filter(product, ['ProdGrpId', ProdGrpId])
	        };
	    }).value();
	});
	
	var getMasterRiderHash = exports.getMasterRiderHash = (0, _reselect.createSelector)(getMasterRiderProduct, function (riderList) {
	    return _(riderList).map(function (obj) {
	        return _extends({}, obj, {
	            options: _.keyBy(obj.options, 'PlanCode')
	        });
	    }).keyBy('ProdCode').value();
	});
	
	var getGroupedRiderList = exports.getGroupedRiderList = (0, _reselect.createSelector)(getMasterGroupRiderList, getFormRider, getFormProduct, isInvalidWPF, isInvalidWPB, isInvalidWPTR, isInvalidPB4N, isInvalidTR2N, function (riderList, selectedRider, ProSelection, isInvalidWPF, isInvalidWPB, isInvalidWPTR, isInvalidPB4N, isInvalidTR2N) {
	    return _.map(riderList, function (obj, index) {
	        var notAttachProductList = _(selectedRider).map('NotAttachProductCode').compact().map(function (notAttachProductCode) {
	            return JSON.parse(notAttachProductCode);
	        }).flatten().value();
	
	        return _extends({}, obj, {
	            list: _.map(obj.list, function (obj) {
	                var parentProductCode = obj['ParentProductCode'];
	
	                var inactive = false;
	                if (!_.isEmpty(parentProductCode)) {
	                    var list = JSON.parse(parentProductCode);
	                    var keys = _.keys(selectedRider);
	                    inactive = _.intersection(keys, list).length === 0;
	                }
	
	                if (_.includes(notAttachProductList, obj['ProdCode'])) {
	                    inactive = true;
	                }
	
	                var rider = _defineProperty({}, obj['ProdCode'], obj);
	
	                if (obj['ProdCode'] === 'WP-F' && isInvalidWPF(rider)) {
	                    inactive = true;
	                }
	
	                if (obj['ProdCode'] === 'WP-B' && isInvalidWPB(rider)) {
	                    inactive = true;
	                }
	
	                if (obj['ProdCode'] === 'WPTR' && isInvalidWPTR(rider)) {
	                    inactive = true;
	                }
	
	                if (obj['ProdCode'] === 'PB4N' && isInvalidPB4N(rider)) {
	                    inactive = true;
	                }
	
	                if (obj['ProdCode'] === 'TR2N' && isInvalidTR2N(rider)) {
	                    console.log('------------------>', isInvalidTR2N(rider));
	                    inactive = true;
	                }
	
	                return _extends({}, obj, {
	                    inactive: inactive
	                });
	            })
	        });
	    });
	});
	
	var getGroupSelectedRider = exports.getGroupSelectedRider = (0, _reselect.createSelector)(getFormRider, function (selectedRider) {
	    return _(selectedRider).groupBy('ProdGrpId').value();
	});
	
	var getSelectedRiderList = exports.getSelectedRiderList = (0, _reselect.createSelector)((0, _reselect.createSelector)(getMasterRiderProduct, function (riderList) {
	    return _.keyBy(riderList, 'ProdCode');
	}), getFormRider, function (riderHash, selectedRiderList) {
	    var RCCRiders = ['RCC3', 'RCC4', 'RCC5'];
	    return _(selectedRiderList).mapValues(function (rider, id) {
	        return _extends({}, rider, riderHash[id] || {});
	    }).values().reduce(function (result, val) {
	        if (_.includes(RCCRiders, val.ProdCode)) {
	            return result;
	        }
	        if (!_.isNil(val.AttachProductCode) && _.isArray(JSON.parse(val.AttachProductCode))) {
	            var list = _.filter(JSON.parse(val.AttachProductCode), function (p) {
	                return _.includes(RCCRiders, p);
	            });
	            return _.chain([].concat(_toConsumableArray(result), [val, _.map(list, function (ProdCode) {
	                return _.find(selectedRiderList, { ProdCode: ProdCode });
	            })])).compact().flatten().value();
	        }
	        return [].concat(_toConsumableArray(result), [val]);
	    }, []);
	    // .orderBy(['ProdGrpId', 'ProdCode', 'PlanCode'], ['asc', 'asc', 'asc'])
	});
	
	var getProductPage = exports.getProductPage = (0, _reselect.createSelector)(isFormTypePA, getLanguage, getFormProductPayment, getFormProduct, getFormProductResult, getMasterGroupBasicList, getGroupedRiderList, getGroupSelectedRider, getMasterRiderHash, getMasterPaymentMode, getSelectedRiderList, function (isFormTypePA, language, PaymentOption, ProSelection, ProResult, basicList, riderList, groupRider, riderHash, paymentModeList, selectedRiderList) {
	    return {
	        isFormTypePA: isFormTypePA,
	        language: language,
	        PaymentOption: PaymentOption,
	        ProSelection: ProSelection,
	        ProResult: ProResult,
	        basicList: basicList,
	        riderList: riderList,
	        groupRider: groupRider,
	        riderHash: riderHash,
	        paymentModeList: paymentModeList,
	        selectedRiderList: selectedRiderList
	    };
	});
	
	var getReducedEappHash = exports.getReducedEappHash = (0, _reselect.createSelector)(getEappList, getEappStatus, function (list, eappStatus) {
	    return reduceEappObject(list, eappStatus);
	});
	
	var reduceEappObject = function reduceEappObject(list, eappStatus) {
	    return _.reduce(list, function (_ref23, item) {
	        var reducedAppHash = _ref23.reducedAppHash,
	            agentList = _ref23.agentList;
	        var appId = item.appId,
	            _item$Status = item.Status,
	            status = _item$Status === undefined ? 'DR' : _item$Status,
	            _item$ProResult = item.ProResult,
	            ProResult = _item$ProResult === undefined ? {} : _item$ProResult,
	            _item$ProSelection = item.ProSelection,
	            ProSelection = _item$ProSelection === undefined ? {} : _item$ProSelection;
	
	        var Status = _.isEqual(status, 'ER') ? 'QU' : status;
	        // if (_.includes(['WD', 'DV', 'PO'], Status)) {
	        //     // Timestamp for Dev testing 1483252369000
	        //     const diffStatusModified = moment
	        //         .duration(Date.now())
	        //         .subtract(item.StatusModified)
	        //         .asDays();
	
	        //     if (diffStatusModified >= 45) {
	        //         return result;
	        //     }
	        // }
	
	        var _ProSelection$RIDERS = ProSelection.RIDERS,
	            RIDERS = _ProSelection$RIDERS === undefined ? {} : _ProSelection$RIDERS;
	
	        var RCCRiders = ['RCC3', 'RCC4', 'RCC5'];
	        var mappedRiders = _(RIDERS)
	        // .orderBy(['ProdGrpId', 'ProdCode', 'PlanCode'], ['asc', 'asc', 'asc'])
	        .filter(function (rider) {
	            return !_.get(rider, 'paAttach', false);
	        }).reduce(function (result, val) {
	            if (_.includes(RCCRiders, val.ProdCode)) {
	                return result;
	            }
	            if (!_.isNil(val.AttachProductCode) && _.isArray(JSON.parse(val.AttachProductCode))) {
	                var _list = _.filter(JSON.parse(val.AttachProductCode), function (p) {
	                    return _.includes(RCCRiders, p);
	                });
	                return _.chain([].concat(_toConsumableArray(result), [val, _.map(_list, function (ProdCode) {
	                    return _.find(RIDERS, { ProdCode: ProdCode });
	                })])).compact().flatten().value();
	            }
	            return [].concat(_toConsumableArray(result), [val]);
	        }, []).map(function (rider) {
	            return {
	                code: _.get(rider, 'ProdCode'),
	                name: _.get(rider, 'ProdNameTh'),
	                sa: _.get(rider, 'SA', '-'),
	                premium: _.get(rider, 'PREMIUM', '-')
	            };
	        });
	
	        var insured = {
	            nameTitle: _.get(item, ['Insured_ThName_Title', 'label', 'th']),
	            firstName: _.get(item, 'Insured_ThName_First'),
	            lastName: _.get(item, 'Insured_ThName_Last'),
	            age: _.get(item, 'Insured_RoundedAge'),
	            gender: _.get(item, 'Insured_Gender'),
	            document: _.get(item, ['Insured_IdType', 'label', 'th']),
	            idNumber: _.get(item, ['Insured_IdNo', 'label']),
	            martialStatus: _.get(item, 'Insured_MaritalStatus'),
	            height: _.get(item, ['Insured_Height', 'value']),
	            weight: _.get(item, ['Insured_Weight', 'value'])
	        };
	
	        var payer = {
	            nameTitle: _.get(item, ['Payer_ThName_Title', 'label', 'th']),
	            firstName: _.get(item, 'Payer_ThName_First'),
	            lastName: _.get(item, 'Payer_ThName_Last'),
	            age: _.get(item, 'Payer_RoundedAge'),
	            gender: _.get(item, 'Payer_Gender'),
	            document: _.get(item, 'Payer_IdType'),
	            idNumber: _.get(item, ['Payer_IdNo', 'label']),
	            martialStatus: _.get(item, 'Payer_MaritalStatus'),
	            height: _.get(item, ['Payer_Height', 'value']),
	            weight: _.get(item, ['Payer_Weight', 'value'])
	        };
	
	        var policyItem = _.get(item, 'Policy', {});
	        var policy = {
	            policyNo: _.get(policyItem, 'PolicyNo', '-'),
	            label: {
	                en: _.get(policyItem, 'PolicyStatusEN', '-'),
	                th: _.get(policyItem, 'PolicyStatusTH', '-')
	            },
	            amount: _.get(policyItem, 'MemoAmount', '-'),
	            memoFileUrl: {
	                errors: _.get(policyItem, ['URLMemoFileAddress', 'Errors'], []),
	                file: _.get(policyItem, ['URLMemoFileAddress', 'FileAddress'])
	            },
	            counterFileUrl: {
	                errors: _.get(policyItem, ['URLCounterFileAddress', 'Errors'], []),
	                file: _.get(policyItem, ['URLCounterFileAddress', 'FileAddress'])
	            }
	        };
	
	        var memos = _(_.get(policyItem, 'Memos', [])).map(function (item) {
	            return {
	                code: _.get(item, 'MemoCode', '-'),
	                desc: _.get(item, 'MemoDesc', '-'),
	                life: _.get(item, 'Life', '-')
	            };
	        }).value();
	
	        var questionnaires = _(_.get(policyItem, 'Questionnaires')).map(function (item) {
	            return {
	                code: _.get(item, 'MemoCode', '-'),
	                desc: _.get(item, 'MemoDesc', '-'),
	                questionnairesFileUrl: {
	                    errors: _.get(item, ['URLMemoFileAddress', 'Errors'], []),
	                    file: _.get(item, ['URLMemoFileAddress', 'FileAddress'])
	                }
	            };
	        }).value();
	
	        var agent = {
	            code: _.get(item, 'AgentInfo_AgentCode'),
	            name: _.get(item, ['AgentInfo_AgentName', 'th']),
	            branch: _.get(item, ['AgentInfo_AgentBranch', 'th']),
	            license: _.get(item, 'AgentInfo_AgentLicenseNo'),
	            unitCode: _.get(item, 'AgentInfo_AgentUnitCode'),
	            unitName: _.get(item, 'AgentInfo_AgentUnitName'),
	            AgentInfo_AgentOjtName: _.get(item, 'AgentInfo_AgentOjtName'),
	            AgentInfo_AgentOjtCode: _.get(item, 'AgentInfo_AgentOjtCode'),
	            AgentInfo_AgentOjtUnitCode: _.get(item, 'AgentInfo_AgentOjtUnitCode'),
	            creator: _.get(item, ['AgentCreator'])
	        };
	
	        agentList.push(agent);
	
	        var mainPerson = insured.age < 16 ? payer : insured;
	        var fullName = mainPerson.firstName + ' ' + mainPerson.lastName;
	
	        var appNo = _.get(item, 'AppNo');
	        var policyNo = _.get(item, 'policyNo');
	        var app = {
	            appNo: appNo,
	            policyNo: policyNo,
	            appId: appId,
	            agent: agent,
	            firstName: insured.firstName,
	            lastName: insured.lastName,
	            status: { value: Status, label: _.get(eappStatus, Status) },
	            plan: {
	                basic: {
	                    code: ProSelection.ProdCode,
	                    name: ProSelection.PlanShortNameTh,
	                    sa: _.get(ProSelection, 'SA'),
	                    premium: _.get(ProSelection, 'PREMIUM')
	                },
	                riders: mappedRiders,
	                total: ProResult.TotalPremium
	            },
	            insured: insured,
	            payer: payer,
	            mainPerson: _extends({}, mainPerson, { fullName: fullName }),
	            policy: policy,
	            memos: memos,
	            questionnaires: questionnaires,
	            updated: item.Modified,
	            created: item.Created,
	            isQueuing: Status === 'QU',
	            warning_payment_3day: _.get(item, 'warning_payment_3day', false),
	            isShowResubmit: _.get(item, 'isShowResubmit', false),
	            submitted: _.get(item, 'Submitted')
	        };
	
	        return {
	            reducedAppHash: _extends({}, reducedAppHash, _defineProperty({}, appId, app)),
	            agentList: agentList
	        };
	    }, { reducedAppHash: {}, agentList: [] });
	};
	
	var getFilteredEappHash = exports.getFilteredEappHash = (0, _reselect.createSelector)(getReducedEappHash, getSearch, function (_ref24, search) {
	    var reducedAppHash = _ref24.reducedAppHash;
	
	    var filteredEappHash = reducedAppHash;
	
	    var hasFilter = _.values(search).some(function (data) {
	        return !_.isEmpty(data);
	    });
	
	    if (hasFilter) {
	        (function () {
	            var keyword = search.keyword,
	                status = search.status,
	                agent = search.agent,
	                startDate = search.startDate,
	                endDate = search.endDate;
	
	
	            filteredEappHash = _(filteredEappHash).filter(function (obj) {
	                var isNumberEqual = function isNumberEqual(at) {
	                    return function (obj) {
	                        var toNumberValue = function toNumberValue(value) {
	                            return numeral(value).value();
	                        };
	                        var data = toNumberValue(at(obj));
	                        return (0, _fp.flow)(toNumberValue, function (keyword) {
	                            return _.isEqual(data, keyword);
	                        });
	                    };
	                };
	                var isStringContain = function isStringContain(at) {
	                    return function (obj) {
	                        var toStringValue = (0, _fp.flow)(_fp.toString, _fp.toLower, _fp.trim);
	                        var data = toStringValue(at(obj));
	
	                        return (0, _fp.flow)(toStringValue, function (keyword) {
	                            return _.includes(data, keyword) && !_.isEmpty(data);
	                        });
	                    };
	                };
	                var SEARCH_PROPS = [isStringContain(concatPath(['insured.firstName', 'insured.lastName'])),
	                // isStringContain(get('ProSelection.label.th')),
	                // isStringContain(get('ProSelection.label.en')),
	                isStringContain((0, _fp.get)('plan.basic.code')), isStringContain((0, _fp.get)('plan.basic.name')), isNumberEqual((0, _fp.get)('plan.basic.sa')), isNumberEqual((0, _fp.get)('plan.total'))];
	
	                if (!_.isEmpty(keyword)) {
	                    return _.some(SEARCH_PROPS, function (prop) {
	                        return prop(obj)(keyword);
	                    });
	                }
	
	                return true;
	            }).filter(function (obj) {
	                if (!_.isEmpty(status)) {
	                    return _.get(obj, ['status', 'value']) === status;
	                }
	
	                return true;
	            }).filter(function (obj) {
	                if (!_.isEmpty(agent)) {
	                    return _.get(obj, ['agent', 'code']) === agent;
	                }
	
	                return true;
	            }).filter(function (obj) {
	                var dateFormatted = (0, _moment2.default)(_.get(obj, 'created')).format('YYYY-MM-DD');
	                if (!_.isEmpty(startDate) && !_.isEmpty(endDate)) {
	                    return (0, _moment2.default)(dateFormatted).isBetween(startDate, endDate) || (0, _moment2.default)(dateFormatted).isSame(startDate) || (0, _moment2.default)(dateFormatted).isSame(endDate);
	                }
	
	                return true;
	            }).keyBy('appId').value();
	        })();
	    }
	    return filteredEappHash;
	});
	
	var reduceGroupAppList = function reduceGroupAppList(filteredAppHash, reducedAppHash, group) {
	    return _.reduce(group, function (result, item) {
	        var _result$appToRemove;
	
	        var masterId = item.masterId,
	            _item$appList = item.appList,
	            appList = _item$appList === undefined ? [] : _item$appList,
	            modified = item.modified,
	            created = item.created,
	            groupId = item.groupId;
	
	        var masterApp = _.get(reducedAppHash, [masterId]);
	        var hasApp = _.some(appList, function (id) {
	            return _.has(filteredAppHash, id);
	        });
	
	        if (_.isNil(masterApp) || !hasApp) {
	            return result;
	        }
	        var _appList = _([masterApp]).concat(_.map(appList, function (id) {
	            return _.get(reducedAppHash, [id]);
	        })).orderBy('created', 'desc').value();
	
	        var _$get = _.get(masterApp, 'mainPerson'),
	            fullName = _$get.fullName,
	            firstName = _$get.firstName,
	            lastName = _$get.lastName;
	
	        result['groupAppList'].push({
	            groupId: groupId,
	            fullName: fullName,
	            firstName: firstName,
	            lastName: lastName,
	            type: 'group',
	            appList: _appList,
	            created: created,
	            updated: modified
	        });
	        (_result$appToRemove = result['appToRemove']).push.apply(_result$appToRemove, [masterId].concat(_toConsumableArray(appList)));
	
	        return result;
	    }, { groupAppList: [], appToRemove: [] });
	};
	
	var getNormalAndGroupEappList = exports.getNormalAndGroupEappList = (0, _reselect.createSelector)(getFilteredEappHash, getReducedEappHash, getEappGroup, function (filteredAppHash, _ref25, group) {
	    var reducedAppHash = _ref25.reducedAppHash;
	
	    var _reduceGroupAppList = reduceGroupAppList(filteredAppHash, reducedAppHash, group),
	        groupAppList = _reduceGroupAppList.groupAppList,
	        appToRemove = _reduceGroupAppList.appToRemove;
	
	    var normalAppList = _(filteredAppHash).omit(appToRemove).values().value();
	
	    return { normalAppList: normalAppList, groupAppList: groupAppList };
	});
	
	var getCombinedEappList = exports.getCombinedEappList = (0, _reselect.createSelector)(getNormalAndGroupEappList, getSort, function (_ref26, _ref27) {
	    var normalAppList = _ref26.normalAppList,
	        groupAppList = _ref26.groupAppList;
	    var key = _ref27.key,
	        order = _ref27.order;
	
	    var sortedAppList = _.concat(normalAppList, groupAppList);
	
	    if (!_.isEmpty(key)) {
	        if (key === 'LastEditDate') {
	            key = function key(obj) {
	                return _.get(obj, 'LastEditDate') || '';
	            };
	        }
	        sortedAppList = _.orderBy(sortedAppList, [key], [order]);
	    }
	
	    return sortedAppList;
	});
	
	var getCurrentEapp = exports.getCurrentEapp = (0, _reselect.createSelector)(getReducedEappHash, getEappListCurrentId, function (_ref28, currentId) {
	    var reducedAppHash = _ref28.reducedAppHash;
	    return _.get(reducedAppHash, [currentId], {});
	});
	
	var getCurrentGroupOrEapp = exports.getCurrentGroupOrEapp = (0, _reselect.createSelector)(getNormalAndGroupEappList, getReducedEappHash, getEappGroupCurrentId, getEappListCurrentId, function (_ref29, _ref30, currentGroupId, currentEappId) {
	    var normalAppList = _ref29.normalAppList,
	        groupAppList = _ref29.groupAppList;
	    var reducedAppHash = _ref30.reducedAppHash;
	
	    var selectedId = void 0;
	    var item = void 0;
	
	    if (!_.isEmpty(currentGroupId)) {
	        item = _.find(groupAppList, ['groupId', currentGroupId]);
	
	        if (!_.isNil(item)) {
	            if (!_.isEmpty(currentEappId)) {
	                selectedId = currentEappId;
	                item = _.assign({}, _.get(reducedAppHash, [currentEappId]), {
	                    isInsideGroup: true
	                });
	            } else {
	                item = _.get(item, 'appList');
	                selectedId = currentGroupId;
	                item = !_.isNil(item[0]) && _extends({}, item[0], { type: 'group' });
	            }
	        }
	    } else {
	        selectedId = currentEappId;
	        item = _.get(reducedAppHash, [currentEappId]);
	    }
	    return {
	        selectedId: selectedId,
	        item: item
	    };
	});
	
	var getUniqueAgentList = (0, _reselect.createSelector)(getAgent, function (_ref31) {
	    var agList = _ref31.agList,
	        rest = _objectWithoutProperties(_ref31, ['agList']);
	
	    var agentList = [_extends({}, rest)].concat(_toConsumableArray(agList));
	    return _.map(agentList, function (agent) {
	        return _extends({}, agent, {
	            name: _.get(agent, ['userFName', 'th']) + ' ' + _.get(agent, ['userLName', 'th']),
	            code: _.get(agent, 'userCode')
	        });
	    });
	});
	
	exports.getUniqueAgentList = getUniqueAgentList;
	var getMappedAgent = (0, _reselect.createSelector)(getAgent, function (agent) {
	    return mapAgent(agent);
	});
	
	var mapAgent = function mapAgent(agent) {
	    return {
	        firstName: _.get(agent, ['userFName', 'th']),
	        lastName: _.get(agent, ['userLName', 'th']),
	        code: agent.userCode,
	        branch: agent.branchCode,
	        license: agent.licenseNumber,
	        unitCode: agent.unitCode
	    };
	};
	
	var getSumPayment = exports.getSumPayment = (0, _reselect.createSelector)(getCurrentForm, function (form) {
	    return _.chain(form.Payment_Tr).map('Items').flatten().map(function (item) {
	        return parseFloat(_.get(item, 'Amount'));
	    }).sum().value();
	});
	
	var getSumPaymentProgress = exports.getSumPaymentProgress = (0, _reselect.createSelector)(getSumPayment, getFormProductResult, function (paid, ProResult) {
	    var total = ProResult.TotalPremium;
	    var result = Math.floor(paid * 100 / (total || 1));
	    console.log('total', total, 'result', result);
	    if (result >= 100) {
	        return 100;
	    }
	    return result;
	});
	
	var getSignProgress = exports.getSignProgress = (0, _reselect.createSelector)(getEappListCurrentId, getSingerList, getDocument, function (appId, signerList, documents) {
	    var signCodes = _.chain(signerList).filter({ isRequired: 'Y' }).map('value').value();
	    var signed = _.chain(documents).filter(function (doc) {
	        return _.includes(signCodes, doc.docId);
	    }).filter(function (doc) {
	        return _.includes(doc.appList, appId);
	    }).filter(function (doc) {
	        return _.every(doc.files, function (file) {
	            return file.status === Constants.STATUS_UPLOAD_FINISHED;
	        });
	    }).size().value();
	    var total = _.size(signCodes);
	    var result = Math.floor(signed * 100 / (total || 1));
	
	    if (result >= 100) {
	        return 100;
	    }
	    return result;
	});
	
	var getEappProgress = exports.getEappProgress = (0, _reselect.createSelector)((0, _reselect.createSelector)(function (state) {
	    return state;
	}, getEappListCurrentId, function (state, appId) {
	    return getDocumentProgress(state, appId);
	}), getFormProgress, getSumPaymentProgress, getSignProgress, function (document, form, payment, signature) {
	    return { document: document, form: form, payment: payment, signature: signature };
	});
	
	var getEappStatusList = exports.getEappStatusList = (0, _reselect.createSelector)(getEappStatus, function (status) {
	    return _.map(status, function (label, value) {
	        return { label: label, value: value };
	    });
	});
	
	var isAllRequiredQuestionsFilled = exports.isAllRequiredQuestionsFilled = (0, _reselect.createSelector)(getForm, getFormRequiredQuestion, function (app, requiredQuestions) {
	    return _(requiredQuestions).every(function (question, key) {
	        return _.has(app, [key]);
	    });
	});
	
	var getPayments = exports.getPayments = (0, _reselect.createSelector)(getCurrentForm, function (form) {
	    return form.Payment;
	});
	
	var getInternalAgent = exports.getInternalAgent = (0, _reselect.createSelector)(getForm, function (form) {
	    return _.get(form, 'agent_internal');
	});
	
	var getApplicationListPage = exports.getApplicationListPage = (0, _reselect.createSelector)(getCombinedEappList, getCurrentGroupOrEapp, getFormNo, getSectionListWithProgress, getEappProgress, getFormInvalid, isAllRequiredQuestionsFilled, getSort, getPayments, getInternalAgent, function (list, _ref32, appNo, sectionList, eappProgress, invalidForm, isAllRequiredQuestions, sort) {
	    var selectedId = _ref32.selectedId,
	        item = _ref32.item;
	    var payment = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : {};
	    var agent_internal = arguments[9];
	
	
	    return {
	        list: list,
	        selectedId: selectedId,
	        appNo: appNo,
	        item: item,
	        sectionList: sectionList,
	        eappProgress: eappProgress,
	        invalidForm: invalidForm,
	        isAllRequiredQuestions: isAllRequiredQuestions,
	        sort: sort,
	        payment: payment,
	        agent_internal: agent_internal
	    };
	});
	
	var getMasterGroupList = exports.getMasterGroupList = (0, _reselect.createSelector)(getNormalAndGroupEappList, function (_ref33) {
	    var normalAppList = _ref33.normalAppList;
	    return _(normalAppList).filter(function (item) {
	        return !_.isEmpty(item.mainPerson.age) || !_.isEmpty(item.mainPerson.gender);
	    }).orderBy('created', 'desc').value();
	});
	
	var getChildrenGroupList = exports.getChildrenGroupList = (0, _reselect.createSelector)(getNormalAndGroupEappList, function (state, masterId) {
	    return masterId;
	}, function (_ref34, masterId) {
	    var normalAppList = _ref34.normalAppList;
	
	    var masterApp = _.find(normalAppList, ['appId', masterId]);
	    var mainPerson = _.get(masterApp, 'mainPerson');
	
	    return _(normalAppList).filter(function (item) {
	        var itemMainPerson = item.mainPerson;
	
	        return item.appId !== masterApp.appId && (itemMainPerson.firstName === mainPerson.firstName || _.isEmpty(itemMainPerson.firstName)) && (itemMainPerson.lastName === mainPerson.lastName || _.isEmpty(itemMainPerson.lastName)) && itemMainPerson.age === mainPerson.age && itemMainPerson.gender === mainPerson.gender;
	    }).orderBy('created', 'desc').value();
	});
	
	var getMasterGroupPage = exports.getMasterGroupPage = (0, _reselect.createSelector)(getMasterGroupList, getSectionListWithProgress, function (state, selectedId) {
	    return selectedId;
	}, function (list, sectionList, selectedId) {
	    return {
	        list: list,
	        sectionList: sectionList,
	        selectedId: selectedId,
	        item: _.find(list, ['appId', selectedId])
	    };
	});
	
	var getChildrenGroupPage = exports.getChildrenGroupPage = (0, _reselect.createSelector)(function (state, selectedId, masterId) {
	    return getChildrenGroupList(state, masterId);
	}, getSectionListWithProgress, function (state, selectedId) {
	    return selectedId;
	}, function (list, sectionList, selectedId) {
	    return {
	        list: list,
	        sectionList: sectionList,
	        selectedId: selectedId,
	        item: _.find(list, ['appId', selectedId])
	    };
	});
	
	var getEditGroupPage = exports.getEditGroupPage = (0, _reselect.createSelector)(getCurrentEappGroup, getReducedEappHash, function (group, _ref35) {
	    var reducedAppHash = _ref35.reducedAppHash;
	    return {
	        list: _(reducedAppHash).pick(_.get(group, 'appList')).values().value()
	    };
	});
	
	var getDevModePage = exports.getDevModePage = (0, _reselect.createSelector)(getNormalAndGroupEappList, function (_ref36) {
	    var normalAppList = _ref36.normalAppList;
	    return {
	        normalAppList: normalAppList
	    };
	});
	
	var getToggleMinimap = exports.getToggleMinimap = function getToggleMinimap(state) {
	    return state.eapp.ui.toggleMinimap;
	};
	
	var getBankSelector = exports.getBankSelector = function getBankSelector(state) {
	    return state.eapp.state.paymentBankSelector;
	};
	var getRelationSelector = exports.getRelationSelector = function getRelationSelector(state) {
	    return state.eapp.state.paymentRelationSelector;
	};
	
	var getPaymentTr = exports.getPaymentTr = (0, _reselect.createSelector)(getForm, function (form) {
	    return _.get(form, 'Payment_Tr', []);
	});
	
	var getReferenceAddress = exports.getReferenceAddress = (0, _reselect.createSelector)(getForm, function (form) {
	    var obj = {};
	    _.each(_.get(form, 'tempReferenceAddress', []), function (_ref37) {
	        var _ref38 = _slicedToArray(_ref37, 2),
	            prefix = _ref38[0],
	            address = _ref38[1];
	
	        obj[prefix] = address;
	    });
	    var orderedAddress = ['HouseNo', 'MooBan', 'Arkan', 'Moo', 'Soi', 'Street', 'SubDistrict', 'District', 'Province', 'Postal.value'];
	    var mergeOrderAddressWithPrefix = function mergeOrderAddressWithPrefix(prefix) {
	        var str = '';
	        orderedAddress.forEach(function (key) {
	            str += ' ' + _.get(obj, prefix + '_' + key, '');
	        });
	        return str;
	    };
	    return {
	        Insured_CurrentAddress: mergeOrderAddressWithPrefix('Insured_CurrentAddress'),
	        Insured_RegAddress: mergeOrderAddressWithPrefix('Insured_RegAddress'),
	        Insured_BusinessAddress: mergeOrderAddressWithPrefix('Insured_BusinessAddress')
	    };
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(35), __webpack_require__(36)))

/***/ },
/* 35 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var UI_SHOWN_DIALOG = exports.UI_SHOWN_DIALOG = 'UI_SHOWN_DIALOG';
	var UI_HIDDEN_DIALOG = exports.UI_HIDDEN_DIALOG = 'UI_HIDDEN_DIALOG';
	var UI_CONFIRMED_DIALOG = exports.UI_CONFIRMED_DIALOG = 'UI_CONFIRMED_DIALOG';
	var UI_CANCELLED_DIALOG = exports.UI_CANCELLED_DIALOG = 'UI_CANCELLED_DIALOG';
	var UI_SHOWN_LOADING = exports.UI_SHOWN_LOADING = 'UI_SHOWN_LOADING';
	var UI_HIDDEN_LOADING = exports.UI_HIDDEN_LOADING = 'UI_HIDDEN_LOADING';
	var CHANGED_LANGUAGE = exports.CHANGED_LANGUAGE = 'CHANGED_LANGUAGE';
	
	var STARTED_SYNC = exports.STARTED_SYNC = 'STARTED_SYNC';
	var WATING_SYNC = exports.WATING_SYNC = 'WATING_SYNC';
	var FINISHED_SYNC = exports.FINISHED_SYNC = 'FINISHED_SYNC';
	var FAILED_SYNC = exports.FAILED_SYNC = 'FAILED_SYNC';
	var SAVED_ACTION = exports.SAVED_ACTION = 'SAVED_ACTION';
	var SAVING_ACTION = exports.SAVING_ACTION = 'SAVING_ACTION';
	var EAPP_START_POLLING = exports.EAPP_START_POLLING = 'EAPP_START_POLLING';
	var EAPP_STOP_POLLING = exports.EAPP_STOP_POLLING = 'EAPP_STOP_POLLING';
	
	var ASSIGNED_AGENT = exports.ASSIGNED_AGENT = 'ASSIGNED_AGENT';
	
	var INITED_FORM_TYPE = exports.INITED_FORM_TYPE = 'INITED_FORM_TYPE';
	var FORM_TYPE_PA = exports.FORM_TYPE_PA = 'pa';
	var FORM_TYPE_COMMON = exports.FORM_TYPE_COMMON = 'common';
	
	var DIALOG_CONFIRMATION = exports.DIALOG_CONFIRMATION = 'DIALOG_CONFIRMATION';
	var DIALOG_PREVIEW_PRODUCT = exports.DIALOG_PREVIEW_PRODUCT = 'DIALOG_PREVIEW_PRODUCT';
	var DIALOG_SELECT_PREVIEW_PRODUCT = exports.DIALOG_SELECT_PREVIEW_PRODUCT = 'DIALOG_SELECT_PREVIEW_PRODUCT';
	var DIALOG_SET_CUSTOMER_INFO = exports.DIALOG_SET_CUSTOMER_INFO = 'DIALOG_SET_CUSTOMER_INFO';
	var DIALOG_SET_CUSTOMER_ADDRESS = exports.DIALOG_SET_CUSTOMER_ADDRESS = 'DIALOG_SET_CUSTOMER_ADDRESS';
	var DIALOG_BIRTHDATE_WARNING = exports.DIALOG_BIRTHDATE_WARNING = 'DIALOG_BIRTHDATE_WARNING';
	var DIALOG_CONFIRM_DIVIDEND = exports.DIALOG_CONFIRM_DIVIDEND = 'DIALOG_CONFIRM_DIVIDEND';
	var DIALOG_OTP = exports.DIALOG_OTP = 'DIALOG_OTP';
	var DIALOG_SUBMITTING = exports.DIALOG_SUBMITTING = 'DIALOG_SUBMITTING';
	
	var CALCULATING_PRODUCT_PREMIUM = exports.CALCULATING_PRODUCT_PREMIUM = 'CALCULATING_PRODUCT_PREMIUM';
	var SHOWING_PRODUCT_BASIC_DROPDOWN = exports.SHOWING_PRODUCT_BASIC_DROPDOWN = 'SHOWING_PRODUCT_BASIC_DROPDOWN';
	
	var REMOVING_EXPIRE_FILE = exports.REMOVING_EXPIRE_FILE = 'REMOVING_EXPIRE_FILE';
	var INITING_EAPP = exports.INITING_EAPP = 'INITING_EAPP';
	var SETED_SNAP_SHOT = exports.SETED_SNAP_SHOT = 'SETED_SNAP_SHOT';
	
	var RESETED_APPLICATION_STATE = exports.RESETED_APPLICATION_STATE = 'RESETED_APPLICATION_STATE';
	var UPDATED_APPLICATION_STATE = exports.UPDATED_APPLICATION_STATE = 'UPDATED_APPLICATION_STATE';
	var REMOVED_APPLICATION_STATE = exports.REMOVED_APPLICATION_STATE = 'REMOVED_APPLICATION_STATE';
	
	var FILLING_SLIDE_WITH_INDEX = exports.FILLING_SLIDE_WITH_INDEX = 'FILLING_SLIDE_WITH_INDEX';
	var SETED_SLIDE_CURRENT_INDEX = exports.SETED_SLIDE_CURRENT_INDEX = 'SETED_SLIDE_CURRENT_INDEX';
	var SETED_PAGE_CURRENT_INDEX = exports.SETED_PAGE_CURRENT_INDEX = 'SETED_PAGE_CURRENT_INDEX';
	var SETED_APPLICATION_LIST_CURRENT_INDEX = exports.SETED_APPLICATION_LIST_CURRENT_INDEX = 'SETED_APPLICATION_LIST_CURRENT_INDEX';
	var SETED_INVALID_APPLICATION_FORM = exports.SETED_INVALID_APPLICATION_FORM = 'SETED_INVALID_APPLICATION_FORM';
	
	var INITED_APPLICATION_TEMPLATE = exports.INITED_APPLICATION_TEMPLATE = 'INITED_APPLICATION_TEMPLATE';
	var UPDATED_APPLICATION_TEMPLATE = exports.UPDATED_APPLICATION_TEMPLATE = 'UPDATED_APPLICATION_TEMPLATE';
	var INITED_APPLICATION_SLIDES = exports.INITED_APPLICATION_SLIDES = 'INITED_APPLICATION_SLIDES';
	var ADDED_APPLICATION_SLIDES = exports.ADDED_APPLICATION_SLIDES = 'ADDED_APPLICATION_SLIDES';
	var REMOVED_APPLICATION_SLIDES = exports.REMOVED_APPLICATION_SLIDES = 'REMOVED_APPLICATION_SLIDES';
	var SETED_APPLICATION_SLIDES_WITH_QUESTION = exports.SETED_APPLICATION_SLIDES_WITH_QUESTION = 'SETED_APPLICATION_SLIDES_WITH_QUESTION';
	var HIDDEN_REMAIN_APPLICATION_SLIDES = exports.HIDDEN_REMAIN_APPLICATION_SLIDES = 'HIDDEN_REMAIN_APPLICATION_SLIDES';
	var SHOWN_REMAIN_APPLICATION_SLIDES = exports.SHOWN_REMAIN_APPLICATION_SLIDES = 'SHOWN_REMAIN_APPLICATION_SLIDES';
	
	var INTTED_APPLICATION_GROUP = exports.INTTED_APPLICATION_GROUP = 'INTTED_APPLICATION_GROUP';
	var UPDATED_APPLICATION_GROUP = exports.UPDATED_APPLICATION_GROUP = 'UPDATED_APPLICATION_GROUP';
	var SELECTED_APPLICATION_GROUP = exports.SELECTED_APPLICATION_GROUP = 'SELECTED_APPLICATION_GROUP';
	var GENERATTING_APPLICATION_GROUP = exports.GENERATTING_APPLICATION_GROUP = 'GENERATTING_APPLICATION_GROUP';
	var EDITTING_APPLICATION_GROUP = exports.EDITTING_APPLICATION_GROUP = 'EDITTING_APPLICATION_GROUP';
	var SUBMITTED_APPLICATION_GROUP = exports.SUBMITTED_APPLICATION_GROUP = 'SUBMITTED_APPLICATION_GROUP';
	
	var INITED_CONFIG = exports.INITED_CONFIG = 'INITED_CONFIG';
	var UPDATED_CONFIG = exports.UPDATED_CONFIG = 'UPDATED_CONFIG';
	
	var INITED_APPLICATION_LIST = exports.INITED_APPLICATION_LIST = 'INITED_APPLICATION_LIST';
	var EDITED_APPLICATION_LIST = exports.EDITED_APPLICATION_LIST = 'EDITED_APPLICATION_LIST';
	var APPENDED_APPLICATION_LIST = exports.APPENDED_APPLICATION_LIST = 'APPENDED_APPLICATION_LIST';
	var MERGED_APPLICATION_LIST = exports.MERGED_APPLICATION_LIST = 'MERGED_APPLICATION_LIST';
	var MERGED_APPLICATION = exports.MERGED_APPLICATION = 'MERGED_APPLICATION';
	
	var EDITING_APPLICATION = exports.EDITING_APPLICATION = 'EDITING_APPLICATION';
	var DELETED_APPLICATION = exports.DELETED_APPLICATION = 'DELETED_APPLICATION';
	
	var SUBMITTING_APPLICATION_MEMO = exports.SUBMITTING_APPLICATION_MEMO = 'SUBMITTING_APPLICATION_MEMO';
	
	var SUBMITTING_APPLICATION_FORM = exports.SUBMITTING_APPLICATION_FORM = 'SUBMITTING_APPLICATION_FORM';
	var GENERATING_APPLICATION_FORM = exports.GENERATING_APPLICATION_FORM = 'GENERATING_APPLICATION_FORM';
	var CLONING_APPLICATION_FORM = exports.CLONING_APPLICATION_FORM = 'CLONING_APPLICATION_FORM';
	var CONVERT_TO_APPLICATION_FORM = exports.CONVERT_TO_APPLICATION_FORM = 'CONVERT_TO_APPLICATION_FORM';
	var SELECTED_APPLICATION_FORM = exports.SELECTED_APPLICATION_FORM = 'SELECTED_APPLICATION_FORM';
	var SELECTED_APPLICATION_FORM_WITH_INDEX = exports.SELECTED_APPLICATION_FORM_WITH_INDEX = 'SELECTED_APPLICATION_FORM_WITH_INDEX';
	var CREATED_APPLICATION_FORM = exports.CREATED_APPLICATION_FORM = 'CREATED_APPLICATION_FORM';
	var DELETED_APPLICATION_FORM = exports.DELETED_APPLICATION_FORM = 'DELETED_APPLICATION_FORM';
	var DELETED_APPLICATION_FORM_NO_SYNC = exports.DELETED_APPLICATION_FORM_NO_SYNC = 'DELETED_APPLICATION_FORM_NO_SYNC';
	var REMOVED_APPLICATION_FORM = exports.REMOVED_APPLICATION_FORM = 'REMOVED_APPLICATION_FORM';
	var UPDATED_APPLICATION_FORM = exports.UPDATED_APPLICATION_FORM = 'UPDATED_APPLICATION_FORM';
	var UPDATED_APPLICATION_FORM_NO_SYNC = exports.UPDATED_APPLICATION_FORM_NO_SYNC = 'UPDATED_APPLICATION_FORM_NO_SYNC';
	var UPDATED_APPLICATION_FORM_NO_MODIFIED = exports.UPDATED_APPLICATION_FORM_NO_MODIFIED = 'UPDATED_APPLICATION_FORM_NO_MODIFIED';
	var UPDATED_MULTI_APPLICATION_FORM = exports.UPDATED_MULTI_APPLICATION_FORM = 'UPDATED_MULTI_APPLICATION_FORM';
	var UPDATED_FIRST_TIME_PAYMENT = exports.UPDATED_FIRST_TIME_PAYMENT = 'UPDATED_FIRST_TIME_PAYMENT';
	var SETED_APPLICATION_FORM = exports.SETED_APPLICATION_FORM = 'SETED_APPLICATION_FORM';
	var TRY_UPDATED_APPLICATION_FORM = exports.TRY_UPDATED_APPLICATION_FORM = 'TRY_UPDATED_APPLICATION_FORM';
	var PREVIEW_APPLICATION_PDF = exports.PREVIEW_APPLICATION_PDF = 'PREVIEW_APPLICATION_PDF';
	var SEARCHED_APPLICATION_FORM = exports.SEARCHED_APPLICATION_FORM = 'SEARCHED_APPLICATION_FORM';
	var FILTERED_APPLICATION_FORM = exports.FILTERED_APPLICATION_FORM = 'FILTERED_APPLICATION_FORM';
	var ORDERED_APPLICATION_FORM = exports.ORDERED_APPLICATION_FORM = 'ORDERED_APPLICATION_FORM';
	var SORTED_KEY_APPLICATION_FORM = exports.SORTED_KEY_APPLICATION_FORM = 'SORTED_KEY_APPLICATION_FORM';
	
	var COPYING_FORM_DATA = exports.COPYING_FORM_DATA = 'COPYING_FORM_DATA';
	var RESTORED_PREV_FORM_DATA = exports.RESTORED_PREV_FORM_DATA = 'RESTORED_PREV_FORM_DATA';
	var RESETED_PREV_FORM_DATA = exports.RESETED_PREV_FORM_DATA = 'RESETED_PREV_FORM_DATA';
	var SETED_INVALID_FORM_DATA = exports.SETED_INVALID_FORM_DATA = 'SETED_INVALID_FORM_DATA';
	
	var SHOWING_PRODUCT_GRAPH = exports.SHOWING_PRODUCT_GRAPH = 'SHOWING_PRODUCT_GRAPH';
	var EAPP_SENDING_PREVIEW_EMAIL = exports.EAPP_SENDING_PREVIEW_EMAIL = 'EAPP_SENDING_PREVIEW_EMAIL';
	var EAPP_SHOWING_PREVIEW = exports.EAPP_SHOWING_PREVIEW = 'EAPP_SHOWING_PREVIEW';
	
	var MASTER_INITING_BASIC = exports.MASTER_INITING_BASIC = 'MASTER_INITING_BASIC';
	var MASTER_INITING_RIDER = exports.MASTER_INITING_RIDER = 'MASTER_INITING_RIDER';
	var MASTER_INITING_PAYMENT_MODE = exports.MASTER_INITING_PAYMENT_MODE = 'MASTER_INITING_PAYMENT_MODE';
	var MASTER_INITING_DATA = exports.MASTER_INITING_DATA = 'MASTER_INITING_DATA';
	
	var MASTER_INITED_DATA = exports.MASTER_INITED_DATA = 'MASTER_INITED_DATA';
	
	var STATUS_UPLOAD_IDLE = exports.STATUS_UPLOAD_IDLE = 'STATUS_UPLOAD_IDLE';
	var STATUS_UPLOAD_UPLOADING = exports.STATUS_UPLOAD_UPLOADING = 'STATUS_UPLOAD_UPLOADING';
	var STATUS_UPLOAD_FAILED = exports.STATUS_UPLOAD_FAILED = 'STATUS_UPLOAD_FAILED';
	var STATUS_UPLOAD_FINISHED = exports.STATUS_UPLOAD_FINISHED = 'STATUS_UPLOAD_FINISHED';
	var UPLOADING_FILE = exports.UPLOADING_FILE = 'UPLOADING_FILE';
	var INITED_DOCUMENT = exports.INITED_DOCUMENT = 'INITED_DOCUMENT';
	var UPDATED_DOCUMENT = exports.UPDATED_DOCUMENT = 'UPDATED_DOCUMENT';
	var REMOVED_DOCUMENT = exports.REMOVED_DOCUMENT = 'REMOVED_DOCUMENT';
	var REMOVING_DOCUMENT = exports.REMOVING_DOCUMENT = 'REMOVING_DOCUMENT';
	var UPDATED_DOCUMENT_APP = exports.UPDATED_DOCUMENT_APP = 'UPDATED_DOCUMENT_APP';
	var REMOVED_DOCUMENT_APP = exports.REMOVED_DOCUMENT_APP = 'REMOVED_DOCUMENT_APP';
	var UPDATED_DOCUMENT_FILES = exports.UPDATED_DOCUMENT_FILES = 'UPDATED_DOCUMENT_FILES';
	var REMOVED_DOCUMENT_FILES = exports.REMOVED_DOCUMENT_FILES = 'REMOVED_DOCUMENT_FILES';
	var UPDATED_DOCUMENT_FILE_STATUS = exports.UPDATED_DOCUMENT_FILE_STATUS = 'UPDATED_DOCUMENT_FILE_STATUS';
	
	var TOGGLE_MINIMAP = exports.TOGGLE_MINIMAP = 'TOGGLE_MINIMAP';
	var CLOSE_MINIMAP = exports.CLOSE_MINIMAP = 'CLOSE_MINIMAP';
	var MASTER_REMOVE_DATA = exports.MASTER_REMOVE_DATA = 'MASTER_REMOVE_DATA';
	
	var CONFIRM_TO_PAYMENT = exports.CONFIRM_TO_PAYMENT = 'CONFIRM_TO_PAYMENT';
	var CONFIRM_TO_SKIP_PAYMENT = exports.CONFIRM_TO_SKIP_PAYMENT = 'CONFIRM_TO_SKIP_PAYMENT';
	var CANCLE_TO_SKIP_PAYMENT = exports.CANCLE_TO_SKIP_PAYMENT = 'CANCLE_TO_SKIP_PAYMENT';
	var SUBMIT_PAYMENT = exports.SUBMIT_PAYMENT = 'SUBMIT_PAYMENT';
	var SUBMITING_PAYMENT = exports.SUBMITING_PAYMENT = 'SUBMITING_PAYMENT';
	
	var WAITING_SYNC = exports.WAITING_SYNC = 'WAITING_SYNC';
	
	var UPDATING_SKIP_PAYMENT = exports.UPDATING_SKIP_PAYMENT = 'UPDATING_SKIP_PAYMENT';
	var SET_PAYMENT_FLAG = exports.SET_PAYMENT_FLAG = 'SET_PAYMENT_FLAG';
	var SET_PAYMENT_STATUS = exports.SET_PAYMENT_STATUS = 'SET_PAYMENT_STATUS';
	var GOTO_PAYMENT_PAGE = exports.GOTO_PAYMENT_PAGE = 'GOTO_PAYMENT_PAGE';
	var OPEN_PAYMENT_GATEWAY = exports.OPEN_PAYMENT_GATEWAY = 'OPEN_PAYMENT_GATEWAY';
	
	var UPDATED_APPLICATION_STATUS = exports.UPDATED_APPLICATION_STATUS = 'UPDATED_APPLICATION_STATUS';
	var GET_APPLICATION_STATUS = exports.GET_APPLICATION_STATUS = 'GET_APPLICATION_STATUS';
	var MERGE_APPLICATION_STATUS = exports.MERGE_APPLICATION_STATUS = 'MERGE_APPLICATION_STATUS';
	
	var SETTED_PAYMENT_TR_NUMBER = exports.SETTED_PAYMENT_TR_NUMBER = 'SETTED_PAYMENT_TR_NUMBER';
	var SETTED_PAYMENT_STATUS = exports.SETTED_PAYMENT_STATUS = 'SETTED_PAYMENT_STATUS';
	var SET_PAYMENT_REF = exports.SET_PAYMENT_REF = 'SET_PAYMENT_REF';
	var VIEW_SLIP = exports.VIEW_SLIP = 'VIEW_SLIP';
	
	var LINK_TO_PAYMENT = exports.LINK_TO_PAYMENT = 'LINK_TO_PAYMENT';
	var LINK_TO_DOCUMENT = exports.LINK_TO_DOCUMENT = 'LINK_TO_DOCUMENT';
	var LINK_TO_SIGNATURE = exports.LINK_TO_SIGNATURE = 'LINK_TO_SIGNATURE';
	
	var CALL_NATIVE_SELECT_BANK = exports.CALL_NATIVE_SELECT_BANK = 'CALL_NATIVE_SELECT_BANK';
	var GET_RELATION_DATA = exports.GET_RELATION_DATA = 'GET_RELATION_DATA';
	
	var UPDATE_BANK_PAYMENT = exports.UPDATE_BANK_PAYMENT = 'UPDATE_BANK_PAYMENT';
	var UPDATE_RELATION_PAYMENT = exports.UPDATE_RELATION_PAYMENT = 'UPDATE_RELATION_PAYMENT';
	var CALL_NATIVE_SELECT_RELATION = exports.CALL_NATIVE_SELECT_RELATION = 'CALL_NATIVE_SELECT_RELATION';
	
	var REQUEST_OTP = exports.REQUEST_OTP = 'REQUEST_OTP';
	var SET_OTP = exports.SET_OTP = 'SET_OTP';
	var SUBMIT_OTP = exports.SUBMIT_OTP = 'SUBMIT_OTP';
	var UI_SHOWN_OTP_CONTAINER = exports.UI_SHOWN_OTP_CONTAINER = 'UI_SHOWN_OTP_CONTAINER';
	var UI_CLOSE_OTP_CONTAINER = exports.UI_CLOSE_OTP_CONTAINER = 'UI_CLOSE_OTP_CONTAINER';
	var UPDATE_NEW_OTP_PHONE_NUMBER = exports.UPDATE_NEW_OTP_PHONE_NUMBER = 'UPDATE_NEW_OTP_PHONE_NUMBER';
	
	var UI_SHOWN_SIGNATURE_CONTAINER = exports.UI_SHOWN_SIGNATURE_CONTAINER = 'UI_SHOWN_SIGNATURE_CONTAINER';
	var UI_CLOSE_SIGNATURE_CONTAINER = exports.UI_CLOSE_SIGNATURE_CONTAINER = 'UI_CLOSE_SIGNATURE_CONTAINER';
	
	var UI_SHOWN_MODAL_DIALOG = exports.UI_SHOWN_MODAL_DIALOG = 'UI_SHOWN_MODAL_DIALOG';
	var UI_CLOSE_MODAL_DIALOG = exports.UI_CLOSE_MODAL_DIALOG = 'UI_CLOSE_MODAL_DIALOG';
	
	var SAVE_SIGN_CONSENT_FORM = exports.SAVE_SIGN_CONSENT_FORM = 'SAVE_SIGN_CONSENT_FORM';
	
	var FATHER_ID = exports.FATHER_ID = 'A6';
	var MOTHER_ID = exports.MOTHER_ID = 'A8';
	var SAVED_SIGNER_LIST = exports.SAVED_SIGNER_LIST = 'SAVED_SIGNER_LIST';
	var SAVED_DOCUMENTS_LIST = exports.SAVED_DOCUMENTS_LIST = 'SAVED_DOCUMENTS_LIST';
	
	var CALL_ASSIGN_SERVICING_AGENT = exports.CALL_ASSIGN_SERVICING_AGENT = 'CALL_ASSIGN_SERVICING_AGENT';
	var CALL_ASSIGN_SERVICING_INTERNAL = exports.CALL_ASSIGN_SERVICING_INTERNAL = 'CALL_ASSIGN_SERVICING_INTERNAL';
	var CHANGE_ASSIGN_SERVICING_AGENT = exports.CHANGE_ASSIGN_SERVICING_AGENT = 'CHANGE_ASSIGN_SERVICING_AGENT';
	var REPLACE_ASSIGN_SERVICING_AGENT = exports.REPLACE_ASSIGN_SERVICING_AGENT = 'REPLACE_ASSIGN_SERVICING_AGENT';
	var CALL_ASSIGN_SERVICING_OJT = exports.CALL_ASSIGN_SERVICING_OJT = 'CALL_ASSIGN_SERVICING_OJT';
	var REPLACE_ASSIGN_SERVICING_OJT = exports.REPLACE_ASSIGN_SERVICING_OJT = 'REPLACE_ASSIGN_SERVICING_OJT';
	var PREVIEW_BANK_APPLICATION_PDF_COMMON_CHILDREN = exports.PREVIEW_BANK_APPLICATION_PDF_COMMON_CHILDREN = 'PREVIEW_BANK_APPLICATION_PDF_COMMON_CHILDREN';
	var PREVIEW_BANK_APPLICATION_PDF_COMMON_ADULT = exports.PREVIEW_BANK_APPLICATION_PDF_COMMON_ADULT = 'PREVIEW_BANK_APPLICATION_PDF_COMMON_ADULT';
	var PREVIEW_BANK_APPLICATION_PDF_PA = exports.PREVIEW_BANK_APPLICATION_PDF_PA = 'PREVIEW_BANK_APPLICATION_PDF_PA';
	var SETED_SUBMIT_RESULT = exports.SETED_SUBMIT_RESULT = 'SETED_SUBMIT_RESULT';
	var FINISHED_SUBMIT_APPLICATION = exports.FINISHED_SUBMIT_APPLICATION = 'FINISHED_SUBMIT_APPLICATION';
	var START_SUBMITING_APPLICATION = exports.START_SUBMITING_APPLICATION = 'START_SUBMITING_APPLICATION';
	var NOTIFICATION_ALERT = exports.NOTIFICATION_ALERT = 'NOTIFICATION_ALERT';
	
	var START_LOAD_ACTION = exports.START_LOAD_ACTION = 'START_LOAD_ACTION';
	var STOP_LOAD_ACTION = exports.STOP_LOAD_ACTION = 'STOP_LOAD_ACTION';
	var STARTING_REFRESH = exports.STARTING_REFRESH = 'STARTING_REFRESH';
	var STOPPING_REFRESH = exports.STOPPING_REFRESH = 'STOPPING_REFRESH';
	var STOP_FILL_ADDRESS = exports.STOP_FILL_ADDRESS = 'STOP_FILL_ADDRESS';
	var STOP_REMOVE_PROPDUCT_POPUP = exports.STOP_REMOVE_PROPDUCT_POPUP = 'STOP_REMOVE_PROPDUCT_POPUP';
	var LOAD_ACTION = exports.LOAD_ACTION = 'LOAD_ACTION';
	var LOAD_ACTION_FAIL = exports.LOAD_ACTION_FAIL = 'LOAD_ACTION_FAIL';
	var DIALOG_LOAD_ACTION_FAIL = exports.DIALOG_LOAD_ACTION_FAIL = 'DIALOG_LOAD_ACTION_FAIL';

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! @preserve
	 * numeral.js
	 * version : 2.0.4
	 * author : Adam Draper
	 * license : MIT
	 * http://adamwdraper.github.com/Numeral-js/
	 */
	
	(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof module === 'object' && module.exports) {
	        module.exports = factory();
	    } else {
	        global.numeral = factory();
	    }
	}(this, function () {
	    /************************************
	        Variables
	    ************************************/
	
	    var numeral,
	        _,
	        VERSION = '2.0.4',
	        formats = {},
	        locales = {},
	        defaults = {
	            currentLocale: 'en',
	            zeroFormat: null,
	            nullFormat: null,
	            defaultFormat: '0,0'
	        },
	        options = {
	            currentLocale: defaults.currentLocale,
	            zeroFormat: defaults.zeroFormat,
	            nullFormat: defaults.nullFormat,
	            defaultFormat: defaults.defaultFormat
	        };
	
	
	    /************************************
	        Constructors
	    ************************************/
	
	    // Numeral prototype object
	    function Numeral(input, number) {
	        this._input = input;
	
	        this._value = number;
	    }
	
	    numeral = function(input) {
	        var value,
	            kind,
	            unformatFunction,
	            regexp;
	
	        if (numeral.isNumeral(input)) {
	            value = input.value();
	        } else if (input === 0 || typeof input === 'undefined') {
	            value = 0;
	        } else if (input === null || _.isNaN(input)) {
	            value = null;
	        } else if (typeof input === 'string') {
	            if (options.zeroFormat && input === options.zeroFormat) {
	                value = 0;
	            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {
	                value = null;
	            } else {
	                for (kind in formats) {
	                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;
	
	                    if (regexp && input.match(regexp)) {
	                        unformatFunction = formats[kind].unformat;
	
	                        break;
	                    }
	                }
	
	                unformatFunction = unformatFunction || numeral._.stringToNumber;
	
	                value = unformatFunction(input);
	            }
	        } else {
	            value = Number(input)|| null;
	        }
	
	        return new Numeral(input, value);
	    };
	
	    // version number
	    numeral.version = VERSION;
	
	    // compare numeral object
	    numeral.isNumeral = function(obj) {
	        return obj instanceof Numeral;
	    };
	
	    // helper functions
	    numeral._ = _ = {
	        // formats numbers separators, decimals places, signs, abbreviations
	        numberToFormat: function(value, format, roundingFunction) {
	            var locale = locales[numeral.options.currentLocale],
	                negP = false,
	                optDec = false,
	                abbr = '',
	                trillion = 1000000000000,
	                billion = 1000000000,
	                million = 1000000,
	                thousand = 1000,
	                decimal = '',
	                neg = false,
	                abbrForce, // force abbreviation
	                abs,
	                min,
	                max,
	                power,
	                int,
	                precision,
	                signed,
	                thousands,
	                output;
	
	            // make sure we never format a null value
	            value = value || 0;
	
	            abs = Math.abs(value);
	
	            // see if we should use parentheses for negative number or if we should prefix with a sign
	            // if both are present we default to parentheses
	            if (numeral._.includes(format, '(')) {
	                negP = true;
	                format = format.replace(/[\(|\)]/g, '');
	            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {
	                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;
	                format = format.replace(/[\+|\-]/g, '');
	            }
	
	            // see if abbreviation is wanted
	            if (numeral._.includes(format, 'a')) {
	                abbrForce = format.match(/a(k|m|b|t)?/);
	
	                abbrForce = abbrForce ? abbrForce[1] : false;
	
	                // check for space before abbreviation
	                if (numeral._.includes(format, ' a')) {
	                    abbr = ' ';
	                }
	
	                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');
	
	                if (abs >= trillion && !abbrForce || abbrForce === 't') {
	                    // trillion
	                    abbr += locale.abbreviations.trillion;
	                    value = value / trillion;
	                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {
	                    // billion
	                    abbr += locale.abbreviations.billion;
	                    value = value / billion;
	                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {
	                    // million
	                    abbr += locale.abbreviations.million;
	                    value = value / million;
	                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {
	                    // thousand
	                    abbr += locale.abbreviations.thousand;
	                    value = value / thousand;
	                }
	            }
	
	            // check for optional decimals
	            if (numeral._.includes(format, '[.]')) {
	                optDec = true;
	                format = format.replace('[.]', '.');
	            }
	
	            // break number and format
	            int = value.toString().split('.')[0];
	            precision = format.split('.')[1];
	            thousands = format.indexOf(',');
	
	            if (precision) {
	                if (numeral._.includes(precision, '[')) {
	                    precision = precision.replace(']', '');
	                    precision = precision.split('[');
	                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
	                } else {
	                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);
	                }
	
	                int = decimal.split('.')[0];
	
	                if (numeral._.includes(decimal, '.')) {
	                    decimal = locale.delimiters.decimal + decimal.split('.')[1];
	                } else {
	                    decimal = '';
	                }
	
	                if (optDec && Number(decimal.slice(1)) === 0) {
	                    decimal = '';
	                }
	            } else {
	                int = numeral._.toFixed(value, null, roundingFunction);
	            }
	
	            // check abbreviation again after rounding
	            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {
	                int = String(Number(int) / 1000);
	
	                switch (abbr) {
	                    case locale.abbreviations.thousand:
	                        abbr = locale.abbreviations.million;
	                        break;
	                    case locale.abbreviations.million:
	                        abbr = locale.abbreviations.billion;
	                        break;
	                    case locale.abbreviations.billion:
	                        abbr = locale.abbreviations.trillion;
	                        break;
	                }
	            }
	
	
	            // format number
	            if (numeral._.includes(int, '-')) {
	                int = int.slice(1);
	                neg = true;
	            }
	
	            if (thousands > -1) {
	                int = int.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + locale.delimiters.thousands);
	            }
	
	            if (format.indexOf('.') === 0) {
	                int = '';
	            }
	
	            output = int + decimal + (abbr ? abbr : '');
	
	            if (negP) {
	                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');
	            } else {
	                if (signed >= 0) {
	                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');
	                } else if (neg) {
	                    output = '-' + output;
	                }
	            }
	
	            return output;
	        },
	        // unformats numbers separators, decimals places, signs, abbreviations
	        stringToNumber: function(string) {
	            var locale = locales[options.currentLocale],
	                stringOriginal = string,
	                abbreviations = {
	                    thousand: 3,
	                    million: 6,
	                    billion: 9,
	                    trillion: 12
	                },
	                abbreviation,
	                value,
	                i,
	                regexp;
	
	            if (options.zeroFormat && string === options.zeroFormat) {
	                value = 0;
	            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {
	                value = null;
	            } else {
	                value = 1;
	
	                if (locale.delimiters.decimal !== '.') {
	                    string = string.replace(/\./g, '').replace(locale.delimiters.decimal, '.');
	                }
	
	                for (abbreviation in abbreviations) {
	                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\)|(\\' + locale.currency.symbol + ')?(?:\\))?)?$');
	
	                    if (stringOriginal.match(regexp)) {
	                        value *= Math.pow(10, abbreviations[abbreviation]);
	                        break;
	                    }
	                }
	
	                // check for negative number
	                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;
	
	                // remove non numbers
	                string = string.replace(/[^0-9\.]+/g, '');
	
	                value *= Number(string);
	            }
	
	            return value;
	        },
	        isNaN: function(value) {
	            return typeof value === 'number' && isNaN(value);
	        },
	        includes: function(string, search) {
	            return string.indexOf(search) !== -1;
	        },
	        insert: function(string, subString, start) {
	            return string.slice(0, start) + subString + string.slice(start);
	        },
	        reduce: function(array, callback /*, initialValue*/) {
	            if (this === null) {
	                throw new TypeError('Array.prototype.reduce called on null or undefined');
	            }
	
	            if (typeof callback !== 'function') {
	                throw new TypeError(callback + ' is not a function');
	            }
	
	            var t = Object(array),
	                len = t.length >>> 0,
	                k = 0,
	                value;
	
	            if (arguments.length === 3) {
	                value = arguments[2];
	            } else {
	                while (k < len && !(k in t)) {
	                    k++;
	                }
	
	                if (k >= len) {
	                    throw new TypeError('Reduce of empty array with no initial value');
	                }
	
	                value = t[k++];
	            }
	            for (; k < len; k++) {
	                if (k in t) {
	                    value = callback(value, t[k], k, t);
	                }
	            }
	            return value;
	        },
	        /**
	         * Computes the multiplier necessary to make x >= 1,
	         * effectively eliminating miscalculations caused by
	         * finite precision.
	         */
	        multiplier: function (x) {
	            var parts = x.toString().split('.');
	
	            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);
	        },
	        /**
	         * Given a variable number of arguments, returns the maximum
	         * multiplier that must be used to normalize an operation involving
	         * all of them.
	         */
	        correctionFactor: function () {
	            var args = Array.prototype.slice.call(arguments);
	
	            return args.reduce(function(accum, next) {
	                var mn = _.multiplier(next);
	                return accum > mn ? accum : mn;
	            }, 1);
	        },
	        /**
	         * Implementation of toFixed() that treats floats more like decimals
	         *
	         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present
	         * problems for accounting- and finance-related software.
	         */
	        toFixed: function(value, maxDecimals, roundingFunction, optionals) {
	            var splitValue = value.toString().split('.'),
	                minDecimals = maxDecimals - (optionals || 0),
	                boundedPrecision,
	                optionalsRegExp,
	                power,
	                output;
	
	            // Use the smallest precision value possible to avoid errors from floating point representation
	            if (splitValue.length === 2) {
	              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);
	            } else {
	              boundedPrecision = minDecimals;
	            }
	
	            power = Math.pow(10, boundedPrecision);
	
	            //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);
	            // Multiply up by precision, round accurately, then divide and use native toFixed():
	            output = (roundingFunction(value * power) / power).toFixed(boundedPrecision);
	
	            if (optionals > maxDecimals - boundedPrecision) {
	                optionalsRegExp = new RegExp('\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');
	                output = output.replace(optionalsRegExp, '');
	            }
	
	            return output;
	        }
	    };
	
	    // avaliable options
	    numeral.options = options;
	
	    // avaliable formats
	    numeral.formats = formats;
	
	    // avaliable formats
	    numeral.locales = locales;
	
	    // This function sets the current locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    numeral.locale = function(key) {
	        if (key) {
	            options.currentLocale = key.toLowerCase();
	        }
	
	        return options.currentLocale;
	    };
	
	    // This function provides access to the loaded locale data.  If
	    // no arguments are passed in, it will simply return the current
	    // global locale object.
	    numeral.localeData = function(key) {
	        if (!key) {
	            return locales[options.currentLocale];
	        }
	
	        key = key.toLowerCase();
	
	        if (!locales[key]) {
	            throw new Error('Unknown locale : ' + key);
	        }
	
	        return locales[key];
	    };
	
	    numeral.reset = function() {
	        for (var property in defaults) {
	            options[property] = defaults[property];
	        }
	    };
	
	    numeral.zeroFormat = function(format) {
	        options.zeroFormat = typeof(format) === 'string' ? format : null;
	    };
	
	    numeral.nullFormat = function (format) {
	        options.nullFormat = typeof(format) === 'string' ? format : null;
	    };
	
	    numeral.defaultFormat = function(format) {
	        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';
	    };
	
	    numeral.register = function(type, name, format) {
	        name = name.toLowerCase();
	
	        if (this[type + 's'][name]) {
	            throw new TypeError(name + ' ' + type + ' already registered.');
	        }
	
	        this[type + 's'][name] = format;
	
	        return format;
	    };
	
	
	    numeral.validate = function(val, culture) {
	        var _decimalSep,
	            _thousandSep,
	            _currSymbol,
	            _valArray,
	            _abbrObj,
	            _thousandRegEx,
	            localeData,
	            temp;
	
	        //coerce val to string
	        if (typeof val !== 'string') {
	            val += '';
	
	            if (console.warn) {
	                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);
	            }
	        }
	
	        //trim whitespaces from either sides
	        val = val.trim();
	
	        //if val is just digits return true
	        if (!!val.match(/^\d+$/)) {
	            return true;
	        }
	
	        //if val is empty return false
	        if (val === '') {
	            return false;
	        }
	
	        //get the decimal and thousands separator from numeral.localeData
	        try {
	            //check if the culture is understood by numeral. if not, default it to current locale
	            localeData = numeral.localeData(culture);
	        } catch (e) {
	            localeData = numeral.localeData(numeral.locale());
	        }
	
	        //setup the delimiters and currency symbol based on culture/locale
	        _currSymbol = localeData.currency.symbol;
	        _abbrObj = localeData.abbreviations;
	        _decimalSep = localeData.delimiters.decimal;
	        if (localeData.delimiters.thousands === '.') {
	            _thousandSep = '\\.';
	        } else {
	            _thousandSep = localeData.delimiters.thousands;
	        }
	
	        // validating currency symbol
	        temp = val.match(/^[^\d]+/);
	        if (temp !== null) {
	            val = val.substr(1);
	            if (temp[0] !== _currSymbol) {
	                return false;
	            }
	        }
	
	        //validating abbreviation symbol
	        temp = val.match(/[^\d]+$/);
	        if (temp !== null) {
	            val = val.slice(0, -1);
	            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {
	                return false;
	            }
	        }
	
	        _thousandRegEx = new RegExp(_thousandSep + '{2}');
	
	        if (!val.match(/[^\d.,]/g)) {
	            _valArray = val.split(_decimalSep);
	            if (_valArray.length > 2) {
	                return false;
	            } else {
	                if (_valArray.length < 2) {
	                    return ( !! _valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx));
	                } else {
	                    if (_valArray[0].length === 1) {
	                        return ( !! _valArray[0].match(/^\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\d+$/));
	                    } else {
	                        return ( !! _valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\d+$/));
	                    }
	                }
	            }
	        }
	
	        return false;
	    };
	
	
	    /************************************
	        Numeral Prototype
	    ************************************/
	
	    numeral.fn = Numeral.prototype = {
	        clone: function() {
	            return numeral(this);
	        },
	        format: function(inputString, roundingFunction) {
	            var value = this._value,
	                format = inputString || options.defaultFormat,
	                kind,
	                output,
	                formatFunction;
	
	            // make sure we have a roundingFunction
	            roundingFunction = roundingFunction || Math.round;
	
	            // format based on value
	            if (value === 0 && options.zeroFormat !== null) {
	                output = options.zeroFormat;
	            } else if (value === null && options.nullFormat !== null) {
	                output = options.nullFormat;
	            } else {
	                for (kind in formats) {
	                    if (format.match(formats[kind].regexps.format)) {
	                        formatFunction = formats[kind].format;
	
	                        break;
	                    }
	                }
	
	                formatFunction = formatFunction || numeral._.numberToFormat;
	
	                output = formatFunction(value, format, roundingFunction);
	            }
	
	            return output;
	        },
	        value: function() {
	            return this._value;
	        },
	        input: function() {
	            return this._input;
	        },
	        set: function(value) {
	            this._value = Number(value);
	
	            return this;
	        },
	        add: function(value) {
	            var corrFactor = _.correctionFactor.call(null, this._value, value);
	
	            function cback(accum, curr, currI, O) {
	                return accum + Math.round(corrFactor * curr);
	            }
	
	            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;
	
	            return this;
	        },
	        subtract: function(value) {
	            var corrFactor = _.correctionFactor.call(null, this._value, value);
	
	            function cback(accum, curr, currI, O) {
	                return accum - Math.round(corrFactor * curr);
	            }
	
	            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;
	
	            return this;
	        },
	        multiply: function(value) {
	            function cback(accum, curr, currI, O) {
	                var corrFactor = _.correctionFactor(accum, curr);
	                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);
	            }
	
	            this._value = _.reduce([this._value, value], cback, 1);
	
	            return this;
	        },
	        divide: function(value) {
	            function cback(accum, curr, currI, O) {
	                var corrFactor = _.correctionFactor(accum, curr);
	                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);
	            }
	
	            this._value = _.reduce([this._value, value], cback);
	
	            return this;
	        },
	        difference: function(value) {
	            return Math.abs(numeral(this._value).subtract(value).value());
	        }
	    };
	
	    /************************************
	        Default Locale && Format
	    ************************************/
	
	    numeral.register('locale', 'en', {
	        delimiters: {
	            thousands: ',',
	            decimal: '.'
	        },
	        abbreviations: {
	            thousand: 'k',
	            million: 'm',
	            billion: 'b',
	            trillion: 't'
	        },
	        ordinal: function(number) {
	            var b = number % 10;
	            return (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	        },
	        currency: {
	            symbol: '$'
	        }
	    });
	
	    
	
	(function() {
	        var decimal = {
	            base: 1000,
	            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
	        },
	        binary = {
	            base: 1024,
	            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']
	        };
	
	    numeral.register('format', 'bytes', {
	        regexps: {
	            format: /([0\s]i?b)/,
	            unformat: new RegExp('(' + decimal.suffixes.concat(binary.suffixes).join('|') + ')')
	        },
	        format: function(value, format, roundingFunction) {
	            var output,
	                bytes = numeral._.includes(format, 'ib') ? binary : decimal,
	                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',
	                power,
	                min,
	                max;
	
	            // check for space before
	            format = format.replace(/\s?i?b/, '');
	
	            for (power = 0; power <= bytes.suffixes.length; power++) {
	                min = Math.pow(bytes.base, power);
	                max = Math.pow(bytes.base, power + 1);
	
	                if (value === null || value === 0 || value >= min && value < max) {
	                    suffix += bytes.suffixes[power];
	
	                    if (min > 0) {
	                        value = value / min;
	                    }
	
	                    break;
	                }
	            }
	
	            output = numeral._.numberToFormat(value, format, roundingFunction);
	
	            return output + suffix;
	        },
	        unformat: function(string) {
	            var value = numeral._.stringToNumber(string),
	                power,
	                bytesMultiplier;
	
	            if (value) {
	                for (power = decimal.suffixes.length - 1; power >= 0; power--) {
	                    if (numeral._.includes(string, decimal.suffixes[power])) {
	                        bytesMultiplier = Math.pow(decimal.base, power);
	
	                        break;
	                    }
	
	                    if (numeral._.includes(string, binary.suffixes[power])) {
	                        bytesMultiplier = Math.pow(binary.base, power);
	
	                        break;
	                    }
	                }
	
	                value *= (bytesMultiplier || 1);
	            }
	
	            return value;
	        }
	    });
	})();
	
	
	(function() {
	        numeral.register('format', 'currency', {
	        regexps: {
	            format: /(\$)/
	        },
	        format: function(value, format, roundingFunction) {
	            var locale = numeral.locales[numeral.options.currentLocale],
	                symbols = {
	                    before: format.match(/^([\+|\-|\(|\s|\$]*)/)[0],
	                    after: format.match(/([\+|\-|\)|\s|\$]*)$/)[0]
	                },
	                output,
	                symbol,
	                i;
	
	            // strip format of spaces and $
	            format = format.replace(/\s?\$\s?/, '');
	
	            // format the number
	            output = numeral._.numberToFormat(value, format, roundingFunction);
	
	            // update the before and after based on value
	            if (value >= 0) {
	                symbols.before = symbols.before.replace(/[\-\(]/, '');
	                symbols.after = symbols.after.replace(/[\-\)]/, '');
	            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {
	                symbols.before = '-' + symbols.before;
	            }
	
	            // loop through each before symbol
	            for (i = 0; i < symbols.before.length; i++) {
	                symbol = symbols.before[i];
	
	                switch (symbol) {
	                    case '$':
	                        output = numeral._.insert(output, locale.currency.symbol, i);
	                        break;
	                    case ' ':
	                        output = numeral._.insert(output, ' ', i);
	                        break;
	                }
	            }
	
	            // loop through each after symbol
	            for (i = symbols.after.length - 1; i >= 0; i--) {
	                symbol = symbols.after[i];
	
	                switch (symbol) {
	                    case '$':
	                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));
	                        break;
	                    case ' ':
	                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i)));
	                        break;
	                }
	            }
	
	
	            return output;
	        }
	    });
	})();
	
	
	(function() {
	        numeral.register('format', 'exponential', {
	        regexps: {
	            format: /(e\+|e-)/,
	            unformat: /(e\+|e-)/
	        },
	        format: function(value, format, roundingFunction) {
	            var output,
	                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',
	                parts = exponential.split('e');
	
	            format = format.replace(/e[\+|\-]{1}0/, '');
	
	            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);
	
	            return output + 'e' + parts[1];
	        },
	        unformat: function(string) {
	            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),
	                value = Number(parts[0]),
	                power = Number(parts[1]);
	
	            power = numeral._.includes(string, 'e-') ? power *= -1 : power;
	
	            function cback(accum, curr, currI, O) {
	                var corrFactor = numeral._.correctionFactor(accum, curr),
	                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);
	                return num;
	            }
	
	            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);
	        }
	    });
	})();
	
	
	(function() {
	        numeral.register('format', 'ordinal', {
	        regexps: {
	            format: /(o)/
	        },
	        format: function(value, format, roundingFunction) {
	            var locale = numeral.locales[numeral.options.currentLocale],
	                output,
	                ordinal = numeral._.includes(format, ' o') ? ' ' : '';
	
	            // check for space before
	            format = format.replace(/\s?o/, '');
	
	            ordinal += locale.ordinal(value);
	
	            output = numeral._.numberToFormat(value, format, roundingFunction);
	
	            return output + ordinal;
	        }
	    });
	})();
	
	
	(function() {
	        numeral.register('format', 'percentage', {
	        regexps: {
	            format: /(%)/,
	            unformat: /(%)/
	        },
	        format: function(value, format, roundingFunction) {
	            var space = numeral._.includes(format, ' %') ? ' ' : '',
	                output;
	
	            value = value * 100;
	
	            // check for space before %
	            format = format.replace(/\s?\%/, '');
	
	            output = numeral._.numberToFormat(value, format, roundingFunction);
	
	            if (numeral._.includes(output, ')')) {
	                output = output.split('');
	
	                output.splice(-1, 0, space + '%');
	
	                output = output.join('');
	            } else {
	                output = output + space + '%';
	            }
	
	            return output;
	        },
	        unformat: function(string) {
	            return numeral._.stringToNumber(string) * 0.01;
	        }
	    });
	})();
	
	
	(function() {
	        numeral.register('format', 'time', {
	        regexps: {
	            format: /(:)/,
	            unformat: /(:)/
	        },
	        format: function(value, format, roundingFunction) {
	            var hours = Math.floor(value / 60 / 60),
	                minutes = Math.floor((value - (hours * 60 * 60)) / 60),
	                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));
	
	            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);
	        },
	        unformat: function(string) {
	            var timeArray = string.split(':'),
	                seconds = 0;
	
	            // turn hours and minutes into seconds and add them all up
	            if (timeArray.length === 3) {
	                // hours
	                seconds = seconds + (Number(timeArray[0]) * 60 * 60);
	                // minutes
	                seconds = seconds + (Number(timeArray[1]) * 60);
	                // seconds
	                seconds = seconds + Number(timeArray[2]);
	            } else if (timeArray.length === 2) {
	                // minutes
	                seconds = seconds + (Number(timeArray[0]) * 60);
	                // seconds
	                seconds = seconds + Number(timeArray[1]);
	            }
	            return Number(seconds);
	        }
	    });
	})();
	
	return numeral;
	}));


/***/ },
/* 37 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports.defaultMemoize = defaultMemoize;
	exports.createSelectorCreator = createSelectorCreator;
	exports.createStructuredSelector = createStructuredSelector;
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function defaultEqualityCheck(a, b) {
	  return a === b;
	}
	
	function defaultMemoize(func) {
	  var equalityCheck = arguments.length <= 1 || arguments[1] === undefined ? defaultEqualityCheck : arguments[1];
	
	  var lastArgs = null;
	  var lastResult = null;
	  return function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    if (lastArgs === null || lastArgs.length !== args.length || !args.every(function (value, index) {
	      return equalityCheck(value, lastArgs[index]);
	    })) {
	      lastResult = func.apply(undefined, args);
	    }
	    lastArgs = args;
	    return lastResult;
	  };
	}
	
	function getDependencies(funcs) {
	  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;
	
	  if (!dependencies.every(function (dep) {
	    return typeof dep === 'function';
	  })) {
	    var dependencyTypes = dependencies.map(function (dep) {
	      return typeof dep;
	    }).join(', ');
	    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));
	  }
	
	  return dependencies;
	}
	
	function createSelectorCreator(memoize) {
	  for (var _len2 = arguments.length, memoizeOptions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	    memoizeOptions[_key2 - 1] = arguments[_key2];
	  }
	
	  return function () {
	    for (var _len3 = arguments.length, funcs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	      funcs[_key3] = arguments[_key3];
	    }
	
	    var recomputations = 0;
	    var resultFunc = funcs.pop();
	    var dependencies = getDependencies(funcs);
	
	    var memoizedResultFunc = memoize.apply(undefined, [function () {
	      recomputations++;
	      return resultFunc.apply(undefined, arguments);
	    }].concat(memoizeOptions));
	
	    var selector = function selector(state, props) {
	      for (var _len4 = arguments.length, args = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {
	        args[_key4 - 2] = arguments[_key4];
	      }
	
	      var params = dependencies.map(function (dependency) {
	        return dependency.apply(undefined, [state, props].concat(args));
	      });
	      return memoizedResultFunc.apply(undefined, _toConsumableArray(params));
	    };
	
	    selector.resultFunc = resultFunc;
	    selector.recomputations = function () {
	      return recomputations;
	    };
	    selector.resetRecomputations = function () {
	      return recomputations = 0;
	    };
	    return selector;
	  };
	}
	
	var createSelector = exports.createSelector = createSelectorCreator(defaultMemoize);
	
	function createStructuredSelector(selectors) {
	  var selectorCreator = arguments.length <= 1 || arguments[1] === undefined ? createSelector : arguments[1];
	
	  if (typeof selectors !== 'object') {
	    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));
	  }
	  var objectKeys = Object.keys(selectors);
	  return selectorCreator(objectKeys.map(function (key) {
	    return selectors[key];
	  }), function () {
	    for (var _len5 = arguments.length, values = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	      values[_key5] = arguments[_key5];
	    }
	
	    return values.reduce(function (composition, value, index) {
	      composition[objectKeys[index]] = value;
	      return composition;
	    }, {});
	  });
	}

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_, Constants) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.mergeAndConcat = exports.deserializeAction = exports.serializeAction = exports.toPathString = exports.parseJSON = exports.getDatePickerFormat = exports.getStringFormat = exports.getDateFormat = exports.bootstrap = exports.isCordova = exports.takeAction = undefined;
	
	var _moment = __webpack_require__(27);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	__webpack_require__(39);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var takeAction = exports.takeAction = function takeAction(action1) {
	    var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (value) {
	        return value;
	    };
	    return function (action2) {
	        return _.isEqual(selector(action1), selector(action2));
	    };
	};
	
	var isCordova = exports.isCordova = function isCordova() {
	    return typeof window !== 'undefined' && window.cordova;
	};
	
	var bootstrap = exports.bootstrap = function bootstrap() {
	    return new Promise(function (resolve) {
	        if (isCordova()) {
	            document.addEventListener('deviceready', resolve, false);
	        } else {
	            // document.addEventListener('DOMContentLoaded', resolve, false);
	            resolve();
	        }
	    });
	};
	
	var getDateFormat = exports.getDateFormat = function getDateFormat(value, language) {
	    var formattedValue = '';
	    if (value) {
	        if (language === 'th') {
	            formattedValue = new Date(value).toLocaleDateString('th', {
	                day: '2-digit',
	                month: '2-digit',
	                year: 'numeric'
	            });
	        } else {
	            formattedValue = (0, _moment2.default)(value).format('DD/MM/YYYY');
	        }
	    }
	
	    return formattedValue;
	};
	
	var getStringFormat = exports.getStringFormat = function getStringFormat(value, format, char) {
	    if (_.isNil(value)) {
	        return null;
	    }
	    var getSelected = typeof value === 'string' ? value.split('') : value;
	    var pattern = format.split('');
	    var label = _.map(pattern, function (item) {
	        if (item === char && getSelected[0] !== undefined) {
	            item = getSelected[0];
	            getSelected = _.drop(getSelected);
	        }
	        return item;
	    }).join('');
	    return {
	        value: value,
	        label: label
	    };
	};
	
	var getDatePickerFormat = exports.getDatePickerFormat = function getDatePickerFormat(value, _ref) {
	    var enFormat = _ref.enFormat,
	        thFormat = _ref.thFormat,
	        _ref$valueFormat = _ref.valueFormat,
	        valueFormat = _ref$valueFormat === undefined ? 'YYYY-MM-DD' : _ref$valueFormat;
	
	    return {
	        value: value,
	        label: {
	            en: (0, _moment2.default)(value, valueFormat).locale('en').format(enFormat),
	            th: (0, _moment2.default)(value, valueFormat).locale('th').add(543, 'years').format(thFormat)
	        }
	    };
	};
	
	var parseJSON = exports.parseJSON = function parseJSON(json) {
	    try {
	        return JSON.parse(json);
	    } catch (err) {
	        return json;
	    }
	};
	
	var toPathString = exports.toPathString = function toPathString(list) {
	    return _(list).chain().map(function (name) {
	        if (_.isInteger(name)) {
	            return '[' + name + ']';
	        }
	
	        return name;
	    }).join('.').replace(/\.\[/g, '[').value();
	};
	
	var FORM_ACTION = ['UPDATED_APPLICATION_FORM', 'REMOVED_APPLICATION_FORM'];
	
	var isGUID = function isGUID(appId) {
	    return (/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.test(appId)
	    );
	};
	
	var getAppId = function getAppId(action, currentAppId) {
	    var SET_1 = [Constants.DELETED_APPLICATION_FORM];
	    var SET_2 = [Constants.UPDATED_APPLICATION_FORM, Constants.UPDATED_APPLICATION_FORM_NO_MODIFIED, Constants.REMOVED_APPLICATION_FORM];
	    var SET_3 = [Constants.SETED_APPLICATION_FORM, Constants.MERGED_APPLICATION];
	    var SET_4 = [Constants.CREATED_APPLICATION_FORM, Constants.UPDATED_FIRST_TIME_PAYMENT];
	    var ACTION_LIST = [].concat(SET_1, SET_2, SET_3, SET_4);
	    if (_.includes(ACTION_LIST, action.type)) {
	        if (_.includes(SET_1, action.type)) {
	            var appId = _.get(action, 'payload');
	            if (isGUID(appId)) {
	                return appId;
	            } else {
	                alert('is Index1');
	            }
	        }
	        if (_.includes(SET_2, action.type)) {
	            var _appId = _.get(action, ['payload', 2]);
	            if (action.payload.length === 2) {
	                return currentAppId;
	            }
	            if (isGUID(_appId)) {
	                return _appId;
	            } else {
	                alert('is Index2');
	            }
	        }
	        if (_.includes(SET_3, action.type)) {
	            var _appId2 = _.get(action, ['payload', 1]);
	            if (action.payload.length === 1) {
	                return currentAppId;
	            }
	            if (isGUID(_appId2)) {
	                return _appId2;
	            } else {
	                alert('is Index3');
	            }
	        }
	        if (_.includes(SET_4, action.type)) {
	            return _.get(action, ['payload', 'appId'], currentAppId);
	        }
	    }
	    return undefined;
	};
	
	var serializeAction = exports.serializeAction = function serializeAction(action, appId) {
	    var meta = _.get(action, 'meta');
	    var fieldId = _.get(action, ['payload', 0]);
	    var value = _.get(action, ['payload', 1]);
	
	    var isMerge = _.get(meta, ['merge'], false) === true || _.isArray(fieldId) || _.isArray(value);
	
	    return _({
	        payload: JSON.stringify(_.get(action, 'payload')) || '',
	        appId: getAppId(action, appId),
	        type: _.get(action, 'type'),
	        replay: isMerge ? 2 : 1,
	        timestamp: Date.now(),
	        sequenceId: 1
	    }).extend(_.isString(meta) ? {
	        extra: meta
	    } : {}).extend(_.includes(FORM_ACTION, action.type) || _.isString(meta) ? {
	        fieldId: _.isArray(fieldId) ? JSON.stringify(fieldId) : fieldId
	    } : {}).value();
	};
	
	var deserializeAction = exports.deserializeAction = function deserializeAction(data) {
	    var isJSONArray = function isJSONArray(value) {
	        return _.startsWith(value, '[') && _.endsWith(value, ']');
	    };
	    // const fieldId = isJSONArray(data.fieldId) ? parseJSON(data.fieldId) : data.fieldId;
	
	    return _({
	        type: data.type
	    }).extend(_.includes(FORM_ACTION, data.type) ? {
	        payload: parseJSON(data.payload)
	    } : {
	        payload: parseJSON(data.payload)
	    }).value();
	};
	
	var mergeAndConcat = exports.mergeAndConcat = function mergeAndConcat(b) {
	    return function (a) {
	        return _.mergeWith({}, a, b, function (a, b) {
	            if (_.isArray(a) || _.isArray(b)) {
	                return _([]).concat(a, b).reject(_.isNil).value();
	            }
	        });
	    };
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(35)))

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Thai [th]
	//! author : Kridsada Thanabulpong : https://github.com/sirn
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var th = moment.defineLocale('th', {
	        months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
	        monthsShort : 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
	        weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
	        weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'YYYY/MM/DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY เวลา H:mm',
	            LLLL : 'วันddddที่ D MMMM YYYY เวลา H:mm'
	        },
	        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
	        isPM: function (input) {
	            return input === 'หลังเที่ยง';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ก่อนเที่ยง';
	            } else {
	                return 'หลังเที่ยง';
	            }
	        },
	        calendar : {
	            sameDay : '[วันนี้ เวลา] LT',
	            nextDay : '[พรุ่งนี้ เวลา] LT',
	            nextWeek : 'dddd[หน้า เวลา] LT',
	            lastDay : '[เมื่อวานนี้ เวลา] LT',
	            lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'อีก %s',
	            past : '%sที่แล้ว',
	            s : 'ไม่กี่วินาที',
	            m : '1 นาที',
	            mm : '%d นาที',
	            h : '1 ชั่วโมง',
	            hh : '%d ชั่วโมง',
	            d : '1 วัน',
	            dd : '%d วัน',
	            M : '1 เดือน',
	            MM : '%d เดือน',
	            y : '1 ปี',
	            yy : '%d ปี'
	        }
	    });
	
	    return th;
	
	}));

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Constants, _) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.EappReducer = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _redux = __webpack_require__(8);
	
	var _ConfigReducer = __webpack_require__(41);
	
	var _ConfigReducer2 = _interopRequireDefault(_ConfigReducer);
	
	var _DocumentReducer = __webpack_require__(42);
	
	var _DocumentReducer2 = _interopRequireDefault(_DocumentReducer);
	
	var _GroupReducer = __webpack_require__(43);
	
	var _GroupReducer2 = _interopRequireDefault(_GroupReducer);
	
	var _AppReducer = __webpack_require__(44);
	
	var _AppReducer2 = _interopRequireDefault(_AppReducer);
	
	var _StateReducer = __webpack_require__(45);
	
	var _StateReducer2 = _interopRequireDefault(_StateReducer);
	
	var _MasterReducer = __webpack_require__(46);
	
	var _MasterReducer2 = _interopRequireDefault(_MasterReducer);
	
	var _ApplicationFormReducer = __webpack_require__(47);
	
	var _ApplicationFormReducer2 = _interopRequireDefault(_ApplicationFormReducer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var EappReducer = exports.EappReducer = {
	    doc: _DocumentReducer2.default,
	    group: _GroupReducer2.default,
	    form: _ApplicationFormReducer2.default
	};
	
	exports.default = function (odReducer) {
	    return {
	        eapp: function eapp(state, action) {
	            if (action.type === Constants.SETED_SNAP_SHOT) {
	                var newState = _.omit(action.payload || {}, ['ui', 'state', 'config', 'master']);
	
	                state = _extends({}, state, newState);
	            }
	
	            console.log('REDUCER::' + action.type + ' :', action.payload);
	
	            return (0, _redux.combineReducers)(_extends({
	                ui: _AppReducer2.default,
	                state: _StateReducer2.default,
	                config: _ConfigReducer2.default,
	                master: _MasterReducer2.default
	            }, EappReducer, odReducer))(state, action);
	        }
	    };
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(35), __webpack_require__(1)))

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Constants) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var initState = {
	    'expireDuration': [30, 'days']
	};
	
	if (typeof window !== 'undefined' && window.localStorage) {
	    var config = localStorage.getItem('config');
	    initState = config ? JSON.parse(config) : initState;
	}
	
	exports.default = function () {
	    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;
	
	    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	        type = _ref.type,
	        payload = _ref.payload;
	
	    var hash = state.hash;
	
	
	    switch (type) {
	
	        case Constants.INITED_CONFIG:
	            return payload || initState;
	
	        case Constants.UPDATED_CONFIG:
	            var _payload = _slicedToArray(payload, 2),
	                name = _payload[0],
	                value = _payload[1];
	
	            return _extends({}, state, _defineProperty({}, name, value));
	        case 'SET_CT_VERSION':
	            return _extends({}, state, {
	                CTversion: payload
	            });
	
	        default:
	            return state;
	    }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(35)))

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Constants, _) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _fp = __webpack_require__(3);
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var initState = {};
	
	exports.default = function () {
	    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;
	
	    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	        type = _ref.type,
	        payload = _ref.payload;
	
	    var DOC_ID = 'id';
	    var FILE_ID = 'id';
	
	    var doc, files;
	    var docId;
	    var docId, files;
	    var newFiles;
	    var docId, files;
	    var docId, fileId, status;
	    var docId, appId;
	
	    var _ret = function () {
	        switch (type) {
	            case 'LOGGING_OUT':
	                return {
	                    v: initState
	                };
	
	            case Constants.INITED_DOCUMENT:
	            case Constants.UPDATED_DOCUMENT:
	                var _payload = _slicedToArray(payload, 2);
	
	                doc = _payload[0];
	                files = _payload[1];
	                docId = _.get(doc, DOC_ID);
	
	
	                if (type === Constants.INITED_DOCUMENT && _.has(state, docId)) {
	                    return {
	                        v: state
	                    };
	                }
	
	                return {
	                    v: _extends({}, state, _defineProperty({}, docId, _extends({}, doc, {
	                        appList: _.get(doc, 'appList', []),
	                        files: _(files).keyBy(FILE_ID).mapValues(function (file) {
	                            return _.defaults({}, file, {
	                                created: Date.now(),
	                                status: Constants.STATUS_UPLOAD_IDLE
	                            });
	                        }).value()
	                    })))
	                };
	
	            case Constants.REMOVED_DOCUMENT:
	                return {
	                    v: _.omit(state, payload)
	                };
	
	            case Constants.UPDATED_DOCUMENT_FILES:
	                var _payload2 = _slicedToArray(payload, 2);
	
	                docId = _payload2[0];
	                files = _payload2[1];
	                newFiles = _(files).keyBy(FILE_ID).mapValues(function (file) {
	                    return _extends({}, file, {
	                        created: Date.now()
	                    });
	                }).value();
	
	
	                return {
	                    v: (0, _fp.set)([docId, 'files'], newFiles)(state)
	                };
	
	            case Constants.REMOVED_DOCUMENT_FILES:
	                var _payload3 = _slicedToArray(payload, 2);
	
	                docId = _payload3[0];
	                files = _payload3[1];
	
	
	                if (_.has(state, docId) && _.has(state[docId], 'files')) {
	                    return {
	                        v: _extends({}, state, _defineProperty({}, docId, _extends({}, state[docId], {
	                            files: _.omit(state[docId]['files'], files)
	                        })))
	                    };
	                }
	
	                return {
	                    v: state
	                };
	
	            case Constants.UPDATED_DOCUMENT_FILE_STATUS:
	                var _payload4 = _slicedToArray(payload, 3);
	
	                docId = _payload4[0];
	                fileId = _payload4[1];
	                status = _payload4[2];
	
	
	                return {
	                    v: (0, _fp.set)([docId, 'files', fileId, 'status'], status)(state)
	                };
	
	            case Constants.UPDATED_DOCUMENT_APP:
	                var _payload5 = _slicedToArray(payload, 2);
	
	                docId = _payload5[0];
	                appId = _payload5[1];
	
	
	                if (_.has(state, docId)) {
	                    return {
	                        v: _extends({}, state, _defineProperty({}, docId, _extends({}, state[docId], {
	                            appList: _(state[docId]).chain().get('appList').concat(appId).value()
	                        })))
	                    };
	                }
	
	                return {
	                    v: state
	                };
	            case Constants.REMOVED_DOCUMENT_APP:
	                var _payload6 = _slicedToArray(payload, 2),
	                    docId = _payload6[0],
	                    appId = _payload6[1];
	
	                if (_.has(state, docId)) {
	                    return {
	                        v: _extends({}, state, _defineProperty({}, docId, _extends({}, state[docId], {
	                            appList: (0, _fp.filter)(function (id) {
	                                return id !== appId;
	                            })(_.get(state, [docId, 'appList']))
	                        })))
	                    };
	                }
	                return {
	                    v: state
	                };
	
	            default:
	                return {
	                    v: state
	                };
	        }
	    }();
	
	    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(35), __webpack_require__(1)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Constants, _) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _utils = __webpack_require__(38);
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var initState = {
	    currentId: '',
	    hash: {}
	};
	
	exports.default = function () {
	    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;
	
	    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	        type = _ref.type,
	        payload = _ref.payload;
	
	    var currentId = state.currentId,
	        hash = state.hash;
	
	
	    switch (type) {
	
	        case 'LOGGING_OUT':
	            return initState;
	
	        case Constants.SELECTED_APPLICATION_GROUP:
	            return _extends({}, state, {
	                currentId: payload
	            });
	
	        case Constants.INTTED_APPLICATION_GROUP:
	            var _payload = _slicedToArray(payload, 2),
	                name = _payload[0],
	                value = _payload[1];
	
	            return _extends({}, state, {
	                hash: _extends({}, hash, _defineProperty({}, name, value))
	            });
	
	        case Constants.UPDATED_APPLICATION_GROUP:
	            var modified = Date.now();
	            var currentGroup = _extends({}, _(hash).get(currentId));
	            var newAppList = _.chain(currentGroup).get('appList').filter(function (n) {
	                return !_.has(payload, n);
	            }).value();
	            var updatedGroup = _extends({}, currentGroup, { appList: newAppList, modified: modified });
	
	            if (newAppList.length === 0) {
	                var newHash = _(hash).chain().omit(currentId).value();
	                return _extends({}, state, {
	                    currentId: '',
	                    hash: _extends({}, newHash)
	                });
	            }
	
	            return _extends({}, state, {
	                hash: _extends({}, hash, _defineProperty({}, currentId, updatedGroup))
	            });
	
	        case Constants.SUBMITTED_APPLICATION_GROUP:
	            var _payload2 = _slicedToArray(payload, 2),
	                masterIdGroup = _payload2[0],
	                childrenIdGroup = _payload2[1];
	
	            var created = Date.now();
	            var groupId = created.toString(32);
	            var appList = _.keys(childrenIdGroup);
	
	            var groupData = _defineProperty({}, groupId, {
	                groupId: groupId,
	                masterId: masterIdGroup,
	                appList: appList,
	                created: created,
	                modified: created
	            });
	            return _extends({}, state, {
	                hash: _extends({}, hash, groupData)
	            });
	
	        default:
	            return state;
	    }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(35), __webpack_require__(1)))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Constants) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var initialState = {
	    language: 'th',
	    alert: '',
	    modal: {
	        isOpen: false,
	        type: null,
	        contentProps: {}
	    }
	};
	
	exports.default = function () {
	    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	
	    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	        type = _ref.type,
	        payload = _ref.payload;
	
	    switch (type) {
	
	        case 'CHANGED_LANGUAGE':
	            return _extends({}, state, {
	                language: payload
	            });
	
	        case Constants.UI_SHOWN_DIALOG:
	            return _extends({}, state, {
	                alert: payload
	            });
	
	        case Constants.UI_HIDDEN_DIALOG:
	        case Constants.UI_CONFIRMED_DIALOG:
	        case Constants.UI_CANCELLED_DIALOG:
	            return _extends({}, state, {
	                alert: ''
	            });
	        case 'SET_KEYBOARD_HEIGHT':
	            return _extends({}, state, {
	                keyboardHeight: payload
	            });
	        case Constants.UI_SHOWN_MODAL_DIALOG:
	            return _extends({}, state, {
	                modal: _extends({
	                    isOpen: true
	                }, payload)
	            });
	        case Constants.UI_CLOSE_MODAL_DIALOG:
	            return _extends({}, state, {
	                modal: {
	                    isOpen: false,
	                    type: null,
	                    contentProps: {}
	                }
	            });
	        default:
	            return state;
	    }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(35)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Constants, _) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _fp = __webpack_require__(3);
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var initState = {
	    pageLimit: 10,
	    pageLength: 1,
	    pageCurrentIndex: -1,
	    slideCurrentIndex: 0,
	    previewLanguage: 'th',
	    formType: '',
	    invalid: {},
	    template: {},
	    slides: [],
	    sync: {
	        isSync: false,
	        latestDate: Date.now()
	    },
	    signaturePad: {
	        isOpen: false
	    },
	    signerList: [],
	    documentsList: [],
	    OTP: {
	        isOpen: false,
	        key: null,
	        referenceCode: '',
	        invalid: false
	    },
	    isWaitSaveAction: false,
	    search: {
	        keyword: '',
	        agent: '',
	        status: '',
	        startDate: '',
	        endDate: ''
	    },
	    sort: {
	        order: 'desc',
	        key: 'updated'
	    },
	    paymentFlag: false,
	    paymentStatus: '',
	    paymentTrNumber: '',
	    paymentBankSelector: {},
	    paymentRelationSelector: {},
	    paymentRef: '',
	    eappStatus: {
	        DR: 'status_draft',
	        PA: 'Paid',
	        QU: 'Eapp_status_queuing',
	        SM: 'Eapp_status_submitted',
	        MM: 'Eapp_status_memo',
	        CO: 'Eapp_status_counter_offer',
	        MC: 'Eapp_status_memo_counter_offer',
	        WD: 'Eapp_status_withdraw',
	        UW: 'Eapp_status_approved',
	        DC: 'Eapp_status_declined',
	        PO: 'Eapp_status_postponed',
	        PI: 'Eapp_status_pending_inforced',
	        IF: 'Eapp_status_issued',
	        CC: 'Eapp_status_cancelled'
	    },
	    submitInfo: {},
	    isLoadingAction: false
	};
	
	exports.default = function () {
	    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;
	
	    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	        type = _ref.type,
	        payload = _ref.payload;
	
	    var slides = state.slides,
	        template = state.template,
	        childrenIdGroup = state.childrenIdGroup,
	        createGroupTemplate = state.createGroupTemplate,
	        search = state.search,
	        sort = state.sort;
	
	
	    switch (type) {
	        case 'LOGGING_OUT':
	            return initState;
	
	        case Constants.STOP_FILL_ADDRESS:
	            return _extends({}, state, {
	                isStopFillInsuredAddress: payload
	            });
	
	        case Constants.STOP_REMOVE_PROPDUCT_POPUP:
	            return _extends({}, state, {
	                isStopRemoveProductPopup: payload
	            });
	
	        case 'SETED_PREVIEW_LANGUAGE':
	            return _extends({}, state, {
	                previewLanguage: payload
	            });
	
	        case Constants.WATING_SYNC:
	            return _extends({}, state, {
	                isWaitSync: true
	            });
	
	        case Constants.FAILED_SYNC:
	        case Constants.FINISHED_SYNC:
	            return _extends({}, state, {
	                isWaitSync: false
	            });
	
	        case Constants.SAVING_ACTION:
	            return _extends({}, state, {
	                isWaitSaveAction: true
	            });
	
	        case Constants.SAVED_ACTION:
	            return _extends({}, state, {
	                isWaitSaveAction: false
	            });
	
	        case Constants.INITED_FORM_TYPE:
	            return _extends({}, state, {
	                formType: payload
	            });
	
	        case Constants.UPDATED_APPLICATION_STATE:
	            var _payload = _slicedToArray(payload, 2),
	                name = _payload[0],
	                value = _payload[1];
	
	            return _extends({}, state, _defineProperty({}, name, value));
	
	        case Constants.REMOVED_APPLICATION_STATE:
	            var _payload2 = _slicedToArray(payload, 2),
	                name = _payload2[0],
	                paths = _payload2[1];
	
	            return _.defaultsDeep({}, (0, _fp.unset)(_.compact(_.concat([name], paths)), state), _.pick(initState, name));
	
	        case Constants.SETED_APPLICATION_SLIDES_WITH_QUESTION:
	            var _payload3 = _slicedToArray(payload, 2),
	                questionId = _payload3[0],
	                newSlides = _payload3[1];
	
	            var getPrefix = function getPrefix(questionId) {
	                return _.replace(questionId, /\[([0-9]|i)*\]/, '');
	            };
	            var getQuestionId = function getQuestionId(slide) {
	                return _.get(slide, ['questions', 0]);
	            };
	
	            var startIndex = _.findIndex(slides, function (slide) {
	                return _.startsWith(getPrefix(getQuestionId(slide)), getPrefix(questionId));
	            });
	            var endIndex = _.findLastIndex(slides, function (slide) {
	                return _.startsWith(getPrefix(getQuestionId(slide)), getPrefix(questionId));
	            });
	
	            if (startIndex >= 0 && endIndex < slides.length) {
	                var list = _.map(newSlides, function (slide, index) {
	                    return _extends({}, slide, {
	                        key: _(slides).map('key').max() + index + 1
	                    });
	                });
	
	                return _extends({}, state, {
	                    slides: [].concat(_toConsumableArray(slides.slice(0, startIndex + 1)), _toConsumableArray(list), _toConsumableArray(slides.slice(endIndex + 1)))
	                });
	            }
	
	            return state;
	
	        case Constants.ADDED_APPLICATION_SLIDES:
	            var _payload4 = _slicedToArray(payload, 2),
	                index = _payload4[0],
	                newSlides = _payload4[1];
	
	            if (index >= 0) {
	                var list = _.map(newSlides, function (slide, index) {
	                    return _extends({}, slide, {
	                        key: _(slides).map('key').max() + index + 1
	                    });
	                });
	
	                return _extends({}, state, {
	                    slides: [].concat(_toConsumableArray(slides.slice(0, index + 1)), _toConsumableArray(list), _toConsumableArray(slides.slice(index + 1)))
	                });
	            }
	
	            return state;
	
	        case Constants.REMOVED_APPLICATION_SLIDES:
	            var _payload5 = _slicedToArray(payload, 2),
	                index = _payload5[0],
	                _payload5$ = _payload5[1],
	                length = _payload5$ === undefined ? 1 : _payload5$;
	
	            if (_.isNumber(index)) {
	                return _extends({}, state, {
	                    slides: _.reject(slides, function (value, key) {
	                        return key >= index && key < index + length;
	                    })
	                });
	            }
	
	            if (_.isString(index)) {
	                return _extends({}, state, {
	                    slides: _.reject(slides, function (_ref2, key) {
	                        var questions = _ref2.questions;
	                        return _.includes(questions, index);
	                    })
	                });
	            }
	            return state;
	        case Constants.INITED_APPLICATION_SLIDES:
	            return _extends({}, state, {
	                slides: _.map(payload, function (slide, index) {
	                    return _.defaults({}, slide, {
	                        key: index
	                    });
	                })
	            });
	
	        case Constants.HIDDEN_REMAIN_APPLICATION_SLIDES:
	            var lastIndex = _.findIndex(slides, function (slide) {
	                return _(slide).chain().get('questions').includes(payload).value();
	            });
	
	            return _extends({}, state, {
	                slides: _.map(slides, function (slide, index) {
	                    return _extends({}, slide, {
	                        hidden: _.get(slide, 'hidden', false) || index > lastIndex
	                    });
	                })
	            });
	
	        case Constants.SHOWN_REMAIN_APPLICATION_SLIDES:
	            var isValid = _(slides).chain().findLast(['hidden', false]).get('questions').includes(payload).value();
	
	            if (isValid) {
	                return _extends({}, state, {
	                    slides: _.map(slides, function (slide, index) {
	                        return _.omit(slide, 'hidden');
	                    })
	                });
	            }
	
	            return state;
	
	        case Constants.INITED_APPLICATION_TEMPLATE:
	            return _extends({}, state, {
	                template: payload
	            });
	
	        case Constants.SETED_SLIDE_CURRENT_INDEX:
	            var index = payload;
	            if (_.isString(payload)) {
	                index = _.findIndex(slides, function (slide) {
	                    return _(slide).chain().get('questions').includes(payload).value();
	                });
	            }
	
	            if (!_.isInteger(index)) {
	                return state;
	            }
	
	            return _extends({}, state, {
	                slideCurrentIndex: index
	            });
	
	        case Constants.SETED_PAGE_CURRENT_INDEX:
	            return _extends({}, state, {
	                pageCurrentIndex: payload
	            });
	
	        case Constants.RESETED_APPLICATION_STATE:
	            // This case had affect with invalid in store
	            // var props = payload || ['slideCurrentIndex', 'invalid'];
	            var props = payload || ['slideCurrentIndex'];
	
	            return _extends({}, state, _.pick(initState, props));
	
	        case Constants.SETED_INVALID_APPLICATION_FORM:
	            return _extends({}, state, {
	                invalid: payload || {}
	            });
	
	        case Constants.SEARCHED_APPLICATION_FORM:
	            return _extends({}, state, {
	                search: _extends({}, search, {
	                    keyword: payload
	                })
	            });
	
	        case Constants.FILTERED_APPLICATION_FORM:
	            return _extends({}, state, {
	                search: _extends({}, search, payload)
	            });
	
	        case Constants.SORTED_KEY_APPLICATION_FORM:
	            return _extends({}, state, {
	                sort: _extends({}, sort, {
	                    key: payload
	                })
	            });
	
	        case Constants.ORDERED_APPLICATION_FORM:
	            return _extends({}, state, {
	                sort: _extends({}, sort, {
	                    order: _.get(sort, 'order') === 'desc' ? 'asc' : 'desc'
	                })
	            });
	
	        case Constants.SET_PAYMENT_FLAG:
	            var _status = payload;
	
	            return _extends({}, state, {
	                paymentFlag: _status
	            });
	
	        case Constants.SETTED_PAYMENT_TR_NUMBER:
	            var tr_number = payload;
	
	            return _extends({}, state, {
	                paymentTrNumber: tr_number
	            });
	
	        case Constants.SETTED_PAYMENT_STATUS:
	            var _status = payload;
	
	            return _extends({}, state, {
	                paymentStatus: _status
	            });
	
	        case Constants.SET_PAYMENT_REF:
	            var ref = payload;
	
	            return _extends({}, state, {
	                paymentRef: ref
	            });
	        /**
	         *
	         * OTP
	         */
	        case Constants.SET_OTP:
	            return _extends({}, state, {
	                OTP: _extends({}, state.OTP, payload)
	            });
	
	        /**
	         * SignaturePad
	         */
	        case Constants.UI_SHOWN_SIGNATURE_CONTAINER:
	            return _extends({}, state, {
	                signaturePad: _extends({}, state.signaturePad, {
	                    isOpen: true
	                })
	            });
	        case Constants.UI_CLOSE_SIGNATURE_CONTAINER:
	            return _extends({}, state, {
	                signaturePad: _extends({}, state.signaturePad, {
	                    isOpen: false
	                })
	            });
	        case Constants.SAVED_SIGNER_LIST:
	            return _extends({}, state, {
	                signerList: payload
	            });
	        case Constants.SAVED_DOCUMENTS_LIST:
	            return _extends({}, state, {
	                documentsList: payload
	            });
	        case Constants.STARTING_REFRESH:
	            return _extends({}, state, {
	                sync: _extends({}, state.sync, {
	                    isSync: true
	                })
	            });
	        case Constants.STOPPING_REFRESH:
	            return _extends({}, state, {
	                sync: _extends({}, state.sync, {
	                    isSync: false,
	                    latestDate: Date.now()
	                })
	            });
	        case Constants.SETED_SUBMIT_RESULT:
	            return _extends({}, state, {
	                submitInfo: _extends({}, payload)
	            });
	        case Constants.START_LOAD_ACTION:
	            return _extends({}, state, {
	                isLoadingAction: true
	            });
	        case Constants.STOP_LOAD_ACTION:
	            return _extends({}, state, {
	                isLoadingAction: false
	            });
	
	        default:
	            return state;
	    }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(35), __webpack_require__(1)))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Constants, _) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var initState = {
	    formType: ''
	};
	
	exports.default = function () {
	    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;
	    var _ref = arguments[1];
	    var type = _ref.type,
	        payload = _ref.payload;
	    var formType = state.formType;
	
	    switch (type) {
	
	        case 'LOGGING_OUT':
	            return initState;
	
	        case Constants.INITED_FORM_TYPE:
	            return _extends({}, state, {
	                formType: payload
	            });
	
	        case Constants.MASTER_INITED_DATA:
	            var _payload = _slicedToArray(payload, 2),
	                name = _payload[0],
	                value = _payload[1];
	
	            // if (formType === Constants.FORM_TYPE_PA) {
	            //     if (name === 'basic') {
	            //         value = {
	            //             'group': _.filter(value['group'], ['ProdGrpId', 14]),
	            //             'product': _.filter(value['product'], ['ProdGrpId', 14])
	            //         }
	            //     }
	            // }
	
	            return _extends({}, state, _defineProperty({}, name, value));
	        case Constants.MASTER_REMOVE_DATA:
	            return _.omit(state, payload);
	        default:
	            return state;
	    }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(35), __webpack_require__(1)))

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Constants) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _moment = __webpack_require__(27);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _fp = __webpack_require__(3);
	
	var _lodash = __webpack_require__(1);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _selectors = __webpack_require__(34);
	
	var _FormReducer = __webpack_require__(48);
	
	var _FormReducer2 = _interopRequireDefault(_FormReducer);
	
	var _utils = __webpack_require__(38);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	var initState = {
	    currentId: '',
	    currentIndex: -1,
	    prevState: {},
	    list: []
	};
	
	exports.default = function () {
	    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;
	
	    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	        type = _ref.type,
	        payload = _ref.payload;
	
	    var currentIndex = state.currentIndex,
	        list = state.list,
	        prevState = state.prevState;
	
	    var currentForm = list[currentIndex];
	    var isInList = function isInList(index) {
	        return _lodash2.default.isInteger(index) && index >= 0 && index < list.length;
	    };
	
	    var form, appId;
	    var index;
	    var form;
	    var appId;
	    var index;
	    var form;
	    var index;
	    var form;
	    var appId;
	    var index;
	    var name, path, appId;
	    var index;
	    var form;
	    var form;
	    var prevForm;
	    var value, appId;
	    var index;
	    var form;
	    var form;
	    var index;
	    var form;
	    var name, value, appId;
	    var index;
	    var form;
	    var form;
	    var appId, agentId;
	    var index;
	    var form;
	    var appIndex;
	    var appIndex;
	
	    var _ret = function () {
	        switch (type) {
	            case 'LOGGING_OUT':
	                return {
	                    v: initState
	                };
	
	            case Constants.MERGED_APPLICATION_LIST:
	                if (_lodash2.default.isPlainObject(payload)) {
	                    var prevList = _lodash2.default.keyBy(list, 'appId');
	                    return {
	                        v: _extends({}, state, {
	                            list: _lodash2.default.map(_extends({}, prevList, payload))
	                        })
	                    };
	                }
	
	                return {
	                    v: state
	                };
	
	            case Constants.MERGED_APPLICATION:
	                var _payload = _slicedToArray(payload, 2);
	
	                form = _payload[0];
	                appId = _payload[1];
	
	                if (_lodash2.default.isString(appId)) {
	                    index = _lodash2.default.findIndex(list, function (form) {
	                        return _lodash2.default.get(form, 'appId') === appId;
	                    });
	
	                    if (index !== -1) {
	                        return {
	                            v: _extends({}, state, {
	                                list: [].concat(_toConsumableArray(list.slice(0, index)), [form], _toConsumableArray(list.slice(index + 1)))
	                            })
	                        };
	                    } else {
	                        return {
	                            v: _extends({}, state, {
	                                list: [].concat(_toConsumableArray(list), [form])
	                            })
	                        };
	                    }
	                }
	
	                return {
	                    v: state
	                };
	
	            case Constants.RESTORED_PREV_FORM_DATA:
	                if (isInList(currentIndex)) {
	                    form = _extends({}, currentForm, prevState);
	
	
	                    return {
	                        v: _extends({}, state, {
	                            list: [].concat(_toConsumableArray(list.slice(0, currentIndex)), [form], _toConsumableArray(list.slice(currentIndex + 1)))
	                        })
	                    };
	                }
	
	                return {
	                    v: state
	                };
	
	            case Constants.RESETED_PREV_FORM_DATA:
	                return {
	                    v: _extends({}, state, {
	                        prevState: {}
	                    })
	                };
	
	            case Constants.UPDATED_APPLICATION_GROUP:
	                return {
	                    v: _extends({}, state, {
	                        currentId: '',
	                        currentIndex: -1
	                    })
	                };
	
	            case Constants.SETED_APPLICATION_LIST_CURRENT_INDEX:
	                return {
	                    v: _extends({}, state, {
	                        currentId: _lodash2.default.get(list, [payload, 'appId']),
	                        currentIndex: payload
	                    })
	                };
	
	            case Constants.SELECTED_APPLICATION_FORM:
	                if (_lodash2.default.isInteger(payload)) {
	                    var currentId = _lodash2.default.get(list, [payload, 'appId']);
	
	                    return {
	                        v: _extends({}, state, {
	                            currentId: currentId,
	                            currentIndex: payload,
	                            prevState: {}
	                        })
	                    };
	                }
	
	                return {
	                    v: _extends({}, state, {
	                        currentId: payload,
	                        currentIndex: _lodash2.default.findIndex(list, ['appId', payload]),
	                        prevState: {}
	                    })
	                };
	
	            case Constants.INITED_APPLICATION_LIST:
	                return {
	                    v: _extends({}, state, {
	                        currentId: '',
	                        currentIndex: -1,
	                        list: _lodash2.default.isArray(payload) ? [].concat(_toConsumableArray(payload)) : []
	                    })
	                };
	
	            case Constants.CREATED_APPLICATION_FORM:
	                appId = _lodash2.default.get(payload, 'appId', '');
	                index = _lodash2.default.findIndex(list, function (form) {
	                    return _lodash2.default.get(form, 'appId') === appId;
	                });
	
	
	                if (index !== -1) {
	                    form = (0, _FormReducer2.default)(list[index], { type: type, payload: payload });
	
	
	                    return {
	                        v: _extends({}, state, {
	                            currentId: appId,
	                            currentIndex: index,
	                            prevState: {},
	                            list: [].concat(_toConsumableArray(list.slice(0, index)), [form], _toConsumableArray(list.slice(index + 1)))
	                        })
	                    };
	                }
	
	                return {
	                    v: _extends({}, state, {
	                        currentId: appId,
	                        currentIndex: list.length,
	                        prevState: {},
	                        list: list.concat(payload || form)
	                    })
	                };
	            case Constants.DELETED_APPLICATION_FORM_NO_SYNC:
	            case Constants.DELETED_APPLICATION_FORM:
	                index = payload;
	
	
	                if (_lodash2.default.isString(payload)) {
	                    index = _lodash2.default.findIndex(list, function (form) {
	                        return _lodash2.default.get(form, 'appId') === payload;
	                    });
	                }
	
	                if (isInList(index)) {
	                    return {
	                        v: _extends({}, state, {
	                            currentId: '',
	                            currentIndex: currentIndex === index ? -1 : currentIndex,
	                            list: [].concat(_toConsumableArray(list.slice(0, index)), _toConsumableArray(list.slice(index + 1)))
	                        })
	                    };
	                }
	
	                return {
	                    v: state
	                };
	
	            case Constants.APPENDED_APPLICATION_LIST:
	                form = (0, _FormReducer2.default)();
	
	
	                return {
	                    v: _extends({}, state, {
	                        list: list.concat(payload || form)
	                    })
	                };
	
	            case Constants.EDITED_APPLICATION_LIST:
	                appId = _lodash2.default.get(payload, 'appId', '');
	                index = _lodash2.default.findIndex(list, function (form) {
	                    return _lodash2.default.get(form, 'appId') === appId;
	                });
	
	
	                if (isInList(index)) {
	                    return {
	                        v: _extends({}, state, {
	                            list: [].concat(_toConsumableArray(list.slice(0, index)), [payload], _toConsumableArray(list.slice(index + 1)))
	                        })
	                    };
	                }
	
	                if (!_lodash2.default.isEmpty(payload)) {
	                    return {
	                        v: _extends({}, state, {
	                            list: list.concat(payload)
	                        })
	                    };
	                }
	
	                return {
	                    v: state
	                };
	
	            case Constants.REMOVED_APPLICATION_FORM:
	                var _payload2 = _slicedToArray(payload, 3);
	
	                name = _payload2[0];
	                path = _payload2[1];
	                appId = _payload2[2];
	
	
	                if (_lodash2.default.isString(appId)) {
	                    index = _lodash2.default.findIndex(list, function (form) {
	                        return _lodash2.default.get(form, 'appId') === appId;
	                    });
	                    form = (0, _FormReducer2.default)(list[index], { type: type, payload: payload });
	
	
	                    return {
	                        v: _extends({}, state, {
	                            list: [].concat(_toConsumableArray(list.slice(0, index)), [form], _toConsumableArray(list.slice(index + 1)))
	                        })
	                    };
	                }
	
	                if (isInList(currentIndex)) {
	                    form = (0, _FormReducer2.default)(currentForm, { type: type, payload: payload });
	                    prevForm = {
	                        appId: _lodash2.default.get(form, 'appId', ''),
	                        form: _defineProperty({}, name, _lodash2.default.get(list, [currentIndex, name]))
	                    };
	
	                    return {
	                        v: _extends({}, state, {
	                            prevForm: prevForm,
	                            list: [].concat(_toConsumableArray(list.slice(0, currentIndex)), [form], _toConsumableArray(list.slice(currentIndex + 1)))
	                        })
	                    };
	                }
	
	                return {
	                    v: state
	                };
	
	            case Constants.SETED_APPLICATION_FORM:
	                var _payload3 = _slicedToArray(payload, 2);
	
	                value = _payload3[0];
	                appId = _payload3[1];
	
	
	                if (_lodash2.default.isString(appId)) {
	                    index = _lodash2.default.findIndex(list, function (form) {
	                        return _lodash2.default.get(form, 'appId') === appId;
	                    });
	                    form = (0, _FormReducer2.default)(list[index], { type: type, payload: payload });
	
	
	                    return {
	                        v: _extends({}, state, {
	                            list: [].concat(_toConsumableArray(list.slice(0, index)), [form], _toConsumableArray(list.slice(index + 1)))
	                        })
	                    };
	                }
	
	                if (isInList(currentIndex)) {
	                    form = (0, _FormReducer2.default)(currentForm, { type: type, payload: payload });
	
	
	                    return {
	                        v: _extends({}, state, {
	                            prevState: (0, _selectors.isEffectProduct)(payload) ? _defineProperty({}, name, _lodash2.default.get(currentForm, name)) : prevState,
	                            list: [].concat(_toConsumableArray(list.slice(0, currentIndex)), [form], _toConsumableArray(list.slice(currentIndex + 1)))
	                        })
	                    };
	                }
	
	                return {
	                    v: state
	                };
	
	            case Constants.UPDATED_MULTI_APPLICATION_FORM:
	                var _payload4 = _slicedToArray(payload, 2),
	                    question = _payload4[0],
	                    appId = _payload4[1];
	
	                if (_lodash2.default.isString(appId)) {
	                    index = _lodash2.default.findIndex(list, function (form) {
	                        return _lodash2.default.get(form, 'appId') === appId;
	                    });
	                    form = _extends({}, list[index], question);
	
	                    return {
	                        v: _extends({}, state, {
	                            list: [].concat(_toConsumableArray(list.slice(0, index)), [form], _toConsumableArray(list.slice(index + 1)))
	                        })
	                    };
	                }
	                return {
	                    v: state
	                };
	
	            case Constants.UPDATED_APPLICATION_FORM_NO_SYNC:
	            case Constants.UPDATED_APPLICATION_FORM_NO_MODIFIED:
	            case Constants.UPDATED_APPLICATION_FORM:
	                var _payload5 = _slicedToArray(payload, 3);
	
	                name = _payload5[0];
	                value = _payload5[1];
	                appId = _payload5[2];
	
	                if (_lodash2.default.isString(appId)) {
	                    index = _lodash2.default.findIndex(list, function (form) {
	                        return _lodash2.default.get(form, 'appId') === appId;
	                    });
	                    form = (0, _FormReducer2.default)(list[index], { type: type, payload: payload });
	
	                    if (index !== -1) {
	                        return {
	                            v: _extends({}, state, {
	                                list: [].concat(_toConsumableArray(list.slice(0, index)), [form], _toConsumableArray(list.slice(index + 1)))
	                            })
	                        };
	                    }
	                }
	
	                if (isInList(currentIndex)) {
	                    form = (0, _FormReducer2.default)(currentForm, { type: type, payload: payload });
	
	
	                    return {
	                        v: _extends({}, state, {
	                            prevState: (0, _selectors.isEffectProduct)(payload) ? _defineProperty({}, name, _lodash2.default.get(currentForm, name)) : prevState,
	                            list: [].concat(_toConsumableArray(list.slice(0, currentIndex)), [form], _toConsumableArray(list.slice(currentIndex + 1)))
	                        })
	                    };
	                }
	
	                return {
	                    v: state
	                };
	
	            case Constants.ASSIGNED_AGENT:
	                var _payload6 = _slicedToArray(payload, 2);
	
	                appId = _payload6[0];
	                agentId = _payload6[1];
	                index = _lodash2.default.findIndex(list, function (form) {
	                    return _lodash2.default.get(form, 'appId') === appId;
	                });
	
	
	                if (isInList(index)) {
	                    form = _extends({}, list[index], {
	                        AgentOwner: agentId
	                    });
	
	
	                    return {
	                        v: _extends({}, state, {
	                            list: [].concat(_toConsumableArray(list.slice(0, index)), [form], _toConsumableArray(list.slice(index + 1)))
	                        })
	                    };
	                }
	
	                return {
	                    v: state
	                };
	            case Constants.REPLACE_ASSIGN_SERVICING_AGENT:
	                appIndex = _lodash2.default.findIndex(list, function (form) {
	                    return _lodash2.default.get(form, 'appId') === state.currentId;
	                });
	
	                var getAgentName = function getAgentName(language) {
	                    return _lodash2.default.get(payload, ['userFName', language]) + ' ' + _lodash2.default.get(payload, ['userLName', language]);
	                };
	                if (~appIndex) {
	                    // if found application
	                    return {
	                        v: (0, _fp.set)('list[' + appIndex + ']', _extends({}, _lodash2.default.get(state, 'list[' + appIndex + ']'), {
	                            AgentInfo_AgentName: {
	                                th: getAgentName('th'),
	                                en: getAgentName('en')
	                            },
	                            AgentInfo_AgentCode: _lodash2.default.get(payload, 'userCode'),
	                            AgentInfo_AgentBranch: _lodash2.default.get(payload, 'userAreaName'),
	                            AgentInfo_AgentLicenseNo: _lodash2.default.get(payload, 'licenseNumber'),
	                            AgentInfo_AgentUnitCode: _lodash2.default.get(payload, 'unitCode'),
	                            AgentInfo_AgentUnitName: _lodash2.default.get(payload, 'unitName'),
	                            AgentInfo_AgentRole: _lodash2.default.get(payload, 'role'),
	                            AgentInfo_MobileNo: _lodash2.default.get(payload, 'userTelNumber'),
	                            AgentInfo_Email: _lodash2.default.get(payload, 'userEmail'),
	                            AgentInfo_AgentOjtName: getAgentName('th'),
	                            AgentInfo_AgentOjtCode: _lodash2.default.get(payload, 'userCode'),
	                            AgentInfo_AgentOjtUnitCode: _lodash2.default.get(payload, 'unitCode'),
	                            Modified: Date.now()
	                        }))(state)
	                    };
	                }
	                return {
	                    v: state
	                };
	            case Constants.REPLACE_ASSIGN_SERVICING_OJT:
	                appIndex = _lodash2.default.findIndex(list, function (form) {
	                    return _lodash2.default.get(form, 'appId') === state.currentId;
	                });
	
	                if (~appIndex) {
	                    // if found application
	                    return {
	                        v: (0, _fp.set)('list[' + appIndex + ']', _extends({}, _lodash2.default.get(state, 'list[' + appIndex + ']'), {
	                            AgentInfo_AgentOjtCode: _lodash2.default.get(payload, 'userCode'),
	                            AgentInfo_AgentOjtUnitCode: _lodash2.default.get(payload, 'unitCode'),
	                            AgentInfo_AgentOjtName: _lodash2.default.get(payload, ['userFName', 'th']) + ' ' + _lodash2.default.get(payload, ['userLName', 'th']),
	                            Modified: Date.now()
	                        }))(state)
	                    };
	                }
	                return {
	                    v: state
	                };
	            case 'INJECT_APP':
	                return {
	                    v: _extends({}, state, {
	                        list: [].concat(_toConsumableArray(list), [payload]),
	                        currentIndex: list.length,
	                        currentId: payload.appId
	                    })
	                };
	            default:
	                return {
	                    v: state
	                };
	        }
	    }();
	
	    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(35)))

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Constants, _) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _fp = __webpack_require__(3);
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var initState = {
	    ProSelection: {},
	    ProResult: {}
	};
	
	exports.default = function () {
	    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;
	
	    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	        type = _ref.type,
	        payload = _ref.payload;
	
	    switch (type) {
	        case Constants.MERGED_APPLICATION:
	            var _payload = _slicedToArray(payload, 1),
	                form = _payload[0];
	
	            return _extends({}, state, form);
	
	        case Constants.CREATED_APPLICATION_FORM:
	            return _.defaults({}, payload, initState);
	
	        case Constants.REMOVED_APPLICATION_FORM:
	            var _payload2 = _slicedToArray(payload, 2),
	                name = _payload2[0],
	                path = _payload2[1];
	
	            state = _extends({}, state, {
	                Modified: Date.now()
	            });
	
	            if (name === 'ProSelection' && !_.isEmpty(state['ProSelection']) && !_.isEmpty(state['ProResult'])) {
	                var id = _.get(path, 1);
	                var attachProductCode = _.get(state, ['ProSelection', 'RIDERS', id, 'AttachProductCode']);
	                var dependProductCode = _.get(state, ['ProSelection', 'RIDERS', id, 'DependProductCode']);
	                var notAttachProductCode = _.get(state, ['ProSelection', 'RIDERS', id, 'NotAttachProductCode']);
	
	                var list = [];
	
	                if (!_.isEmpty(attachProductCode)) {
	                    list = list.concat(JSON.parse(attachProductCode));
	                } else if (!_.isEmpty(dependProductCode)) {
	                    list = list.concat(JSON.parse(dependProductCode));
	                } else if (!_.isEmpty(notAttachProductCode)) {
	                    list = list.concat(JSON.parse(notAttachProductCode));
	                }
	
	                state = _extends({}, state, {
	                    ProSelection: _extends({}, state['ProSelection'], {
	                        RIDERS: _.omit(state['ProSelection']['RIDERS'], list)
	                    }),
	                    ProResult: _extends({}, state['ProResult'], {
	                        RIDERS: _.omit(state['ProResult']['RIDERS'], list)
	                    })
	                });
	            }
	
	            if (name === 'ProSelection' && _.get(path, 0) === 'RIDERS') {
	                state = _extends({}, state, {
	                    ProResult: _extends({}, state['ProResult'], {
	                        RIDERS: (0, _fp.omit)(_.get(path, 1))(_.get(state['ProResult'], 'RIDERS'))
	                    })
	                });
	            }
	
	            var newState;
	
	            if (_.isArray(name)) {
	                newState = (0, _fp.omit)(name)(state);
	            } else {
	                path = _.reject(_.concat([name], path), _.isNil);
	
	                newState = (0, _fp.unset)(path)(state);
	            }
	
	            if (_.isArray(newState[name])) {
	                newState = _extends({}, newState, _defineProperty({}, name, _.reject(newState[name], _.isNil)));
	            }
	
	            return _.defaultsDeep({}, newState);
	
	        case Constants.SETED_APPLICATION_FORM:
	            var _payload3 = _slicedToArray(payload, 1),
	                value = _payload3[0];
	
	            return _.merge({}, state, value, {
	                Modified: Date.now()
	            });
	
	        case Constants.TRY_UPDATED_APPLICATION_FORM:
	        case Constants.UPDATED_APPLICATION_FORM:
	        case Constants.UPDATED_APPLICATION_FORM_NO_SYNC:
	        case Constants.UPDATED_APPLICATION_FORM_NO_MODIFIED:
	            var _payload4 = _slicedToArray(payload, 2),
	                name = _payload4[0],
	                value = _payload4[1];
	
	            state = _extends({}, state, {
	                Modified: type === Constants.UPDATED_APPLICATION_FORM_NO_MODIFIED ? state.Modified : Date.now()
	            });
	
	            if (name === 'ProResult' && !_.isEmpty(state['ProSelection'])) {
	                var getRider = function getRider(value) {
	                    return _(value).chain().get('RIDERS', {}).mapValues(function (obj) {
	                        return _.omit(obj, 'ERRORS');
	                    }).pick(_.keys(_.get(state, ['ProSelection', 'RIDERS']))).value();
	                };
	
	                state = _extends({}, state, {
	                    ProSelection: _extends({}, state['ProSelection'], {
	                        SA: _.isNil(_.get(value, 'SA')) ? _.get(state['ProSelection'], 'SA') : _.get(value, 'SA'),
	                        PREMIUM: _.isNil(_.get(value, 'PREMIUM')) ? _.get(state['ProSelection'], 'PREMIUM') : _.get(value, 'PREMIUM'),
	                        RIDERS: _.merge({}, getRider(state['ProSelection']), getRider(value))
	                    })
	                });
	            }
	
	            if (name === 'ProSelection' && _.has(value, 'PREMIUM')) {
	                state = _extends({}, state, {
	                    ProResult: _extends({}, state['ProResult'], {
	                        PREMIUM: _.isNil(_.get(value, 'PREMIUM')) ? _.get(state['ProResult'], 'PREMIUM') : _.get(value, 'PREMIUM')
	                    })
	                });
	            }
	
	            if (name === 'ProSelection' && _.has(value, 'RIDERS')) {
	                var _id = _.keys(_.get(value, 'RIDERS'))[0];
	                var rider = _.get(value, ['RIDERS', _id], {});
	                var isGetSA = _.get(rider, 'sa_type') === 'BASIC_SA_FIX' || _.get(rider, 'sa_type') === 'BASIC_SA_PRE';
	
	                if (isGetSA) {
	                    value = _extends({}, value, {
	                        RIDERS: _defineProperty({}, _id, _extends({}, rider, {
	                            SA: _.get(state, ['ProSelection', 'SA'])
	                        }))
	                    });
	                }
	
	                var _notAttachProductCode = _.get(rider, 'NotAttachProductCode');
	
	                if (!_.isEmpty(_notAttachProductCode)) {
	                    var _list = JSON.parse(_notAttachProductCode);
	
	                    state = _extends({}, state, {
	                        ProSelection: _extends({}, state['ProSelection'], {
	                            RIDERS: _.omit(_.get(state, ['ProSelection', 'RIDERS']), _list)
	                        }),
	                        ProResult: _extends({}, state['ProResult'], {
	                            RIDERS: _.omit(_.get(state, ['ProSelection', 'RIDERS']), _list)
	                        })
	                    });
	                }
	            }
	
	            if (name === 'ProSelection' && _.get(value, 'SaSelectType') === 'FIX') {
	                value = _extends({}, value, {
	                    SA: _.get(value, 'PlanSAFix')
	                });
	            }
	
	            if (name === 'ProSelection') {
	                return _extends({}, state, _defineProperty({}, name, _.merge({}, state[name], value)));
	            }
	
	            if (_.isArray(value)) {
	                return _extends({}, state, _defineProperty({}, name, _(state[name] || []).chain().concat(value).reject(_.isNil).value()));
	            }
	
	            return (0, _fp.set)(name, value)(state);
	
	        default:
	            return state;
	    }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(35), __webpack_require__(1)))

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_, Constants) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _MAPPING_TYPE;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _fp = __webpack_require__(3);
	
	var _fp2 = _interopRequireDefault(_fp);
	
	var _moment = __webpack_require__(27);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _selectors = __webpack_require__(34);
	
	var _template = __webpack_require__(50);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var getRequiredQuestion = function getRequiredQuestion(formType) {
	    var questionList = _(_template.DesktopSlides).chain().get(formType).map('questions').flatten().value();
	
	    return _(_template.Template).pick(questionList).pickBy(['required', true]).value();
	};
	
	var MAPPING_INSURED = {
	    DPR: function DPR(form) {
	        var familyCode = ['A0', 'A2', 'A3', 'A6', 'A8'];
	        var relationCode = ['B0', 'B2', 'B4'];
	        var beneficiaries = _.get(form, 'Beneficiaries', []);
	        var beneficiariesId = _.map(beneficiaries, 'RelationId');
	
	        if (_.every(beneficiariesId, function (item) {
	            return _.includes(familyCode, item);
	        })) {
	            return true;
	        }
	
	        if (_.every(beneficiariesId, function (item) {
	            return _.includes([].concat(relationCode, familyCode), item);
	        })) {
	            var _ret = function () {
	                var insuredLastName = _.get(form, 'Insured_ThName_Last');
	                var beneficiariesLastName = _.chain(beneficiaries).filter(function (beneficiry) {
	                    return _.includes(relationCode, beneficiry.RelationId);
	                }).map('LastName').value();
	                return {
	                    v: _.every(beneficiariesLastName, function (lastname) {
	                        return _.isEqual(lastname, insuredLastName);
	                    })
	                };
	            }();
	
	            if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	        }
	
	        return false;
	    },
	    FAT: function FAT(form) {
	        var formType = _.get(form, 'formType', Constants.FORM_TYPE_COMMON);
	        if (_.isEqual(formType, Constants.FORM_TYPE_COMMON)) {
	            return _fp2.default.flow(_fp2.default.get(['Fatca_Q1', 'value']), _fp2.default.isEqual('N'))(form);
	        }
	        return true;
	    },
	    ANC: function ANC(form) {
	        var key = (0, _selectors.isAdult)(form) ? 'Insured' : 'Payer';
	        return _.chain(form).get(key + '_Symptoms_Female', []).find({ value: 's27' }).isNil().value();
	    },
	    IDS: function IDS(form) {
	        var age = _.get(form, 'Insured_RoundedAge');
	        var submitted = _.get(form, 'Submitted');
	        var idExpire = _.get(form, ['Insured_IdExpiryDate', 'value']);
	        if (!_.isNil(submitted)) {
	            var diff = (0, _moment2.default)(submitted).diff((0, _moment2.default)(idExpire), 'days');
	            return diff < 0;
	        }
	    },
	    PRE: function PRE(form) {
	        var totalPaid = _.chain(form).get('Payment_Tr').map('Items').flatten().map('Amount').sum().value() || 0;
	
	        return totalPaid !== 0;
	    },
	    PAD: function PAD(form) {
	        var id = [0, 1, 2, 4];
	        var key = ['INSURED_ID_', 'PAYER_ID_'];
	        var expectDoc = _.chain(key).map(function (k) {
	            return _.map(id, function (i) {
	                return '' + k + i;
	            });
	        }).flatten().value();
	        var formType = _.get(form, 'formType');
	        var appId = _.get(form, 'appId');
	        if (_.isEqual(formType, 'pa')) {
	            var result = _.chain(form).get('doc').filter(function (doc) {
	                return _.includes(doc.appList, appId);
	            }).filter(function (_ref) {
	                var docId = _ref.docId;
	                return !_.endsWith(docId, '_SIGN');
	            }).filter(function (_ref2) {
	                var docId = _ref2.docId;
	                return docId !== 'TEMP_RECEIPT';
	            }).every(function (_ref3) {
	                var docId = _ref3.docId;
	                return _.includes(expectDoc, docId);
	            }).value();
	            return result;
	        }
	    },
	    HRP: function HRP(form) {
	        var age = _.get(form, 'Insured_RoundedAge');
	        return age > 0;
	    },
	    ADP: function ADP(form) {
	        var totalPremium = _.get(form, ['ProResult', 'TotalPremium']);
	        var totalPaid = _.chain(form).get('Payment_Tr').map('Items').flatten().map('Amount').sum().value() || 0;
	        var paidPercentage = totalPaid / totalPremium * 100;
	        if (totalPaid === 0) {
	            return true;
	        }
	        return paidPercentage >= 90;
	    },
	    C19: function C19(form) {
	        return _.isEmpty(_.get(form, 'Insured_MoreDetails'));
	    }
	};
	var MAPPING_PAYER = {
	    IDP: function IDP(form) {
	        var appPayerRelationId = _.get(form, ['AppPayer_RelationToInsured', 'value'], '00');
	        var payerRelationId = _.get(form, ['Payer_RelationToInsured', 'value'], '00');
	        var age = _.get(form, 'Insured_RoundedAge', 0);
	        var docs = _.get(form, 'doc', []);
	        var appId = _.get(form, 'appId');
	        var formType = _.get(form, 'formType');
	        var isAdult = formType === 'common' ? age > 15 : age > 19;
	        var submitted = _.get(form, 'Submitted');
	        var idExpire = _.get(form, ['Payer_IdExpiryDate', 'value']);
	
	        var expectDocumentId = ['PAYER_ID_MEMO_0', 'PAYER_ID_MEMO_1', 'PAYER_ID_MEMO_2', 'PAYER_ID_0', 'PAYER_ID_1',, 'PAYER_ID_2'];
	        var getPayerDoucumnetSize = function getPayerDoucumnetSize(docs, appId) {
	            return _.chain(docs).filter(function (doc) {
	                return _.includes(doc.appList, appId);
	            }).some(function (doc) {
	                return _.includes(expectDocumentId, doc.docId);
	            }).value();
	        };
	
	        if (submitted) {
	            var hasPayerDocument = getPayerDoucumnetSize(docs, appId);
	            if (isAdult) {
	                if (appPayerRelationId !== '00') {
	                    return hasPayerDocument;
	                }
	            } else {
	                var diff = (0, _moment2.default)(submitted).unix() > (0, _moment2.default)(idExpire, 'YYYY-MM-DD').unix();
	                if (diff) {
	                    return false;
	                }
	                return hasPayerDocument;
	            }
	        }
	    },
	    PAY: function PAY(form) {
	        var age = _.get(form, 'Insured_RoundedAge', 0);
	        var formType = _.get(form, 'formType');
	        var isCommon = formType === 'common';
	        var key = isCommon ? 'AppPayer_RelationToInsured' : 'Payer_RelationToInsured';
	        var relationId = _.get(form, [key, 'value'], '00');
	        var isJuvenile = isCommon ? age < 16 : age < 20;
	
	        if (isJuvenile) {
	            return _.includes(['A6', 'A8'], relationId);
	        }
	        if (isCommon) {
	            return _.isEqual('00', relationId);
	        }
	    },
	    FMS: function FMS(form) {
	        var RelationId = _.get(form, 'Contract_ConsentRelationId', '');
	        var isParent = _.includes(['A6', 'A8'], RelationId);
	
	        if ((0, _selectors.isAdult)(form)) {
	            return true;
	        }
	
	        return isParent;
	    }
	};
	
	var MAPPING_TYPE = (_MAPPING_TYPE = {}, _defineProperty(_MAPPING_TYPE, Constants.FORM_TYPE_COMMON + '_adult', ['IDS', 'IDP', 'PAY', 'DPR', 'ANC', 'FAT', 'PRE', 'ADP', 'C19']), _defineProperty(_MAPPING_TYPE, Constants.FORM_TYPE_COMMON + '_child', ['IDP', 'PAY', 'DPR', 'ANC', 'FAT', 'PRE', 'ADP', 'HRP', 'FMS']), _defineProperty(_MAPPING_TYPE, Constants.FORM_TYPE_PA, ['PAY', 'DPR', 'PRE', 'ADP', 'PAD', 'FMS']), _MAPPING_TYPE);
	
	exports.default = function () {
	    var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	    var formType = _.get(form, 'formType', Constants.FORM_TYPE_COMMON);
	    var isValid = _.every(getRequiredQuestion(formType), function (question, id) {
	        return !_.isNil(form[id]);
	    });
	    var validate = function validate(condition) {
	        return function (mapping) {
	            if (condition && !condition(form, state)) {
	                return [];
	            }
	
	            return _(mapping).mapValues(function (fn, key) {
	                return fn(form, state);
	            }).pickBy(function (isValid, key) {
	                return isValid === false;
	            }).keys().value();
	        };
	    };
	
	    var getMemo = function getMemo(mapping, keys, condition) {
	        return _(mapping).thru(validate(condition)).intersection(keys).map(function (code) {
	            return {
	                Code: code
	            };
	        }).value();
	    };
	
	    var keys = MAPPING_TYPE[formType];
	    if (formType === Constants.FORM_TYPE_COMMON) {
	        var suffix = (0, _selectors.isAdult)(form) ? '_adult' : '_child';
	        keys = MAPPING_TYPE[formType + suffix];
	    }
	
	    return {
	        PreUw_Insured_Memo: getMemo(MAPPING_INSURED, keys),
	        PreUw_Payer_Memo: getMemo(MAPPING_PAYER, keys)
	    };
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(35)))

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.DesktopSlides = exports.TabletSlides = exports.Template = undefined;
	
	var _template = __webpack_require__(51);
	
	var _template2 = _interopRequireDefault(_template);
	
	var _slidesTablet = __webpack_require__(52);
	
	var _slidesTablet2 = _interopRequireDefault(_slidesTablet);
	
	var _slidesDesktop = __webpack_require__(53);
	
	var _slidesDesktop2 = _interopRequireDefault(_slidesDesktop);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.Template = _template2.default;
	exports.TabletSlides = _slidesTablet2.default;
	exports.DesktopSlides = _slidesDesktop2.default;

/***/ },
/* 51 */
/***/ function(module, exports) {

	'use strict';
	
	var _question;
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	module.exports = {
	    sections: [{
	        id: 'InsuredInfo',
	        label: 'InsuredInfo'
	    }, {
	        id: 'PayerInfo',
	        label: 'InsuredInfo_Payer',
	        condition: 'isNotAdult'
	    }, {
	        id: 'ProductInfo',
	        label: 'InsuredInfo_Product'
	    }, {
	        id: 'InsuredHealthInfo',
	        label: 'InsuredInfo_HealthQuest'
	    }, {
	        id: 'PayerHealthInfo',
	        label: 'PayerInfo_HealthQuest',
	        condition: 'isNotAdult'
	    }, {
	        id: 'InsuredHealthHistoryInfo',
	        label: 'InsuredInfo_HealtHistory',
	        condition: 'isAdult'
	    }, {
	        id: 'PayerHealthHistoryInfo',
	        label: 'Payer_HealthHistory',
	        condition: 'isNotAdult'
	    }, {
	        id: 'FATCA',
	        label: 'InsuredInfo_Fatca'
	    }, {
	        id: 'PaymentInfo',
	        label: 'InsuredInfo_Payer'
	    }, {
	        id: 'HealthQuestionnaire',
	        label: 'Question_Health'
	    }, {
	        id: 'Diabetes',
	        label: 'Diabetes',
	        condition: ['isAdult', 'isDiabetes']
	    }, {
	        id: 'Hbp',
	        label: 'Hbp',
	        condition: ['isAdult', 'isHbp']
	    }, {
	        id: 'Hepatitis',
	        label: 'Hepatitis',
	        condition: ['isAdult', 'isHepatitis']
	    }, {
	        id: 'Tumor',
	        label: 'Tumor',
	        condition: ['isAdult', 'isTumor']
	    }],
	    question: (_question = {
	        Insured_Occupation: {
	            condition: 'isAdultCommonAndPA',
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_IdType: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_IdNo: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_LaserCode: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_IdExpiryDate: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_ThName_Title: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_ThName_First: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_ThName_Last: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_FormerName_First: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo'
	        },
	        Insured_FormerName_Last: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo'
	        },
	        Insured_BirthDate: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_RoundedAge: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_Nationality: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_Race: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_MaritalStatus: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_SpouseName_Title: {
	            condition: ['isAdult', 'Insured_MaritalStatus'],
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_SpouseName_First: {
	            condition: ['isAdult', 'Insured_MaritalStatus'],
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_SpouseName_Last: {
	            condition: ['isAdult', 'Insured_MaritalStatus'],
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_IsStudent: {
	            condition: 'isNotAdult',
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_StudyYear: {
	            condition: ['isNotAdult', 'Insured_IsStudent'],
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_SchoolName: {
	            condition: ['isNotAdult', 'Insured_IsStudent'],
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_FatherName_Title: {
	            condition: 'isNotAdult',
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_FatherName_First: {
	            condition: 'isNotAdult',
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_FatherName_Last: {
	            condition: 'isNotAdult',
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_IsFatherAlive: {
	            condition: 'isNotAdult',
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_MotherName_Title: {
	            condition: 'isNotAdult',
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_MotherName_First: {
	            condition: 'isNotAdult',
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_MotherName_Last: {
	            condition: 'isNotAdult',
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_IsMotherAlive: {
	            condition: 'isNotAdult',
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_CurrentAddress_CopyFromId: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_CurrentAddress_Province: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_CurrentAddress_District: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_CurrentAddress_SubDistrict: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_CurrentAddress_HouseNo: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_CurrentAddress_Mooban: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_CurrentAddress_Arkan: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_CurrentAddress_Moo: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_CurrentAddress_Soi: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_CurrentAddress_Street: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_CurrentAddress_Postal: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_CurrentAddress_TelNo: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_MobileNo: {
	            sectionId: 'InsuredInfo',
	            required: 'isAdult'
	        },
	        Insured_Email: {
	            sectionId: 'InsuredInfo',
	            required: ['Insured_IsPreferEPolicy', 'isAdult']
	        },
	        Insured_RegAddress_CopyFromId: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_RegAddress_Province: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_RegAddress_District: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_RegAddress_SubDistrict: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_RegAddress_HouseNo: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_RegAddress_Mooban: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_RegAddress_Arkan: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_RegAddress_Moo: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_RegAddress_Soi: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_RegAddress_Street: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_RegAddress_Postal: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_RegAddress_TelNo: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_BusinessAddress_CopyFromId: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo'
	        },
	        Insured_BusinessAddress_Province: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_BusinessAddress_District: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_BusinessAddress_SubDistrict: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_BusinessAddress_Name: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo'
	        },
	        Insured_BusinessAddress_HouseNo: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo'
	        },
	        Insured_BusinessAddress_Mooban: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo'
	        },
	        Insured_BusinessAddress_Arkan: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo'
	        },
	        Insured_BusinessAddress_Moo: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo'
	        },
	        Insured_BusinessAddress_Soi: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo'
	        },
	        Insured_BusinessAddress_Street: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo'
	        },
	        Insured_BusinessAddress_Postal: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_BusinessAddress_TelNo: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo'
	        },
	        Insured_ContactAddressId: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_ContactAddress_Province: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_ContactAddress_District: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_ContactAddress_SubDistrict: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_ContactAddress_HouseNo: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_ContactAddress_Moobann: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_ContactAddress_Arkan: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_ContactAddress_Moo: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_ContactAddress_Soi: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_ContactAddress_Street: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_ContactAddress_Postal: {
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_ContactAddress_TelNo: {
	            sectionId: 'InsuredInfo'
	        },
	        Insured_Occupation1_Occupation: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo',
	            required: true
	        },
	        Insured_Occupation1_Position: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo'
	        },
	        Insured_Occupation1_Responsibility: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo'
	        },
	        Insured_Occupation1_TypeOfBusiness: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo'
	        },
	        Insured_Occupation1_Income: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo',
	            required: 'isAdult'
	        },
	        Insured_Occupation1_WorkPlace: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo'
	        },
	        Insured_HasAnotherOccupation: {
	            condition: 'isAdult',
	            sectionId: 'InsuredInfo'
	        },
	        Insured_Occupation2_Occupation: {
	            condition: ['isAdult', 'Insured_HasAnotherOccupation'],
	            sectionId: 'InsuredInfo'
	        },
	        Insured_Occupation2_Position: {
	            condition: ['isAdult', 'Insured_HasAnotherOccupation'],
	            sectionId: 'InsuredInfo'
	        },
	        Insured_Occupation2_Responsibility: {
	            condition: ['isAdult', 'Insured_HasAnotherOccupation'],
	            sectionId: 'InsuredInfo'
	        }
	    }, _defineProperty(_question, 'Insured_Occupation2_Responsibility', {
	        condition: ['isAdult', 'Insured_HasAnotherOccupation'],
	        sectionId: 'InsuredInfo'
	    }), _defineProperty(_question, 'Insured_Occupation2_TypeOfBusiness', {
	        condition: ['isAdult', 'Insured_HasAnotherOccupation'],
	        sectionId: 'InsuredInfo'
	    }), _defineProperty(_question, 'Insured_Occupation2_Income', {
	        condition: ['isAdult', 'Insured_HasAnotherOccupation'],
	        sectionId: 'InsuredInfo'
	    }), _defineProperty(_question, 'Insured_Occupation2_WorkPlace', {
	        condition: ['isAdult', 'Insured_HasAnotherOccupation'],
	        sectionId: 'InsuredInfo'
	    }), _defineProperty(_question, 'Insured_MotorcycleFlag', {
	        condition: 'isAdult',
	        sectionId: 'InsuredInfo',
	        required: true
	    }), _defineProperty(_question, 'Dividend_PaymentOption', {
	        sectionId: 'ProductInfo',
	        condition: 'Basic_HasDividend',
	        required: true
	    }), _defineProperty(_question, 'Payer_RelationToInsured', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_RelationOtherToInsured', {
	        condition: 'Payer_RelationToInsured',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_IdType', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_IdNo', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_LaserCode', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_IdExpiryDate', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_ThName_Title', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_ThName_First', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_ThName_Last', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_FormerName_First', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_FormerName_Last', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_BirthDate', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_Nationality', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_Race', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_MaritalStatus', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_SpouseName_Title', {
	        condition: 'Payer_MaritalStatus',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_SpouseName_First', {
	        condition: 'Payer_MaritalStatus',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_SpouseName_Last', {
	        condition: 'Payer_MaritalStatus',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_CurrentAddress_CopyFromId', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_CurrentAddress_Province', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_CurrentAddress_District', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_CurrentAddress_SubDistrict', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_CurrentAddress_HouseNo', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_CurrentAddress_Mooban', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_CurrentAddress_Arkan', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_CurrentAddress_Moo', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_CurrentAddress_Soi', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_CurrentAddress_Street', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_CurrentAddress_Postal', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_CurrentAddress_TelNo', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_MobileNo', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_Email', {
	        condition: 'isChildrenPA',
	        sectionId: 'PayerInfo',
	        required: ['Insured_IsPreferEPolicy', 'isChildrenPA']
	    }), _defineProperty(_question, 'Payer_RegAddress_CopyFromId', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_RegAddress_Province', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_RegAddress_District', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_RegAddress_SubDistrict', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_RegAddress_HouseNo', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_RegAddress_Mooban', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_RegAddress_Arkan', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_RegAddress_Moo', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_RegAddress_Soi', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_RegAddress_Street', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_RegAddress_Postal', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_RegAddress_TelNo', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_BusinessAddress_CopyFromId', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_BusinessAddress_Province', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_BusinessAddress_District', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_BusinessAddress_SubDistrict', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_BusinessAddress_Name', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_BusinessAddress_HouseNo', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_BusinessAddress_Mooban', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_BusinessAddress_Arkan', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_BusinessAddress_Moo', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_BusinessAddress_Soi', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_BusinessAddress_Street', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_BusinessAddress_Postal', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_BusinessAddress_TelNo', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_ContactAddressId', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_Occupation1_Occupation', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_Occupation1_Position', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_Occupation1_Responsibility', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_Occupation1_TypeOfBusiness', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_Occupation1_Income', {
	        condition: 'isNotAdult',
	        sectionId: 'PayerInfo',
	        required: true
	    }), _defineProperty(_question, 'Payer_HasAnotherOccupation', {
	        condition: ['isNotAdult'],
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_Occupation2_Occupation', {
	        condition: ['Payer_HasAnotherOccupation'],
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_Occupation2_Position', {
	        condition: ['Payer_HasAnotherOccupation'],
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_Occupation2_Responsibility', {
	        condition: ['Payer_HasAnotherOccupation'],
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_Occupation2_TypeOfBusiness', {
	        condition: ['Payer_HasAnotherOccupation'],
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'Payer_Occupation2_Income', {
	        condition: ['Payer_HasAnotherOccupation'],
	        sectionId: 'PayerInfo'
	    }), _defineProperty(_question, 'ProResult', {
	        sectionId: 'ProductInfo',
	        required: true
	    }), _defineProperty(_question, 'Dividend_PaymentOption', {
	        sectionId: 'ProductInfo',
	        condition: 'Basic_HasDividend',
	        required: true
	    }), _defineProperty(_question, 'Dividend_BankAccountHolderName', {
	        sectionId: 'ProductInfo',
	        condition: ['Dividend_PaymentOption', 'Basic_HasDividend']
	    }), _defineProperty(_question, 'Dividend_Bank', {
	        sectionId: 'ProductInfo',
	        condition: ['Dividend_PaymentOption', 'Basic_HasDividend']
	    }), _defineProperty(_question, 'Dividend_BankAccountNo', {
	        sectionId: 'ProductInfo',
	        condition: ['Dividend_PaymentOption', 'Basic_HasDividend']
	    }), _defineProperty(_question, 'Dividend_BankBranch', {
	        sectionId: 'ProductInfo',
	        condition: ['Dividend_PaymentOption', 'Basic_HasDividend']
	    }), _defineProperty(_question, 'Beneficiaries[i]', {
	        sectionId: 'ProductInfo',
	        required: true
	    }), _defineProperty(_question, 'Insured_HasDiagnosis_CutOut', {
	        sectionId: 'InsuredHealthInfo',
	        condition: 'isNotAdult',
	        required: true
	    }), _defineProperty(_question, 'Insured_Diagnosises_CutOut[i]', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isNotAdult', 'Insured_HasDiagnosis_CutOut'],
	        required: true
	    }), _defineProperty(_question, 'Insured_HasTreatment_CutOut', {
	        sectionId: 'InsuredHealthInfo',
	        condition: 'isNotAdult',
	        required: true
	    }), _defineProperty(_question, 'Insured_Treatments_CutOut[i]', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isNotAdult', 'Insured_HasTreatment_CutOut']
	    }), _defineProperty(_question, 'Insured_HasExistingPolicies', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdultCommonAndPA', 'isSIOProduct'],
	        required: true
	    }), _defineProperty(_question, 'Insured_ExistingPolicies[i]', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdultCommonAndPA', 'isSIOProduct', 'Insured_HasExistingPolicies']
	    }), _defineProperty(_question, 'Insured_HasBeenRejected', {
	        sectionId: 'InsuredHealthInfo',
	        required: true
	    }), _defineProperty(_question, 'Insured_Rejecteds[i]', {
	        sectionId: 'InsuredHealthInfo',
	        condition: 'Insured_HasBeenRejected'
	    }), _defineProperty(_question, 'Insured_InvolvedInNarcotics', {
	        condition: ['isAdultCommonAndPA', 'isSIOProduct'],
	        sectionId: 'InsuredHealthInfo',
	        required: true
	    }), _defineProperty(_question, 'Insured_DrugFlag', {
	        condition: ['isAdultCommonAndPA', 'isSIOProduct'],
	        sectionId: 'InsuredHealthInfo',
	        required: true
	    }), _defineProperty(_question, 'Insured_DrugType', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdultCommonAndPA', 'isSIOProduct', 'Insured_DrugFlag']
	    }), _defineProperty(_question, 'Insured_DrugQuantity', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdultCommonAndPA', 'isSIOProduct', 'Insured_DrugFlag']
	    }), _defineProperty(_question, 'Insured_DrugFrequency', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdultCommonAndPA', 'isSIOProduct', 'Insured_DrugFlag']
	    }), _defineProperty(_question, 'Insured_DrugPeriod', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdultCommonAndPA', 'isSIOProduct', 'Insured_DrugFlag']
	    }), _defineProperty(_question, 'Insured_DrugWithdrawn', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdultCommonAndPA', 'isSIOProduct', 'Insured_DrugFlag']
	    }), _defineProperty(_question, 'Insured_DrugWhen', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdultCommonAndPA', 'isSIOProduct', 'Insured_DrugFlag', 'Insured_DrugWithdrawn']
	    }), _defineProperty(_question, 'Insured_AlcoholFlag', {
	        condition: ['isAdult', 'isSIOProduct'],
	        sectionId: 'InsuredHealthInfo',
	        required: true
	    }), _defineProperty(_question, 'Insured_AlcoholType', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdult', 'isSIOProduct', 'Insured_AlcoholFlag'],
	        required: true
	    }), _defineProperty(_question, 'Insured_AlcoholQuantityUnit', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdult', 'isSIOProduct', 'Insured_AlcoholFlag'],
	        required: true
	    }), _defineProperty(_question, 'Insured_AlcoholQuantity', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdult', 'isSIOProduct', 'Insured_AlcoholFlag'],
	        required: true
	    }), _defineProperty(_question, 'Insured_AlcoholFrequency', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdult', 'isSIOProduct', 'Insured_AlcoholFlag'],
	        required: true
	    }), _defineProperty(_question, 'Insured_AlcoholPeriod', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdult', 'isSIOProduct', 'Insured_AlcoholFlag'],
	        required: true
	    }), _defineProperty(_question, 'Insured_AlcoholWithdrawn', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdult', 'isSIOProduct', 'Insured_AlcoholFlag'],
	        required: true
	    }), _defineProperty(_question, 'Insured_AlcoholWhenOption', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdult', 'isSIOProduct', 'Insured_AlcoholWithdrawn', 'Insured_AlcoholFlag'],
	        required: true
	    }), _defineProperty(_question, 'Insured_SmokeFlag', {
	        condition: ['isAdult', 'isSIOProduct'],
	        sectionId: 'InsuredHealthInfo',
	        required: true
	    }), _defineProperty(_question, 'Insured_SmokeQuantity', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdult', 'isSIOProduct', 'Insured_SmokeFlag'],
	        required: true
	    }), _defineProperty(_question, 'Insured_SmokeFrequency', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdult', 'isSIOProduct', 'Insured_SmokeFlag'],
	        required: true
	    }), _defineProperty(_question, 'Insured_SmokePeriod', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdult', 'isSIOProduct', 'Insured_SmokeFlag'],
	        required: true
	    }), _defineProperty(_question, 'Insured_SmokeWithdrawn', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdult', 'isSIOProduct', 'Insured_SmokeFlag'],
	        required: true
	    }), _defineProperty(_question, 'Insured_SmokeWithdrawnWhenOption', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdult', 'isSIOProduct', 'Insured_SmokeWithdrawn', 'Insured_SmokeFlag'],
	        required: true
	    }), _defineProperty(_question, 'Insured_Weight', {
	        sectionId: 'InsuredHealthInfo',
	        required: true
	    }), _defineProperty(_question, 'Insured_Height', {
	        sectionId: 'InsuredHealthInfo',
	        required: true
	    }), _defineProperty(_question, 'Insured_HasWeightChange', {
	        sectionId: 'InsuredHealthInfo',
	        required: true
	    }), _defineProperty(_question, 'Insured_WeightChangeType', {
	        sectionId: 'InsuredHealthInfo',
	        condition: 'Insured_HasWeightChange',
	        required: true
	    }), _defineProperty(_question, 'Insured_WeightChangeQuantity', {
	        sectionId: 'InsuredHealthInfo',
	        condition: 'Insured_HasWeightChange',
	        required: true
	    }), _defineProperty(_question, 'Insured_WeightChangeReason', {
	        sectionId: 'InsuredHealthInfo',
	        condition: 'Insured_HasWeightChange',
	        required: true
	    }), _defineProperty(_question, 'Insured_WeightChangeOtherReason', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['Insured_HasWeightChange', 'Insured_WeightChangeReason'],
	        required: true
	    }), _defineProperty(_question, 'Insured_HealthyFlag', {
	        condition: 'isChildrenCommonAndPA',
	        sectionId: 'InsuredHealthInfo',
	        required: true
	    }), _defineProperty(_question, 'Insured_HealthyDetail', {
	        condition: ['Insured_HealthyFlag', 'isChildrenCommonAndPA'],
	        sectionId: 'InsuredHealthInfo',
	        required: true
	    }), _defineProperty(_question, 'Insured_HasDiagnosis', {
	        sectionId: 'InsuredHealthHistoryInfo',
	        condition: 'isAdult'
	        // required: true
	    }), _defineProperty(_question, 'Insured_Diagnosises[i]', {
	        sectionId: 'InsuredHealthHistoryInfo',
	        condition: 'Insured_HasDiagnosis'
	    }), _defineProperty(_question, 'Insured_HasPastIllness', {
	        sectionId: 'InsuredHealthHistoryInfo',
	        condition: ['isAdult', 'isSIOProduct']
	        // required: true
	    }), _defineProperty(_question, 'Insured_PastIllness_When', {
	        sectionId: 'InsuredHealthHistoryInfo',
	        condition: ['isAdult', 'isSIOProduct']
	        // required: true
	    }), _defineProperty(_question, 'Insured_PastIllness_Treatment', {
	        sectionId: 'InsuredHealthHistoryInfo',
	        condition: ['isAdult', 'isSIOProduct']
	        // required: true
	    }), _defineProperty(_question, 'Insured_PastIllness_Place', {
	        sectionId: 'InsuredHealthHistoryInfo',
	        condition: ['isAdult', 'isSIOProduct']
	        // required: true
	    }), _defineProperty(_question, 'Insured_HasSymptom_Main', {
	        sectionId: 'InsuredHealthHistoryInfo',
	        condition: ['isAdult', 'isSIOProduct']
	        // required: true
	    }), _defineProperty(_question, 'Insured_HasSymptom_PastSixMonth', {
	        sectionId: 'InsuredHealthHistoryInfo',
	        condition: ['isAdult', 'isSIOProduct'],
	        required: false
	    }), _defineProperty(_question, 'Insured_HasSymptom_Female', {
	        sectionId: 'InsuredHealthHistoryInfo',
	        condition: ['isAdult', 'isSIOProduct', 'isFemale']
	        // required: true
	    }), _defineProperty(_question, 'Insured_Symptoms_Female', {
	        sectionId: 'InsuredHealthHistoryInfo',
	        condition: ['isAdult', 'isFemale']
	    }), _defineProperty(_question, 'Insured_HasTreatment', {
	        sectionId: 'InsuredHealthHistoryInfo',
	        condition: 'isAdult'
	        // required: true
	    }), _defineProperty(_question, 'Insured_Treatments[i]', {
	        sectionId: 'InsuredHealthHistoryInfo',
	        condition: 'Insured_HasTreatment'
	        // required: true
	    }), _defineProperty(_question, 'Insured_HasCiPastIllness', {
	        sectionId: 'InsuredHealthHistoryInfo',
	        condition: ['isAdult', 'isSIOProduct'],
	        required: 'isCiPastIllness'
	    }), _defineProperty(_question, 'Insured_CiPastIllness_When', {
	        sectionId: 'InsuredHealthHistoryInfo',
	        condition: ['isAdult', 'isSIOProduct'],
	        required: 'isCiPastIllness'
	    }), _defineProperty(_question, 'Insured_CiPastIllness_Treatment', {
	        sectionId: 'InsuredHealthHistoryInfo',
	        condition: ['isAdult', 'isSIOProduct'],
	        required: 'isCiPastIllness'
	    }), _defineProperty(_question, 'Insured_CiPastIllness_Place', {
	        sectionId: 'InsuredHealthHistoryInfo',
	        condition: ['isAdult', 'isSIOProduct'],
	        required: 'isCiPastIllness'
	    }), _defineProperty(_question, 'Insured_HasFamilyHistory', {
	        condition: 'isSIOProduct',
	        sectionId: 'InsuredHealthInfo',
	        required: true
	    }), _defineProperty(_question, 'Insured_FamilyHistories[i]', {
	        sectionId: 'InsuredHealthInfo',
	        condition: 'hasFamilyHistory'
	    }), _defineProperty(_question, 'Insured_HasSpouseLiverHiv', {
	        condition: ['isAdult', 'isSIOProduct'],
	        sectionId: 'InsuredHealthInfo',
	        required: true
	    }), _defineProperty(_question, 'Insured_HasSpouseHiv', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdult', 'Insured_HasSpouseLiverHiv'],
	        required: true
	    }), _defineProperty(_question, 'Insured_HasSpouseLiver', {
	        sectionId: 'InsuredHealthInfo',
	        condition: ['isAdult', 'Insured_HasSpouseLiverHiv'],
	        required: true
	    }), _defineProperty(_question, 'Payer_HasBeenRejected', {
	        sectionId: 'PayerHealthInfo',
	        condition: 'isSIOProduct',
	        required: true
	    }), _defineProperty(_question, 'Payer_Rejecteds[i]', {
	        sectionId: 'PayerHealthInfo',
	        condition: ['Payer_HasBeenRejected', 'isSIOProduct']
	    }), _defineProperty(_question, 'Payer_InvolvedInNarcotics', {
	        sectionId: 'PayerHealthInfo',
	        condition: 'isSIOProduct',
	        required: true
	    }), _defineProperty(_question, 'Payer_DrugFlag', {
	        sectionId: 'PayerHealthInfo',
	        condition: 'isSIOProduct',
	        required: true
	    }), _defineProperty(_question, 'Payer_DrugType', {
	        sectionId: 'PayerHealthInfo',
	        condition: ['isSIOProduct', 'Payer_DrugFlag']
	    }), _defineProperty(_question, 'Payer_DrugQuantity', {
	        sectionId: 'PayerHealthInfo',
	        condition: ['isSIOProduct', 'Payer_DrugFlag']
	    }), _defineProperty(_question, 'Payer_DrugFrequency', {
	        sectionId: 'PayerHealthInfo',
	        condition: ['isSIOProduct', 'Payer_DrugFlag']
	    }), _defineProperty(_question, 'Payer_DrugPeriod', {
	        sectionId: 'PayerHealthInfo',
	        condition: ['isSIOProduct', 'Payer_DrugFlag']
	    }), _defineProperty(_question, 'Payer_DrugWithdrawn', {
	        sectionId: 'PayerHealthInfo',
	        condition: ['isSIOProduct', 'Payer_DrugFlag']
	    }), _defineProperty(_question, 'Payer_DrugWhen', {
	        sectionId: 'PayerHealthInfo',
	        condition: ['Payer_DrugWithdrawn', 'Payer_DrugFlag', 'isSIOProduct']
	    }), _defineProperty(_question, 'Payer_Weight', {
	        sectionId: 'PayerHealthInfo',
	        condition: 'isSIOProduct',
	        required: true
	    }), _defineProperty(_question, 'Payer_Height', {
	        sectionId: 'PayerHealthInfo',
	        condition: 'isSIOProduct',
	        required: true
	    }), _defineProperty(_question, 'Payer_HasWeightChange', {
	        sectionId: 'PayerHealthInfo',
	        condition: 'isSIOProduct',
	        required: true
	    }), _defineProperty(_question, 'Payer_WeightChangeType', {
	        sectionId: 'PayerHealthInfo',
	        condition: 'Payer_HasWeightChange',
	        required: true
	    }), _defineProperty(_question, 'Payer_WeightChangeQuantity', {
	        sectionId: 'PayerHealthInfo',
	        condition: 'Payer_HasWeightChange',
	        required: true
	    }), _defineProperty(_question, 'Payer_WeightChangeReason', {
	        sectionId: 'PayerHealthInfo',
	        condition: 'Payer_HasWeightChange',
	        required: true
	    }), _defineProperty(_question, 'Payer_WeightChangeOtherReason', {
	        sectionId: 'PayerHealthInfo',
	        condition: ['Payer_HasWeightChange', 'Payer_WeightChangeReason'],
	        required: true
	    }), _defineProperty(_question, 'Payer_HasPastIllness', {
	        sectionId: 'PayerHealthHistoryInfo',
	        condition: 'isSIOProduct',
	        required: 'isPayerPastIllness'
	    }), _defineProperty(_question, 'Payer_HasSymptom_Main', {
	        sectionId: 'PayerHealthHistoryInfo',
	        condition: 'isSIOProduct',
	        required: 'isPayerPastIllness'
	    }), _defineProperty(_question, 'Payer_HasSymptom_PastSixMonth', {
	        sectionId: 'PayerHealthHistoryInfo',
	        condition: 'isSIOProduct',
	        required: 'isPayerPastIllness'
	    }), _defineProperty(_question, 'Payer_HasSymptom_Female', {
	        sectionId: 'PayerHealthHistoryInfo',
	        condition: ['isSIOProduct', 'isPayerFemale'],
	        required: 'isPayerPastIllness'
	    }), _defineProperty(_question, 'Payer_Symptoms_Female', {
	        sectionId: 'PayerHealthHistoryInfo',
	        condition: 'isPayerFemale'
	    }), _defineProperty(_question, 'Payer_HasDiagnosis', {
	        sectionId: 'PayerHealthHistoryInfo',
	        condition: 'isSIOProduct',
	        required: 'isPayerPastIllness'
	    }), _defineProperty(_question, 'Payer_Diagnosises[i]', {
	        sectionId: 'PayerHealthHistoryInfo',
	        condition: 'Payer_HasDiagnosis',
	        required: 'isPayerPastIllness'
	    }), _defineProperty(_question, 'Payer_HasTreatment', {
	        sectionId: 'PayerHealthHistoryInfo',
	        condition: 'isSIOProduct',
	        required: 'isPayerPastIllness'
	    }), _defineProperty(_question, 'Payer_Treatments[i]', {
	        sectionId: 'PayerHealthHistoryInfo',
	        condition: 'Payer_HasTreatment',
	        required: 'isPayerPastIllness'
	    }), _defineProperty(_question, 'Insured_IsPreferEPolicy', {
	        sectionId: 'FATCA'
	    }), _defineProperty(_question, 'Insured_MoreDetails', {
	        condition: 'isAdult',
	        sectionId: 'FATCA'
	    }), _defineProperty(_question, 'Fatca_Q1', {
	        sectionId: 'FATCA',
	        required: true
	    }), _defineProperty(_question, 'Fatca_Q2', {
	        sectionId: 'FATCA',
	        condition: 'Fatca_Q1',
	        required: true
	    }), _defineProperty(_question, 'Fatca_ConsentDated', {
	        sectionId: 'FATCA',
	        required: true
	    }), _defineProperty(_question, 'Contract_WrittenAt', {
	        sectionId: 'FATCA',
	        required: true
	    }), _defineProperty(_question, 'Contract_Dated', {
	        sectionId: 'FATCA',
	        required: true
	    }), _defineProperty(_question, 'Contract_Witness', {
	        sectionId: 'FATCA',
	        required: 'isFormTypePA'
	    }), _defineProperty(_question, 'Contract_Applicant', {
	        sectionId: 'FATCA',
	        required: 'isAdult'
	    }), _defineProperty(_question, 'Contract_ConsentRelation', {
	        sectionId: 'FATCA',
	        required: true
	    }), _defineProperty(_question, 'Contract_ConsentByParent', {
	        sectionId: 'FATCA',
	        required: true
	    }), _defineProperty(_question, 'Contract_ConsentBYPepresentative', {
	        sectionId: 'FATCA',
	        required: true
	    }), _defineProperty(_question, 'Contract_Payer', {
	        sectionId: 'FATCA',
	        required: 'isHasPayer'
	    }), _defineProperty(_question, 'Insured_Name', {
	        sectionId: 'HealthQuestionnaire'
	    }), _defineProperty(_question, 'Insured_Diabetes_HasFamily', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_FamiliyMember', {
	        condition: 'Insured_Diabetes_HasFamily',
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_Diagnosed', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_TreatmentStarted', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_DoctorFirstName', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_DoctorLastName', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_Hospital', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_PatientId', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_TreatmentFrequency', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_TreatmentFrequencyUnit', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_LastTreatment', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_Treatments', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_Treatments_TreatmentDetail_1', {
	        sectionId: 'Diabetes',
	        condition: 'InsuredDiabetesPill'
	    }), _defineProperty(_question, 'Insured_Diabetes_Treatments_TreatmentDetail_2', {
	        sectionId: 'Diabetes',
	        condition: 'InsuredDiabetesAnother'
	    }), _defineProperty(_question, 'Insured_Diabetes_RoutineUrineTest', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_LastUrineTest', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_UrineTestResult', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_UrineTestResultDetail', {
	        sectionId: 'Diabetes',
	        condition: 'Insured_Diabetes_UrineTestResult'
	    }), _defineProperty(_question, 'Insured_Diabetes_BloodTest', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_BloodTestResult', {
	        sectionId: 'Diabetes',
	        condition: 'Insured_Diabetes_BloodTest'
	    }), _defineProperty(_question, 'Insured_Diabetes_Symptoms[i]', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_Symptoms', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_Symptoms[i]_Flag', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_HasCxr', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_CxrDate', {
	        sectionId: 'Diabetes',
	        condition: 'Insured_Diabetes_HasCxr'
	    }), _defineProperty(_question, 'Insured_Diabetes_CxrResultNormal', {
	        sectionId: 'Diabetes',
	        condition: 'Insured_Diabetes_HasCxr'
	    }), _defineProperty(_question, 'Insured_Diabetes_CxrHospital', {
	        sectionId: 'Diabetes',
	        condition: 'Insured_Diabetes_HasCxr'
	    }), _defineProperty(_question, 'Insured_Diabetes_HasEkg', {
	        sectionId: 'Diabetes'
	    }), _defineProperty(_question, 'Insured_Diabetes_EkgDate', {
	        sectionId: 'Diabetes',
	        condition: 'Insured_Diabetes_HasEkg'
	    }), _defineProperty(_question, 'Insured_Diabetes_EkgResultNormal', {
	        sectionId: 'Diabetes',
	        condition: 'Insured_Diabetes_HasEkg'
	    }), _defineProperty(_question, 'Insured_Diabetes_EkgHospital', {
	        sectionId: 'Diabetes',
	        condition: 'Insured_Diabetes_HasEkg'
	    }), _defineProperty(_question, 'Insured_Hbp_TreatmentStartedDate', {
	        sectionId: 'Hbp'
	    }), _defineProperty(_question, 'Insured_Hbp_DiagnosedDate', {
	        sectionId: 'Hbp'
	    }), _defineProperty(_question, 'Insured_Hbp_DoctorFirstName', {
	        sectionId: 'Hbp'
	    }), _defineProperty(_question, 'Insured_Hbp_DoctorLastName', {
	        sectionId: 'Hbp'
	    }), _defineProperty(_question, 'Insured_Hbp_Hospital', {
	        sectionId: 'Hbp'
	    }), _defineProperty(_question, 'Insured_Hbp_PatientId', {
	        sectionId: 'Hbp'
	    }), _defineProperty(_question, 'Insured_Hbp_PretreatedBp', {
	        sectionId: 'Hbp'
	    }), _defineProperty(_question, 'Insured_Hbp_PretreatedBpDate', {
	        sectionId: 'Hbp'
	    }), _defineProperty(_question, 'Insured_Hbp_LastBp', {
	        sectionId: 'Hbp'
	    }), _defineProperty(_question, 'Insured_Hbp_LastBpDate', {
	        sectionId: 'Hbp'
	    }), _defineProperty(_question, 'Insured_Hbp_Medicine', {
	        sectionId: 'Hbp'
	    }), _defineProperty(_question, 'Insured_Hbp_CurrentInTreatment', {
	        sectionId: 'Hbp'
	    }), _defineProperty(_question, 'Insured_Hbp_CurrentDoctorName', {
	        sectionId: 'Hbp',
	        condition: 'Insured_Hbp_CurrentInTreatment'
	    }), _defineProperty(_question, 'Insured_Hbp_CurrentHospital', {
	        sectionId: 'Hbp',
	        condition: 'Insured_Hbp_CurrentInTreatment'
	    }), _defineProperty(_question, 'Insured_Hbp_CurrentLastVisit', {
	        sectionId: 'Hbp',
	        condition: 'Insured_Hbp_CurrentInTreatment'
	    }), _defineProperty(_question, 'Insured_Hbp_CurrentFirstVisitDate', {
	        sectionId: 'Hbp',
	        condition: 'Insured_Hbp_Not_CurrentInTreatment'
	    }), _defineProperty(_question, 'Insured_Hbp_HasCxr', {
	        sectionId: 'Hbp'
	    }), _defineProperty(_question, 'Insured_Hbp_CxrDate', {
	        sectionId: 'Hbp',
	        condition: 'Insured_Hbp_HasCxr'
	    }), _defineProperty(_question, 'Insured_Hbp_CxrResultNormal', {
	        sectionId: 'Hbp',
	        condition: 'Insured_Hbp_HasCxr'
	    }), _defineProperty(_question, 'Insured_Hbp_CxrHospital', {
	        sectionId: 'Hbp',
	        condition: 'Insured_Hbp_HasCxr'
	    }), _defineProperty(_question, 'Insured_Hbp_HasEkg', {
	        sectionId: 'Hbp'
	    }), _defineProperty(_question, 'Insured_Hbp_EkgDate', {
	        sectionId: 'Hbp',
	        condition: 'Insured_Hbp_HasEkg'
	    }), _defineProperty(_question, 'Insured_Hbp_EkgResultNormal', {
	        sectionId: 'Hbp',
	        condition: 'Insured_Hbp_HasEkg'
	    }), _defineProperty(_question, 'Insured_Hbp_EkgHospital', {
	        sectionId: 'Hbp',
	        condition: 'Insured_Hbp_HasEkg'
	    }), _defineProperty(_question, 'Insured_Hbp_Recommendation', {
	        sectionId: 'Hbp'
	    }), _defineProperty(_question, 'Insured_Hbp_SmokeFlag', {
	        sectionId: 'Hbp'
	    }), _defineProperty(_question, 'Insured_Hbp_SmokeQuantity', {
	        sectionId: 'Hbp',
	        condition: 'Insured_HighBp_SmokeFlag'
	    }), _defineProperty(_question, 'Insured_Hbp_SmokePeriod', {
	        sectionId: 'Hbp',
	        condition: 'Insured_HighBp_SmokeFlag'
	    }), _defineProperty(_question, 'Insured_Hbp_SmokeQuitDate', {
	        sectionId: 'Hbp',
	        condition: 'Insured_HighBp_SmokeFlag'
	    }), _defineProperty(_question, 'Insured_Hepatitis_DiagnosedDate', {
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Hepatitis_Jaundice', {
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Hepatitis_Nausea', {
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Hepatitis_Heptatomegaly', {
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Hepatitis_HepatoFrom', {
	        sectionId: 'Hepatitis',
	        condition: 'Insured_Hepatitis_Heptatomegaly'
	    }), _defineProperty(_question, 'Insured_Hepatitis_AbnormalLiver', {
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Hepatitis_BloodTest', {
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Hepatitis_BloodTestDate', {
	        condition: 'Insured_Hepatitis_BloodTest',
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Hepatitis_BloodTestReason', {
	        condition: 'Insured_Hepatitis_BloodTest',
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Hepatitis_BloodTestHospital', {
	        condition: 'Insured_Hepatitis_BloodTest',
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Hepatitis_UltrasoundTest', {
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Hepatitis_UltrasoundTestDate', {
	        condition: 'Insured_Hepatitis_UltrasoundTest',
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Hepatitis_UltrasoundTestReason', {
	        condition: 'Insured_Hepatitis_UltrasoundTest',
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Hepatitis_UltrasoundHospital', {
	        condition: 'Insured_Hepatitis_UltrasoundTest',
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Hepatitis_Diagnoseds', {
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Hepatitis_Diagnoseds[i]_DiagnosedCauseFlag', {
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Hepatitis_Diagnoseds_Other', {
	        sectionId: 'Hepatitis',
	        condition: 'Insured_Hepatitis_Diagnoseds'
	    }), _defineProperty(_question, 'Insured_Hepatitis_AlcoholFlag', {
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Hepatitis_AlcoholQuantity', {
	        sectionId: 'Hepatitis',
	        condition: 'Insured_Hepatitis_HasAlcohol'
	    }), _defineProperty(_question, 'Insured_Hepatitis_AlcoholWithdrawnWhen', {
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Hepatitis_AlcoholWithdrawnReason', {
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Hepatitis_CurrentLastVisit', {
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Hepatitis_Reason', {
	        sectionId: 'Hepatitis'
	    }), _defineProperty(_question, 'Insured_Tumor_Location', {
	        sectionId: 'Tumor'
	    }), _defineProperty(_question, 'Insured_Tumor_DiscoveryMethod', {
	        sectionId: 'Tumor'
	    }), _defineProperty(_question, 'Insured_Tumor_DiscoveryDate', {
	        sectionId: 'Tumor'
	    }), _defineProperty(_question, 'Insured_Tumor_DiscoveryHospital', {
	        sectionId: 'Tumor'
	    }), _defineProperty(_question, 'Insured_Tumor_DiagnosedAsMalicious', {
	        sectionId: 'Tumor'
	    }), _defineProperty(_question, 'Insured_Tumor_DiagnosedDetail', {
	        sectionId: 'Tumor'
	    }), _defineProperty(_question, 'Insured_Tumor_BeenOperated', {
	        sectionId: 'Tumor'
	    }), _defineProperty(_question, 'Insured_Tumor_Followup', {
	        sectionId: 'Tumor',
	        condition: 'Insured_Tumor_BeenOperated'
	    }), _defineProperty(_question, 'Insured_Tumor_FollowupDate', {
	        sectionId: 'Tumor',
	        condition: 'Insured_Tumor_Followup'
	    }), _defineProperty(_question, 'Insured_Tumor_Treatments', {
	        sectionId: 'Tumor'
	    }), _defineProperty(_question, 'Insured_Tumor_Treatments_TreatmentStarted_Radio', {
	        sectionId: 'Tumor',
	        condition: 'Insured_Tumor_Treatments_Treatment_Radio'
	    }), _defineProperty(_question, 'Insured_Tumor_Treatments_LastTreatment_Radio', {
	        sectionId: 'Tumor',
	        condition: 'Insured_Tumor_Treatments_Treatment_Radio'
	    }), _defineProperty(_question, 'Insured_Tumor_Treatments_TreatmentStarted_Chemo', {
	        sectionId: 'Tumor',
	        condition: 'Insured_Tumor_Treatments_Treatment_Chemo'
	    }), _defineProperty(_question, 'Insured_Tumor_Treatments_LastTreatment_Chemo', {
	        sectionId: 'Tumor',
	        condition: 'Insured_Tumor_Treatments_Treatment_Chemo'
	    }), _defineProperty(_question, 'Insured_Tumor_OtherTreatmentDetails', {
	        condition: 'Insured_Tumor_Treatments_Treatment_Other',
	        sectionId: 'Tumor'
	    }), _defineProperty(_question, 'Insured_Tumor_SpecialTreatment', {
	        sectionId: 'Tumor'
	    }), _defineProperty(_question, 'Insured_Tumor_SpecialTreatmentDetails', {
	        sectionId: 'Tumor',
	        condition: 'Insured_Tumor_SpecialTreatment'
	    }), _defineProperty(_question, 'Insured_Tumor_Recurrence', {
	        sectionId: 'Tumor'
	    }), _defineProperty(_question, 'Insured_Tumor_RecurredWhen', {
	        sectionId: 'Tumor',
	        condition: 'Insured_Tumor_Recurrence'
	    }), _defineProperty(_question, 'Insured_Tumor_DischargedWhen', {
	        sectionId: 'Tumor'
	    }), _defineProperty(_question, 'LastedPage', {
	        sectionId: 'LastedPage'
	    }), _question)
	};

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _ref, _, _2;
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var moment = __webpack_require__(27);
	
	module.exports = {
	    common: [
	    ////// Insured Info
	
	    {
	        labels: ['Insured_IdType'],
	        questions: ['Insured_IdType'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initIdent'],
	                autoInitMaster: false,
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_IdNo'],
	        questions: ['Insured_IdNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'IDcard',
	                format: 'X - X X X X - X X X X X - X X - X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_LaserCode'],
	        questions: ['Insured_LaserCode'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_LaserCode' } },
	        hideFooter: false
	    }, {
	        labels: ['Insured_IdExpiryDate'],
	        questions: ['Insured_IdExpiryDate'],
	        components: ['DatePicker'],
	        props: { 0: { placeholder: 'Select_Please' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_ThName'],
	        questions: ['Insured_ThName_Title', 'Insured_ThName_First', 'Insured_ThName_Last'],
	        components: ['Dropdown', 'TextBox', 'TextBox'],
	        props: {
	            0: {
	                initMaster: ['initTitle'],
	                autoInitMaster: false,
	                placeholder: 'Insured_ThName_Title',
	                setWidth: { width: '70%' }
	            },
	            1: { placeholder: 'Insured_ThName_First' },
	            2: { placeholder: 'Insured_ThName_Last' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_BirthDate'],
	        questions: ['Insured_BirthDate'],
	        components: ['DatePicker'],
	        props: {
	            0: { placeholder: 'Select_Please', maxDate: moment().format('YYYY-MM-DD') }
	        },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Insured_FormerName'],
	        questions: ['Insured_FormerName_First', 'Insured_FormerName_Last'],
	        components: ['TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: 'Insured_FormerName_First' },
	            1: { placeholder: 'Insured_FormerName_Last' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Nationality'],
	        questions: ['Insured_Nationality'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initNationality'],
	                autoInitMaster: false,
	                placeholder: 'Select_Nationality'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Race'],
	        questions: ['Insured_Race'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initNationality'],
	                autoInitMaster: false,
	                placeholder: 'Insured_Race'
	            }
	        },
	        hideFooter: true
	    }, {
	        // hoc: 'Marital',
	        labels: ['Insured_MaritalStatus'],
	        questions: ['Insured_MaritalStatus'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initMarital'],
	                autoInitMaster: false,
	                placeholder: 'Select_Please',
	                isInFooter: true
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_SpouseName'],
	        questions: ['Insured_SpouseName_Title', 'Insured_SpouseName_First', 'Insured_SpouseName_Last'],
	        components: ['Dropdown', 'TextBox', 'TextBox'],
	        props: {
	            0: {
	                initMaster: ['initTitle'],
	                autoInitMaster: false,
	                placeholder: 'Insured_SpouseName_Title',
	                setWidth: { width: '70%' }
	            },
	            1: { placeholder: 'Insured_SpouseName_First' },
	            2: { placeholder: 'Insured_SpouseName_Last' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['IsStudent'],
	        questions: ['Insured_IsStudent'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'StillStudy' }, { value: 'N', label: 'NotStudy' }],
	                placeholder: 'Select_Please',
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_StudyYear'],
	        questions: ['Insured_StudyYear'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Fillin_StudyYear' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_SchoolName'],
	        questions: ['Insured_SchoolName'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Fillin_School' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_FatherName'],
	        questions: ['Insured_FatherName_Title', 'Insured_FatherName_First', 'Insured_FatherName_Last'],
	        components: ['Dropdown', 'TextBox', 'TextBox'],
	        props: {
	            0: {
	                initMaster: ['initTitle'],
	                autoInitMaster: false,
	                placeholder: 'Insured_FatherName_Title',
	                setWidth: { width: '70%' }
	            },
	            1: { placeholder: 'Insured_FatherName_First' },
	            2: { placeholder: 'Insured_FatherName_Last' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_IsFatherAlive'],
	        questions: ['Insured_IsFatherAlive'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'StillAlive' }, { value: 'N', label: 'Die' }],
	                placeholder: 'Select_Please',
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_MotherName'],
	        questions: ['Insured_MotherName_Title', 'Insured_MotherName_First', 'Insured_MotherName_Last'],
	        components: ['Dropdown', 'TextBox', 'TextBox'],
	        props: {
	            0: {
	                initMaster: ['initTitle'],
	                autoInitMaster: false,
	                placeholder: 'Insured_MotherName_Title',
	                setWidth: { width: '70%' }
	            },
	            1: { placeholder: 'Insured_MotherName_First' },
	            2: { placeholder: 'Insured_MotherName_Last' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_IsMotherAlive'],
	        questions: ['Insured_IsMotherAlive'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'StillAlive' }, { value: 'N', label: 'Die' }],
	                placeholder: 'Select_Please',
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	        //Option Fixed ? load from master data
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_Province'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initProvince'],
	                autoInitMaster: false,
	                placeholder: 'Insured_CurrentAddress_Province'
	            }
	        },
	        hideFooter: true
	        //Show popup Ref Address
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_District'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initDistrict', 'Insured_CurrentAddress_Province'],
	                autoInitMaster: false,
	                placeholder: 'Insured_CurrentAddress_District',
	                extraLabel: [{
	                    value: 'Insured_CurrentAddress_Province',
	                    label: 'Insured_CurrentAddress_Province'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_SubDistrict'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initSubDistrict', 'Insured_CurrentAddress_Province', 'Insured_CurrentAddress_District'],
	                autoInitMaster: false,
	                placeholder: 'Insured_CurrentAddress_SubDistrict',
	                extraLabel: [{
	                    value: 'Insured_CurrentAddress_Province',
	                    label: 'Insured_CurrentAddress_Province'
	                }, {
	                    value: 'Insured_CurrentAddress_District',
	                    label: 'Insured_CurrentAddress_District'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_HouseNo', 'Insured_CurrentAddress_Mooban', 'Insured_CurrentAddress_Arkan'],
	        components: ['TextBox', 'TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: ['Insured_CurrentAddress_HouseNo'] },
	            1: { placeholder: ['Insured_CurrentAddress_Mooban'] },
	            2: { placeholder: ['Insured_CurrentAddress_Arkan'] }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_Moo', 'Insured_CurrentAddress_Soi', 'Insured_CurrentAddress_Street'],
	        components: ['TextBox', 'TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: ['Insured_CurrentAddress_Moo'] },
	            1: { placeholder: ['Insured_CurrentAddress_Soi'] },
	            2: { placeholder: ['Insured_CurrentAddress_Street'] }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_CurrentAddress_Postal'],
	        title: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_Postal'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: '_ _ _ _ _',
	                char: '_'
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_CurrentAddress_TelNo'],
	        title: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_TelNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_MobileNo'],
	        questions: ['Insured_MobileNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Email'],
	        questions: ['Insured_Email'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Email' }
	        },
	        hideFooter: false
	    }, {
	        copyProvince: true,
	        labels: ['Insured_RegAddress'],
	        questions: ['Insured_RegAddress_Province'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initProvince'],
	                autoInitMaster: false,
	                placeholder: 'Insured_RegAddress_Province'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_RegAddress'],
	        questions: ['Insured_RegAddress_District'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initDistrict', 'Insured_RegAddress_Province'],
	                autoInitMaster: false,
	                placeholder: 'Insured_RegAddress_District',
	                extraLabel: [{
	                    value: 'Insured_RegAddress_Province',
	                    label: 'Insured_RegAddress_Province'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_RegAddress'],
	        questions: ['Insured_RegAddress_SubDistrict'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initSubDistrict', 'Insured_RegAddress_Province', 'Insured_RegAddress_District'],
	                autoInitMaster: false,
	                placeholder: 'Insured_RegAddress_SubDistrict',
	                extraLabel: [{
	                    value: 'Insured_RegAddress_Province',
	                    label: 'Insured_RegAddress_Province'
	                }, {
	                    value: 'Insured_RegAddress_District',
	                    label: 'Insured_RegAddress_District'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_RegAddress'],
	        questions: ['Insured_RegAddress_HouseNo', 'Insured_RegAddress_Mooban', 'Insured_RegAddress_Arkan'],
	        components: ['TextBox', 'TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: 'Insured_RegAddress_HouseNo' },
	            1: { placeholder: 'Insured_RegAddress_Mooban' },
	            2: { placeholder: 'Insured_RegAddress_Arkan' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_RegAddress'],
	        questions: ['Insured_RegAddress_Moo', 'Insured_RegAddress_Soi', 'Insured_RegAddress_Street'],
	        components: ['TextBox', 'TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: 'Insured_RegAddress_Moo' },
	            1: { placeholder: 'Insured_RegAddress_Soi' },
	            2: { placeholder: 'Insured_RegAddress_Street' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_RegAddress_Postal'],
	        title: ['Insured_RegAddress'],
	        questions: ['Insured_RegAddress_Postal'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: '_ _ _ _ _',
	                char: '_'
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_RegAddress_TelNo'],
	        title: ['Insured_RegAddress'],
	        questions: ['Insured_RegAddress_TelNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        copyProvince: true,
	        labels: ['Insured_BusinessAddress'],
	        questions: ['Insured_BusinessAddress_Province'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initProvince'],
	                autoInitMaster: false,
	                placeholder: 'Insured_BusinessAddress_Province'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_BusinessAddress'],
	        questions: ['Insured_BusinessAddress_District'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initDistrict', 'Insured_BusinessAddress_Province'],
	                autoInitMaster: false,
	                placeholder: 'Insured_BusinessAddress_District',
	                extraLabel: [{
	                    value: 'Insured_BusinessAddress_Province',
	                    label: 'Insured_BusinessAddress_Province'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_BusinessAddress'],
	        questions: ['Insured_BusinessAddress_SubDistrict'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initSubDistrict', 'Insured_BusinessAddress_Province', 'Insured_BusinessAddress_District'],
	                autoInitMaster: false,
	                placeholder: 'Insured_BusinessAddress_SubDistrict',
	                extraLabel: [{
	                    value: 'Insured_BusinessAddress_Province',
	                    label: 'Insured_BusinessAddress_Province'
	                }, {
	                    value: 'Insured_BusinessAddress_District',
	                    label: 'Insured_BusinessAddress_District'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_BusinessAddress'],
	        questions: ['Insured_BusinessAddress_Name'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_BusinessAddress_Name' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_BusinessAddress'],
	        questions: ['Insured_BusinessAddress_HouseNo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_BusinessAddress_HouseNo' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_BusinessAddress'],
	        questions: ['Insured_BusinessAddress_Moo', 'Insured_BusinessAddress_Soi', 'Insured_BusinessAddress_Street'],
	        components: ['TextBox', 'TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: 'Insured_BusinessAddress_Moo' },
	            1: { placeholder: 'Insured_BusinessAddress_Soi' },
	            2: { placeholder: 'Insured_BusinessAddress_Street' }
	        },
	        hideFooter: true
	    }, {
	        title: ['Insured_BusinessAddress'],
	        labels: ['Insured_BusinessAddress_Postal'],
	        questions: ['Insured_BusinessAddress_Postal'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: '_ _ _ _ _',
	                char: '_'
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_BusinessAddress_TelNo'],
	        title: ['Insured_BusinessAddress'],
	        questions: ['Insured_BusinessAddress_TelNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['contact_information'],
	        questions: ['Insured_ContactAddressId'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: '0', label: 'Insured_CurrentAddress' }, { value: '1', label: 'Insured_RegAddress' }, { value: '2', label: 'Insured_BusinessAddress' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: ['Insured_Occupation_Occupation'],
	        questions: ['Insured_Occupation1_Occupation'],
	        components: ['JobDropdown'],
	        props: {
	            0: {
	                initMaster: ['initOccupation'],
	                autoInitMaster: false,
	                placeholder: 'Occupation_Search'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Position'],
	        questions: ['Insured_Occupation1_Position'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: ['Insured_Occupation_Position'] } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Responsibility'],
	        questions: ['Insured_Occupation1_Responsibility'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: ['Insured_Occupation_Responsibility'] } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_TypeOfBusiness'],
	        questions: ['Insured_Occupation1_TypeOfBusiness'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: ['Insured_Occupation_TypeOfBusiness'] } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Income'],
	        questions: ['Insured_Occupation1_Income'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'currency',
	                placeholder: 'Insured_Occupation_Income',
	                unitLabel: 'Baht',
	                style: { maxWidth: '70%', margin: '0 auto' },
	                maxLength: 9
	            }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HasAnotherOccupation'],
	        questions: ['Insured_HasAnotherOccupation'],
	        components: ['Option'],
	        props: {
	            0: { initMaster: ['initYesNo'], placeholder: 'Select_Please', isInFooter: true }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Occupation2_Occupation'],
	        questions: ['Insured_Occupation2_Occupation'],
	        components: ['JobDropdown'],
	        props: {
	            0: {
	                initMaster: ['initOccupation'],
	                autoInitMaster: false,
	                placeholder: 'Occupation_Search'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Position'],
	        questions: ['Insured_Occupation2_Position'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: ['Insured_Occupation_Position'] } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Responsibility'],
	        questions: ['Insured_Occupation2_Responsibility'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Responsibility' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_TypeOfBusiness'],
	        questions: ['Insured_Occupation2_TypeOfBusiness'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: ['Insured_Occupation_TypeOfBusiness'] } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Income'],
	        questions: ['Insured_Occupation2_Income'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'currency',
	                placeholder: 'Insured_Occupation_Income',
	                unitLabel: 'Baht',
	                style: { maxWidth: '70%', margin: '0 auto' },
	                maxLength: 9
	            }
	        },
	        hideFooter: false
	    }, (_ref = {
	        labels: ['Insured_MotorcycleFlag'],
	        questions: ['Insured_MotorcycleFlag'],
	        components: ['Option'],
	        props: { 0: { initMaster: ['initYesNo'], placeholder: 'Select_Please' } }
	    }, _defineProperty(_ref, 'props', {
	        0: {
	            list: [{ value: 'Y', label: 'Use' }, { value: 'N', label: 'NotUse' }],
	            placeholder: 'Select_Please'
	        }
	    }), _defineProperty(_ref, 'hideFooter', false), _defineProperty(_ref, 'isInFooter', true), _ref),
	
	    //// Payer Info
	    {
	        labels: ['Payer_RelationToInsured'],
	        questions: ['Payer_RelationToInsured'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initPayerRelationJuv'],
	                placeholder: 'Payer_RelationToInsured'
	            }
	        },
	        hideFooter: true
	    }, {
	        title: ['Payer_RelationToInsured'],
	        labels: ['Another'],
	        questions: ['Payer_RelationOtherToInsured'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'ระบุความสัมพันธ์กับผู้เอาประกัน' } },
	        hideFooter: false
	    }, {
	        labels: ['Payer_IdType'],
	        questions: ['Payer_IdType'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initIdent'],
	                autoInitMaster: false,
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_IdNo'],
	        questions: ['Payer_IdNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'IDcard',
	                format: 'X - X X X X - X X X X X - X X - X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_IdExpiryDate'],
	        questions: ['Payer_IdExpiryDate'],
	        components: ['DatePicker'],
	        props: { 0: { placeholder: 'Select_Please' } },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Payer_ThName'],
	        questions: ['Payer_ThName_Title', 'Payer_ThName_First', 'Payer_ThName_Last'],
	        components: ['Dropdown', 'TextBox', 'TextBox'],
	        props: {
	            0: {
	                initMaster: ['initTitle'],
	                autoInitMaster: false,
	                placeholder: 'Payer_ThName_Title',
	                setWidth: { width: '70%' }
	            },
	            1: { placeholder: 'Payer_ThName_First' },
	            2: { placeholder: 'Payer_ThName_Last' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_BirthDate'],
	        questions: ['Payer_BirthDate'],
	        components: ['DatePicker'],
	        props: { 0: { placeholder: 'Select_Please', maxDate: moment().format('YYYY-MM-DD') } },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Payer_FormerName'],
	        questions: ['Payer_FormerName_First', 'Payer_FormerName_Last'],
	        components: ['TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: 'Insured_FormerName_First' },
	            1: { placeholder: 'Insured_FormerName_Last' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_Nationality'],
	        questions: ['Payer_Nationality'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initNationality'],
	                autoInitMaster: false,
	                placeholder: 'Select_Nationality'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_Race'],
	        questions: ['Payer_Race'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initNationality'],
	                autoInitMaster: false,
	                placeholder: 'Select_Race'
	            }
	        },
	        hideFooter: true
	    }, {
	        // hoc: 'Marital',
	        labels: ['Payer_MaritalStatus'],
	        questions: ['Payer_MaritalStatus'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initMarital'],
	                autoInitMaster: false,
	                placeholder: 'Select_Please',
	                isInFooter: false
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_SpouseName'],
	        questions: ['Payer_SpouseName_Title', 'Payer_SpouseName_First', 'Payer_SpouseName_Last'],
	        components: ['Dropdown', 'TextBox', 'TextBox'],
	        props: {
	            0: {
	                initMaster: ['initTitle'],
	                autoInitMaster: false,
	                placeholder: 'fullform_title'
	            },
	            1: { placeholder: 'Insured_SpouseName_First' },
	            2: { placeholder: 'Insured_SpouseName_Last' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_Province'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initProvince'],
	                autoInitMaster: false,
	                placeholder: 'Payer_CurrentAddress_Province'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_District'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initDistrict', 'Payer_CurrentAddress_Province'],
	                autoInitMaster: false,
	                placeholder: 'Payer_CurrentAddress_District',
	                extraLabel: [{
	                    value: 'Payer_CurrentAddress_Province',
	                    label: 'Payer_CurrentAddress_Province'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_SubDistrict'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initSubDistrict', 'Payer_CurrentAddress_Province', 'Payer_CurrentAddress_District'],
	                autoInitMaster: false,
	                placeholder: 'Payer_CurrentAddress_SubDistrict',
	                extraLabel: [{
	                    value: 'Payer_CurrentAddress_Province',
	                    label: 'Payer_CurrentAddress_Province'
	                }, {
	                    value: 'Payer_CurrentAddress_District',
	                    label: 'Payer_CurrentAddress_District'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_HouseNo', 'Payer_CurrentAddress_Mooban', 'Payer_CurrentAddress_Arkan'],
	        components: ['TextBox', 'TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: 'Payer_CurrentAddress_HouseNo' },
	            1: { placeholder: 'Payer_CurrentAddress_Mooban' },
	            2: { placeholder: 'Payer_CurrentAddress_Arkan' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_Moo', 'Payer_CurrentAddress_Soi', 'Payer_CurrentAddress_Street'],
	        components: ['TextBox', 'TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: 'Payer_CurrentAddress_Moo' },
	            1: { placeholder: 'Payer_CurrentAddress_Soi' },
	            2: { placeholder: 'Payer_CurrentAddress_Street' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['fullform_postcode'],
	        title: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_Postal'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: '_ _ _ _ _',
	                char: '_'
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_CurrentAddress_TelNo'],
	        title: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_TelNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_MobileNo'],
	        questions: ['Payer_MobileNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_Email'],
	        questions: ['Payer_Email'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_Email' }
	        },
	        hideFooter: false
	    }, {
	        copyProvince: true,
	        labels: ['Payer_RegAddress'],
	        questions: ['Payer_RegAddress_Province'],
	        props: {
	            0: { initMaster: ['initProvince'], placeholder: 'Payer_RegAddress_Province' }
	        },
	        components: ['Dropdown'],
	        hideFooter: true
	    }, {
	        labels: ['Payer_RegAddress'],
	        questions: ['Payer_RegAddress_District'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initDistrict', 'Payer_RegAddress_Province'],
	                autoInitMaster: false,
	                placeholder: 'Payer_RegAddress_District',
	                extraLabel: [{ value: 'Payer_RegAddress_Province', label: 'Payer_RegAddress_Province' }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_RegAddress'],
	        questions: ['Payer_RegAddress_SubDistrict'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initSubDistrict', 'Payer_RegAddress_Province', 'Payer_RegAddress_District'],
	                autoInitMaster: false,
	                placeholder: 'Payer_RegAddress_SubDistrict',
	                extraLabel: [{ value: 'Payer_RegAddress_Province', label: 'Payer_RegAddress_Province' }, { value: 'Payer_RegAddress_District', label: 'Payer_RegAddress_District' }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_RegAddress'],
	        questions: ['Payer_RegAddress_HouseNo', 'Payer_RegAddress_Mooban', 'Payer_RegAddress_Arkan'],
	        components: ['TextBox', 'TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: 'Payer_RegAddress_HouseNo' },
	            1: { placeholder: 'Payer_RegAddress_Mooban' },
	            2: { placeholder: 'Payer_RegAddress_Arkan' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_RegAddress'],
	        questions: ['Payer_RegAddress_Moo', 'Payer_RegAddress_Soi', 'Payer_RegAddress_Street'],
	        components: ['TextBox', 'TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: 'Payer_RegAddress_Moo' },
	            1: { placeholder: 'Payer_RegAddress_Soi' },
	            2: { placeholder: 'Payer_RegAddress_Street' }
	        },
	        hideFooter: true
	    }, {
	        title: ['Payer_RegAddress'],
	        labels: ['Payer_RegAddress_Postal'],
	        questions: ['Payer_RegAddress_Postal'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: '_ _ _ _ _',
	                char: '_'
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_RegAddress_TelNo'],
	        title: ['Payer_RegAddress'],
	        questions: ['Payer_RegAddress_TelNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        copyProvince: true,
	        labels: ['Payer_BusinessAddress'],
	        questions: ['Payer_BusinessAddress_Province'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initProvince'],
	                autoInitMaster: false,
	                placeholder: 'Payer_BusinessAddress_Province'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_BusinessAddress'],
	        questions: ['Payer_BusinessAddress_District'],
	        props: {
	            0: {
	                initMaster: ['initDistrict', 'Payer_BusinessAddress_Province'],
	                autoInitMaster: false,
	                placeholder: 'Payer_BusinessAddress_District',
	                extraLabel: [{
	                    value: 'Payer_BusinessAddress_Province',
	                    label: 'Payer_BusinessAddress_Province'
	                }]
	            }
	        },
	        components: ['Dropdown'],
	        hideFooter: true
	    }, {
	        labels: ['Payer_BusinessAddress'],
	        questions: ['Payer_BusinessAddress_SubDistrict'],
	        props: {
	            0: {
	                initMaster: ['initSubDistrict', 'Payer_BusinessAddress_Province', 'Payer_BusinessAddress_District'],
	                autoInitMaster: false,
	                placeholder: 'Payer_BusinessAddress_SubDistrict',
	                extraLabel: [{
	                    value: 'Payer_BusinessAddress_Province',
	                    label: 'Payer_BusinessAddress_Province'
	                }, {
	                    value: 'Payer_BusinessAddress_District',
	                    label: 'Payer_BusinessAddress_District'
	                }]
	            }
	        },
	        components: ['Dropdown'],
	        hideFooter: true
	    }, {
	        labels: ['Payer_BusinessAddress'],
	        questions: ['Payer_BusinessAddress_Name'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_BusinessAddress_Name' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_BusinessAddress'],
	        questions: ['Payer_BusinessAddress_HouseNo', 'Payer_BusinessAddress_Mooban', 'Payer_BusinessAddress_Arkan'],
	        components: ['TextBox', 'TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: 'Payer_BusinessAddress_HouseNo' },
	            1: { placeholder: 'Payer_BusinessAddress_Mooban' },
	            2: { placeholder: 'Payer_BusinessAddress_Arkan' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_BusinessAddress'],
	        questions: ['Payer_BusinessAddress_Moo', 'Payer_BusinessAddress_Soi', 'Payer_BusinessAddress_Street'],
	        components: ['TextBox', 'TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: 'Payer_BusinessAddress_Moo' },
	            1: { placeholder: 'Payer_BusinessAddress_Soi' },
	            2: { placeholder: 'Payer_BusinessAddress_Street' }
	        },
	        hideFooter: true
	    }, {
	        title: ['Payer_BusinessAddress'],
	        labels: ['Payer_BusinessAddress_Postal'],
	        questions: ['Payer_BusinessAddress_Postal'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: '_ _ _ _ _',
	                char: '_'
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_BusinessAddress_TelNo'],
	        title: ['Payer_BusinessAddress'],
	        questions: ['Payer_BusinessAddress_TelNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['contact_information'],
	        questions: ['Payer_ContactAddressId'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 0, label: 'Insured_CurrentAddress' }, { value: 1, label: 'Insured_RegAddress' }, { value: 2, label: 'Insured_BusinessAddress' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: ['Payer_Occupation_Occupation'],
	        questions: ['Payer_Occupation1_Occupation'],
	        components: ['JobDropdown'],
	        props: {
	            0: {
	                initMaster: ['initOccupation'],
	                autoInitMaster: false,
	                placeholder: 'Occupation_Search'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_Occupation_Position'],
	        questions: ['Payer_Occupation1_Position'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Position' } },
	        hideFooter: true
	    }, {
	        labels: ['Payer_Occupation_Responsibility'],
	        questions: ['Payer_Occupation1_Responsibility'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Responsibility' } },
	        hideFooter: true
	    }, {
	        labels: ['Payer_Occupation_TypeOfBusiness'],
	        questions: ['Payer_Occupation1_TypeOfBusiness'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Payer_Occupation_TypeOfBusiness' } },
	        hideFooter: true
	    }, {
	        labels: ['Payer_Occupation_Income'],
	        questions: ['Payer_Occupation1_Income'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'currency',
	                placeholder: '0',
	                unitLabel: 'Baht',
	                style: { maxWidth: '70%', margin: '0 auto' },
	                maxLength: 9
	            }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Payer_HasAnotherOccupation'],
	        questions: ['Payer_HasAnotherOccupation'],
	        components: ['Option'],
	        props: { 0: { initMaster: ['initYesNo'], placeholder: 'Select_Please' } },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: ['Payer_Occupation2_Occupation'],
	        questions: ['Payer_Occupation2_Occupation'],
	        components: ['JobDropdown'],
	        props: {
	            0: {
	                initMaster: ['initOccupation'],
	                autoInitMaster: false,
	                placeholder: 'Occupation_Search'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_Occupation_Position'],
	        questions: ['Payer_Occupation2_Position'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Position' } },
	        hideFooter: true
	    }, {
	        labels: ['Payer_Occupation_Responsibility'],
	        questions: ['Payer_Occupation2_Responsibility'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Responsibility' } },
	        hideFooter: true
	    }, {
	        labels: ['Payer_Occupation_TypeOfBusiness'],
	        questions: ['Payer_Occupation2_TypeOfBusiness'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Payer_Occupation_TypeOfBusiness' } },
	        hideFooter: true
	    }, {
	        labels: ['Payer_Occupation_Income'],
	        questions: ['Payer_Occupation2_Income'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'currency',
	                placeholder: '0',
	                unitLabel: 'Baht',
	                style: { maxWidth: '70%', margin: '0 auto' },
	                maxLength: 9
	            }
	        },
	        hideFooter: false
	    },
	    // Product
	    {
	        type: 'Product',
	        questions: ['ProResult'],
	        labels: [''],
	        hideFooter: true
	    }, {
	        labels: ['Dividend_PaymentOption'],
	        questions: ['Dividend_PaymentOption'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 0, label: 'BankTransfer' }, { value: 1, label: 'Cheque' }, { value: 2, label: 'PayPremium' }]
	            },
	            placeholder: 'Dividend_PaymentOption'
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: ['', '', '', ''],
	        questions: ['Dividend_BankAccountHolderName', 'Dividend_Bank', 'Dividend_BankAccountNo', 'Dividend_BankBranch'],
	        components: ['TextBox', 'Dropdown', 'TextBox', 'TextBox'],
	        props: {
	            0: {
	                placeholder: 'Dividend_BankAccountHolderName'
	            },
	            1: {
	                initMaster: ['initBank'],
	                autoInitMaster: false,
	                placeholder: 'Dividend_Bank',
	                setWidth: { width: '96.5%', marginBottom: '1.8rem' }
	            },
	            2: {
	                placeholder: 'Dividend_BankAccountNo'
	            },
	            3: {
	                placeholder: 'Dividend_BankBranch'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Beneficiaries'],
	        questions: ['Beneficiaries[i]'],
	        type: 'Beneficiary',
	        initMaster: ['initBeneficiaryRelationship'],
	        hideFooter: true
	    },
	    //// Insured Health Question
	    {
	        hoc: 'YesNo',
	        bigLabel: ['HasDiagnosisFiveYear'],
	        labels: ['Insured_HasDiagnosis'],
	        questions: ['Insured_HasDiagnosis_CutOut'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Diagnosises_CutOut[i]'],
	        questions: ['Insured_Diagnosises_CutOut[i]'],
	        type: 'InsuredDiagnosis',
	        initMaster: ['initDiagnosis'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        bigLabel: ['HasDiagnosisFiveYear'],
	        labels: ['Insured_HasTreatment'],
	        questions: ['Insured_HasTreatment_CutOut'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Treatments[i]'],
	        questions: ['Insured_Treatments_CutOut[i]'],
	        type: 'InsuredTreatment',
	        initMaster: ['initTreatment'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HealthyFlag'],
	        questions: ['Insured_HealthyFlag'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_HealthyDetail'],
	        questions: ['Insured_HealthyDetail'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'FillinInfo' } },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Previous'],
	        questions: ['Insured_HasExistingPolicies'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Have' }, { value: 'N', label: 'NotHave' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: ['Insured_Previous'],
	        questions: ['Insured_ExistingPolicies[i]'],
	        type: 'Previous',
	        initMaster: ['initCompany'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HasBeenRejected'],
	        questions: ['Insured_HasBeenRejected'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: ['Insured_Rejected'],
	        questions: ['Insured_Rejecteds[i]'],
	        type: 'RejectForm',
	        initMaster: ['initCompany'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_InvolvedInNarcotics'],
	        questions: ['Insured_InvolvedInNarcotics'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_DrugFlag'],
	        questions: ['Insured_DrugFlag'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Drung_Had' }, { value: 'N', label: 'Drung_NeverHad' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_DrugFlag'],
	        labels: ['Insured_DrugType'],
	        questions: ['Insured_DrugType'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Drug' } },
	        hideFooter: true
	    }, {
	        title: ['Insured_DrugFlag'],
	        labels: ['Insured_DrugQuantity'],
	        questions: ['Insured_DrugQuantity'],
	        components: ['TextBox'],
	        // props: {
	        //     0: {
	        //         // type: 'number',
	        //         placeholder: 'Insured_DrugQuantity',
	        //         // title: 'Insured_DrugQuantity',
	        //         // unitLabel: ' ',
	        //         // style: { paddingLeft: '1rem' }
	        //     },
	        // },
	        hideFooter: true
	    }, {
	        title: ['Insured_DrugFlag'],
	        labels: [''],
	        questions: ['Insured_DrugFrequency', 'Insured_DrugPeriod'],
	        components: ['NumPad', 'NumPad'],
	        props: {
	            0: {
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_DrugFrequency',
	                unitLabel: 'Frequency_TimeWeek',
	                style: { paddingLeft: '1rem' }
	            },
	            1: {
	                value: 30,
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_DrugPeriod',
	                unitLabel: 'years_lb',
	                style: { paddingLeft: '1rem' }
	            }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        title: ['Insured_DrugFlag'],
	        labels: ['Insured_DrugWithdrawn'],
	        questions: ['Insured_DrugWithdrawn'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_DrugFlag'],
	        labels: ['Insured_DrugWhen'],
	        questions: ['Insured_DrugWhen'],
	        components: ['TextBox'],
	        props: {
	            0: {
	                list: [{ value: 1, label: 'NotDrungLess3Y' }, { value: 2, label: 'NotDrungMore3Y' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_AlcoholFlag'],
	        questions: ['Insured_AlcoholFlag'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'AlcoholEver' }, { value: 'N', label: 'AlcoholNever' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_AlcoholFlag'],
	        labels: ['Insured_AlcoholType'],
	        questions: ['Insured_AlcoholType'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Alcohol' } },
	        hideFooter: true
	    }, {
	        title: ['Insured_AlcoholFlag'],
	        labels: [''],
	        questions: ['Insured_AlcoholQuantity', 'Insured_AlcoholQuantityUnit', 'Insured_AlcoholFrequency', 'Insured_AlcoholPeriod'],
	        components: ['NumPad', 'Dropdown', 'NumPad', 'NumPad'],
	        props: {
	            0: {
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_AlcoholQuantity',
	                unitLabel: ' ',
	                style: { paddingLeft: '1rem' }
	            },
	            1: {
	                list: [{ value: '0', label: { en: 'Can/Time', th: 'กระป๋อง/ครั้ง' } }, { value: '1', label: { en: 'Bottle/Time', th: 'ขวด/ครั้ง' } }],
	                placeholder: 'Select_Please',
	                hideBorder: true
	            },
	            2: {
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_AlcoholFrequency',
	                unitLabel: 'Frequency_TimeWeek',
	                style: { paddingLeft: '1rem' }
	            },
	            3: {
	                value: 30,
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_AlcoholPeriod',
	                unitLabel: 'years_lb',
	                style: { paddingLeft: '1rem' }
	            }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        title: ['Insured_AlcoholFlag'],
	        labels: ['Insured_AlcoholWithdrawn'],
	        questions: ['Insured_AlcoholWithdrawn'],
	        components: ['Option'],
	        props: { 0: { initMaster: ['initYesNo'] } },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_AlcoholFlag'],
	        labels: ['Insured_AlcoholWhenOption'],
	        questions: ['Insured_AlcoholWhenOption'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                list: [{
	                    value: '0',
	                    label: { en: 'เลิกดื่ม น้อยกว่า 3 ปี', th: 'เลิกดื่ม น้อยกว่า 3 ปี' }
	                }, {
	                    value: '1',
	                    label: { en: 'เลิกดื่ม มากกว่า 3 ปี', th: 'เลิกดื่ม มากกว่า 3 ปี' }
	                }],
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_SmokeFlag'],
	        questions: ['Insured_SmokeFlag'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'SmokeEver' }, { value: 'N', label: 'SmokeNever' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_SmokeFlag'],
	        labels: ['Insured_SmokeFlag'],
	        questions: ['Insured_SmokeQuantity', 'Insured_SmokePeriod'],
	        components: ['NumPad', 'NumPad'],
	        props: {
	            0: {
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_SmokeQuantity',
	                unitLabel: 'Insured_SmokeQuantity_Mass'
	            },
	            1: {
	                value: 30,
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_SmokePeriod',
	                unitLabel: 'years_lb'
	            }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        title: ['Insured_SmokeFlag'],
	        labels: ['Insured_SmokeWithdrawn'],
	        questions: ['Insured_SmokeWithdrawn'],
	        components: ['Option'],
	        props: { 0: { initMaster: ['initYesNo'] } },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_SmokeFlag'],
	        labels: ['Insured_SmokeWithdrawnWhenOption'],
	        questions: ['Insured_SmokeWithdrawnWhenOption'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                list: [{
	                    value: '0',
	                    label: { en: 'เลิกสูบ น้อยกว่า 3 ปี', th: 'เลิกสูบ น้อยกว่า 3 ปี' }
	                }, {
	                    value: '1',
	                    label: { en: 'เลิกสูบ มากกว่า 3 ปี', th: 'เลิกสูบ มากกว่า 3 ปี' }
	                }],
	                placeholder: 'Select_Please'
	            }
	        },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Insured_Height_Weight'],
	        questions: ['Insured_Weight', 'Insured_Height'],
	        components: ['NumPad', 'NumPad'],
	        props: {
	            0: {
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_Weight',
	                unitLabel: 'Kilogram',
	                style: { width: '80%', float: 'right' }
	            },
	            1: {
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_Height',
	                unitLabel: 'Centimeter',
	                style: { width: '80%' }
	            }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HasWeightChange'],
	        questions: ['Insured_HasWeightChange'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Change' }, { value: 'N', label: 'NotChange_shrot' }],
	                placeholder: 'Select_Please',
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_WeightChangeType'],
	        questions: ['Insured_WeightChangeType'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'I', label: 'Insured_WeightChangeQuantityUp' }, { value: 'D', label: 'Insured_WeightChangeQuantityDown' }],
	                placeholder: 'Select_Please',
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_WeightChangeQuantity'],
	        questions: ['Insured_WeightChangeQuantity'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_Weight',
	                unitLabel: 'Kilogram',
	                style: { maxWidth: '70%', margin: '0 auto' }
	            }
	        },
	        hideFooter: false
	    }, {
	        // hoc: 'YesNo',
	        title: ['Insured_HasWeightChange'],
	        labels: ['Insured_WeightChangeReason'],
	        questions: ['Insured_WeightChangeReason'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{
	                    value: 1,
	                    label: { th: 'ควบคุมอาหารและออกกำลังกาย', en: 'Diet/Exercise' },
	                    Id: '1',
	                    isAdult: true
	                }, {
	                    value: 2,
	                    label: {
	                        th: 'คลอดบุตร (เฉพาะสตรี)',
	                        en: 'Gave birth (For Female only)'
	                    },
	                    Id: '2',
	                    isAdult: true
	                }, {
	                    value: 3,
	                    label: {
	                        th: 'เจริญเติบโต',
	                        en: 'Growth'
	                    },
	                    Id: '3',
	                    isAdult: false
	                }, { value: 0, label: { th: 'อื่นๆ', en: 'Another' }, Id: '0' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        title: ['Insured_HasWeightChange'],
	        labels: ['Insured_WeightChangeReason'],
	        questions: ['Insured_WeightChangeOtherReason'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_WeightChangeOtherReason' } },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HasFamilyHistory'],
	        questions: ['Insured_HasFamilyHistory'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Has' }, { value: 'N', label: 'IsNot' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: [''],
	        questions: ['Insured_FamilyHistories[i]'],
	        type: 'FamilyHistory',
	        initMaster: ['initRelationFamily', 'initIllness'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HasSpouseLiverHiv'],
	        questions: ['Insured_HasSpouseLiverHiv'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Has' }, { value: 'N', label: 'IsNot' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        isInFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HasSpouseHiv'],
	        questions: ['Insured_HasSpouseHiv'],
	        components: ['Option'],
	        props: { 0: { initMaster: ['initYesNo'] } },
	        isInFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HasSpouseLiver'],
	        questions: ['Insured_HasSpouseLiver'],
	        components: ['Option'],
	        props: { 0: { initMaster: ['initYesNo'] } },
	        isInFooter: true
	    },
	    ////Payer Health Question
	    {
	        hoc: 'YesNo',
	        labels: ['Payer_HasBeenRejected'],
	        questions: ['Payer_HasBeenRejected'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: ['Payer_Rejected'],
	        questions: ['Payer_Rejecteds[i]'],
	        type: 'RejectForm',
	        initMaster: ['initCompany'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Payer_InvolvedInNarcotics'],
	        questions: ['Payer_InvolvedInNarcotics'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Payer_DrugFlag'],
	        questions: ['Payer_DrugFlag'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'DrugEver' }, { value: 'N', label: 'DrugNever' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Payer_DrugFlag'],
	        labels: ['Payer_DrugType'],
	        questions: ['Payer_DrugType'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Drug' } },
	        hideFooter: true
	    }, {
	        title: ['Payer_DrugFlag'],
	        labels: ['Payer_DrugQuantity'],
	        questions: ['Payer_DrugQuantity'],
	        components: ['TextBox'],
	        // props: {
	        //     0: {
	        //         // type: 'number',
	        //         placeholder: 'Insured_DrugQuantity',
	        //         // title: 'Insured_DrugQuantity',
	        //         // unitLabel: ' ',
	        //         // style: { paddingLeft: '1rem' }
	        //     },
	        // },
	        hideFooter: true
	    }, {
	        title: ['Payer_DrugFlag'],
	        labels: [''],
	        questions: ['Payer_DrugFrequency', 'Payer_DrugPeriod'],
	        components: ['NumPad', 'NumPad'],
	        props: {
	            0: {
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_DrugFrequency',
	                unitLabel: 'Frequency_TimeWeek',
	                style: { paddingLeft: '1rem' }
	            },
	            1: {
	                value: 30,
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_DrugPeriod',
	                unitLabel: 'years_lb',
	                style: { paddingLeft: '1rem' }
	            }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        title: ['Payer_DrugFlag'],
	        labels: ['Payer_DrugWithdrawn'],
	        questions: ['Payer_DrugWithdrawn'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Payer_DrugFlag'],
	        labels: ['Payer_DrugWhen'],
	        questions: ['Payer_DrugWhen'],
	        components: ['TextBox'],
	        props: {
	            0: {
	                list: [{ value: 1, label: 'NotDrungLess3Y' }, { value: 2, label: 'NotDrungMore3Y' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Payer_Height_Weight'],
	        questions: ['Payer_Weight', 'Payer_Height'],
	        components: ['NumPad', 'NumPad'],
	        props: {
	            0: {
	                type: 'number',
	                placeholder: ['0'],
	                title: 'Payer_Weight',
	                unitLabel: 'Kilogram',
	                style: { width: '80%', float: 'right' }
	            },
	            1: {
	                type: 'number',
	                title: 'Payer_Height',
	                placeholder: ['0'],
	                unitLabel: 'Centimeter',
	                style: { width: '80%' }
	            }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Payer_HasWeightChange'],
	        questions: ['Payer_HasWeightChange'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Change' }, { value: 'N', label: 'NotChange_shrot' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_WeightChangeType'],
	        questions: ['Payer_WeightChangeType'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'I', label: 'Insured_WeightChangeQuantityUp' }, { value: 'D', label: 'Insured_WeightChangeQuantityDown' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        title: ['Payer_HasWeightChange'],
	        labels: ['Payer_WeightChangeQuantity'],
	        questions: ['Payer_WeightChangeQuantity'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_Weight',
	                unitLabel: 'Kilogram',
	                style: { maxWidth: '70%', margin: '0 auto' }
	            }
	        },
	        hideFooter: false
	    }, {
	        // hoc: 'YesNo',
	        title: ['Payer_HasWeightChange'],
	        labels: ['Payer_WeightChangeReason'],
	        questions: ['Payer_WeightChangeReason'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{
	                    value: 1,
	                    label: { th: 'ควบคุมอาหารและออกกำลังกาย', en: 'Diet/Exercise' },
	                    Id: '1'
	                }, {
	                    value: 2,
	                    label: {
	                        th: 'คลอดบุตร (เฉพาะสตรี)',
	                        en: 'Gave birth (For Female only)'
	                    },
	                    Id: '2'
	                }, { value: 0, label: { th: 'อื่นๆ', en: 'Another' }, Id: '0' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        title: ['Payer_HasWeightChange'],
	        labels: ['Payer_WeightChangeReason'],
	        questions: ['Payer_WeightChangeOtherReason'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_WeightChangeOtherReason' } },
	        hideFooter: true
	    },
	
	    // ////// Insured Health
	    {
	        labels: ['Insured_HasPastIllness'],
	        questions: ['Insured_HasPastIllness'],
	        type: 'MultipleOption',
	        initMaster: ['initPastIllness'],
	        hasUncheckAll: true,
	        columns: 3,
	        hideFooter: true
	    }, {
	        labels: ['Insured_HasSymptom'],
	        questions: ['Insured_HasSymptom_Main'],
	        type: 'MultipleOption',
	        initMaster: ['initSymptom'],
	        hasUncheckAll: true,
	        columns: 3,
	        hideFooter: true
	    }, {
	        labels: ['Insured_HasSymptom'],
	        labels2: ['InSixMonth'],
	        questions: ['Insured_HasSymptom_PastSixMonth'],
	        type: 'MultipleOption',
	        initMaster: ['initSymptomPastSixMonth'],
	        hasUncheckAll: true,
	        columns: 3,
	        hideFooter: true
	    }, {
	        labels: ['Insured_HasSymptom'],
	        labels2: ['ForFemale'],
	        questions: ['Insured_HasSymptom_Female'],
	        type: 'MultipleOption',
	        initMaster: ['initSymptomFemale'],
	        hasUncheckAll: true,
	        columns: 3,
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        bigLabel: ['HasDiagnosisFiveYear'],
	        labels: ['Insured_HasDiagnosis'],
	        questions: ['Insured_HasDiagnosis'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Diagnosises[i]'],
	        questions: ['Insured_Diagnosises[i]'],
	        type: 'InsuredDiagnosis',
	        initMaster: ['initDiagnosis'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        bigLabel: ['HasDiagnosisFiveYear'],
	        labels: ['Insured_HasTreatment'],
	        questions: ['Insured_HasTreatment'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Treatments[i]'],
	        questions: ['Insured_Treatments[i]'],
	        type: 'InsuredTreatment',
	        initMaster: ['initTreatment'],
	        hideFooter: true
	    }, {
	        labels: ['Insured_HasCiPastIllness'],
	        questions: ['Insured_HasCiPastIllness'],
	        type: 'MultipleOption',
	        initMaster: ['initCiPastIllness'],
	        hasUncheckAll: true,
	        columns: 3,
	        hideFooter: true
	    }, {
	        labels: ['Payer_HasPastIllness'],
	        questions: ['Payer_HasPastIllness'],
	        type: 'MultipleOption',
	        initMaster: ['initPastIllness'],
	        hasUncheckAll: true,
	        columns: 3,
	        hideFooter: true
	    }, {
	        labels: ['Payer_HasSymptom'],
	        questions: ['Payer_HasSymptom_Main'],
	        type: 'MultipleOption',
	        initMaster: ['initSymptom'],
	        hasUncheckAll: true,
	        columns: 3,
	        hideFooter: true
	    }, {
	        labels: ['Payer_HasSymptom'],
	        labels2: ['InSixMonth'],
	        questions: ['Payer_HasSymptom_PastSixMonth'],
	        type: 'MultipleOption',
	        initMaster: ['initSymptomPastSixMonth'],
	        hasUncheckAll: true,
	        columns: 3,
	        hideFooter: true
	    }, {
	        labels: ['Payer_HasSymptom'],
	        labels2: ['ForFemale'],
	        questions: ['Payer_HasSymptom_Female'],
	        type: 'MultipleOption',
	        initMaster: ['initSymptomFemale'],
	        hasUncheckAll: true,
	        columns: 3,
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        bigLabel: ['HasDiagnosisFiveYear'],
	        labels: ['Payer_HasDiagnosis'],
	        questions: ['Payer_HasDiagnosis'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_Diagnosises[i]'],
	        questions: ['Payer_Diagnosises[i]'],
	        type: 'PayerDiagnosis',
	        initMaster: ['initDiagnosis'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        bigLabel: ['HasDiagnosisFiveYear'],
	        labels: ['Payer_HasTreatment'],
	        questions: ['Payer_HasTreatment'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: [''],
	        questions: ['Payer_Treatments[i]'],
	        type: 'PayerTreatment',
	        initMaster: ['initTreatment'],
	        hideFooter: true
	    },
	    ////// FATCA
	    {
	        labels: ['Insured_IsPreferEPolicy'],
	        questions: ['Insured_IsPreferEPolicy'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Prefer' }, { value: 'N', label: 'Dont_Prefer' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        title: [''],
	        labels: ['Insured_MoreDetails'],
	        questions: ['Insured_MoreDetails'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Fillin_Please' } },
	        hideFooter: true
	    }, {
	        labels: ['Fatca_Q1'],
	        questions: ['Fatca_Q1'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Agree_Fatc_Q1' }, { value: 'N', label: 'DisAgree_Fatc_Q1' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Fatca_Q2'],
	        titleFatca: ['Fatca_Q2_Title'],
	        sublabels: ['Fatca_Q2_Details1', 'Fatca_Q2_Details2'],
	        questions: ['Fatca_Q2'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{
	                    value: 'Y',
	                    id: 0,
	                    label: 'ยินยอมและไม่มีหน้าที่เสียภาษีให้แก่กรมสรรพากรประเทศสหรัฐฯและได้แนบ (1) แบบ W-8 BEN และ (2) เอกสารประกอบ/ชี้แจงเพิ่มเติม'
	                }, {
	                    value: 'N',
	                    id: 1,
	                    label: 'ยินยอมและมีหน้าที่เสียภาษีให้แก่กรมสรรพากรประเทศสหรัฐฯและได้แนบ (1) เอกสาร W-9 BEN หรือ (2) เอกสารยืนยันการเสียภาษี'
	                }],
	                columns: 2,
	                fatca: true
	            }
	        },
	        hideFooter: true
	    },
	    ////////  4 page insert
	
	    ////Diabetes
	    {
	        hoc: 'YesNo',
	        labels: ['Insured_Diabetes_HasFamily'],
	        questions: ['Insured_Diabetes_HasFamily'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Have' }, { value: 'N', label: 'NotHave' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Diabetes_HasFamily'],
	        questions: ['Insured_Diabetes_FamiliyMember'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Diabetes_FamiliyMember' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Diabetes_Diagnosed'],
	        questions: ['Insured_Diabetes_Diagnosed'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_Please' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Diabetes_TreatmentStarted'],
	        questions: ['Insured_Diabetes_TreatmentStarted'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_Please' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Diabetes_DoctorFirstName'],
	        questions: ['Insured_Diabetes_DoctorFirstName', 'Insured_Diabetes_DoctorLastName'],
	        components: ['TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: 'fullform_fname' },
	            1: { placeholder: 'Insured_Diabetes_DoctorLastName' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Diabetes_Hospital'],
	        questions: ['Insured_Diabetes_Hospital'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_Hospital' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Diabetes_PatientId'],
	        questions: ['Insured_Diabetes_PatientId'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_IdPatient' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Diabetes_TreatmentFrequency'],
	        questions: ['Insured_Diabetes_TreatmentFrequency', 'Insured_Diabetes_TreatmentFrequencyUnit'],
	        components: ['NumPad', 'Dropdown'],
	
	        props: {
	            0: {
	                type: 'number',
	                placeholder: '0',
	                title: '',
	                unitLabel: ' ',
	                style: { paddingLeft: '16rem' }
	            },
	            1: {
	                list: [{ value: '0', label: { en: 'Day', th: 'วัน' } }, { value: '1', label: { en: 'Week', th: 'สัปดาห์' } }, { value: '2', label: { en: 'Month', th: 'เดือน' } }, { value: '3', label: { en: 'Year', th: 'ปี' } }, {
	                    value: '4',
	                    label: {
	                        en: 'Have not seen doctor in 1 year',
	                        th: 'ไม่ได้พบแพทย์มากกว่า 1 ปี'
	                    }
	                }],
	                style: { transform: 'translateY(-20px)' },
	                placeholder: 'Select_Please',
	                hideBorder: true
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: ['Insured_Diabetes_LastTreatment'],
	        questions: ['Insured_Diabetes_LastTreatment'],
	        components: ['DatePicker'],
	        props: {
	            0: { placeholder: 'Insured_Diabetes_LastTreatment' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Diabetes_Treatment'],
	        questions: ['Insured_Diabetes_Treatments'],
	        type: 'MultipleOption',
	        list: [{
	            value: 0,
	            label: 'InjectInsulin',
	            TreatmentId: 0,
	            TreatmentLabel: 'InjectInsulin'
	        }, { value: 1, label: 'TakePill', TreatmentId: 1, TreatmentLabel: 'TakePill' }, { value: 2, label: 'Another', TreatmentId: 2, TreatmentLabel: 'Another' }],
	        columns: 2,
	        hideFooter: true
	    }, {
	        title: ['Insured_Diabetes_Treatment'],
	        labels: ['TakePill'],
	        questions: ['Insured_Diabetes_Treatments_TreatmentDetail_1'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Diabetes_Treatments_TreatmentDetail_1' }
	        },
	        hideFooter: true
	    }, {
	        title: ['Insured_Diabetes_Treatment'],
	        labels: ['Another'],
	        questions: ['Insured_Diabetes_Treatments_TreatmentDetail_2'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Diabetes_Treatments_TreatmentDetail_2' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Diabetes_RoutineUrineTest'],
	        questions: ['Insured_Diabetes_RoutineUrineTest'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'สม่ำเสมอ' }, { value: 'N', label: 'ไม่สม่ำเสมอ' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Diabetes_LastUrineTest'],
	        questions: ['Insured_Diabetes_LastUrineTest'],
	        components: ['DatePicker'],
	        props: {
	            0: { placeholder: 'Insured_Diabetes_LastUrineTest' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Diabetes_UrineTestResult'],
	        questions: ['Insured_Diabetes_UrineTestResult'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 0, label: 'UrineTestResultDetail_FoundAnother' }, { value: 1, label: 'UrineTestResultDetail_FoundEver' }, { value: 2, label: 'UrineTestResultDetail_Sometime' }, { value: 3, label: 'UrineTestResultDetail_NotFound' }],
	                columns: 2,
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        title: ['Insured_Diabetes_UrineTestResult'],
	        labels: ['Insured_Diabetes_UrineTestResultDetail'],
	        questions: ['Insured_Diabetes_UrineTestResultDetail'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_UrineTest' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Diabetes_BloodTest'],
	        questions: ['Insured_Diabetes_BloodTest'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_Diabetes_BloodTest_title'],
	        labels: ['Insured_Diabetes_BloodTestResult'],
	        questions: ['Insured_Diabetes_BloodTestResult'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_Diabetes_BloodTestResult' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Diabetes_Symptoms'],
	        questions: ['Insured_Diabetes_Symptoms'],
	        type: 'MultipleOption',
	        initMaster: ['initDiabetes'],
	        columns: 3,
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Diabetes_HasCxr'],
	        questions: ['Insured_Diabetes_HasCxr'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_Diabetes_HasCxr_title'],
	        labels: ['Insured_Diabetes_CxrDate'],
	        questions: ['Insured_Diabetes_CxrDate'],
	        components: ['DatePicker'],
	        props: { 0: { placeholder: 'Select_Please' } },
	        // isInFooter: true,
	        hideFooter: true
	    }, {
	        title: ['Insured_Diabetes_HasCxr_title'],
	        hoc: 'YesNo',
	        labels: ['Insured_Diabetes_CxrResultNormal'],
	        questions: ['Insured_Diabetes_CxrResultNormal'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Normal' }, { value: 'N', label: 'Abnormal' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_Diabetes_HasCxr_title'],
	        labels: ['Insured_Diabetes_CxrHospital'],
	        questions: ['Insured_Diabetes_CxrHospital'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_Hospital' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Diabetes_HasEkg'],
	        questions: ['Insured_Diabetes_HasEkg'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_Diabetes_HasEkg_title'],
	        labels: ['Insured_Diabetes_EkgDate'],
	        questions: ['Insured_Diabetes_EkgDate'],
	        components: ['DatePicker'],
	        props: { 0: { placeholder: 'Select_Please' } },
	        // isInFooter: true,
	        hideFooter: true
	    }, {
	        title: ['Insured_Diabetes_HasEkg_title'],
	        hoc: 'YesNo',
	        labels: ['Insured_Diabetes_EkgResultNormal'],
	        questions: ['Insured_Diabetes_EkgResultNormal'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Normal' }, { value: 'N', label: 'Abnormal' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_Diabetes_HasEkg_title'],
	        labels: ['Insured_Diabetes_EkgHospital'],
	        questions: ['Insured_Diabetes_EkgHospital'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_HospitalClinic' }
	        },
	        hideFooter: true
	    },
	
	    //////Hbp
	    {
	        labels: ['Insured_Hbp_TreatmentStartedDate'],
	        questions: ['Insured_Hbp_TreatmentStartedDate'],
	        components: ['DatePicker'],
	        props: { 0: { placeholder: 'Fillin_Date' } },
	        // isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_DiagnosedDate'],
	        questions: ['Insured_Hbp_DiagnosedDate'],
	        components: ['DatePicker'],
	        props: { 0: { placeholder: 'Fillin_Date' } },
	        // isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_CurrentDoctorName'],
	        questions: ['Insured_Hbp_DoctorFirstName', 'Insured_Hbp_DoctorLastName'],
	        components: ['TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: 'fullform_fname' },
	            1: { placeholder: 'Insured_Diabetes_DoctorLastName' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_Hospital'],
	        questions: ['Insured_Hbp_Hospital'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_Hospital' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_Patient'],
	        questions: ['Insured_Hbp_PatientId'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_IdPatient' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_PretreatedBp'],
	        questions: ['Insured_Hbp_PretreatedBp'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_Hbp_PretreatedBp' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_PretreatedBpDate'],
	        questions: ['Insured_Hbp_PretreatedBpDate'],
	        components: ['DatePicker'],
	        props: { 0: { placeholder: 'Insured_Hbp_LastBpDate' } },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_LastBp'],
	        questions: ['Insured_Hbp_LastBp'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_Hbp_PretreatedBp' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_LastBpDate'],
	        questions: ['Insured_Hbp_LastBpDate'],
	        components: ['DatePicker'],
	        props: { 0: { placeholder: 'Insured_Hbp_PretreatedBpDate' } },
	        // isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_Medicine'],
	        questions: ['Insured_Hbp_Medicine'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_Hbp_Medicine' } },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hbp_CurrentInTreatment'],
	        questions: ['Insured_Hbp_CurrentInTreatment'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'InTreatment' }, { value: 'N', label: 'NotInTreatment' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_CurrentDoctorName'],
	        questions: ['Insured_Hbp_CurrentDoctorName'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hbp_CurrentDoctorName' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_CurrentHospital'],
	        questions: ['Insured_Hbp_CurrentHospital'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hbp_CurrentHospital' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_CurrentLastVisit'],
	        questions: ['Insured_Hbp_CurrentLastVisit'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_Hbp_CurrentLastVisit' } },
	        // isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_CurrentFirstVisitDate'],
	        questions: ['Insured_Hbp_CurrentFirstVisitDate'],
	        components: ['DatePicker'],
	        props: { 0: { placeholder: 'Insured_Hbp_CurrentFirstVisitDate' } },
	        // isInFooter: true,
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hbp_HasCxr'],
	        questions: ['Insured_Hbp_HasCxr'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_CxrDate'],
	        questions: ['Insured_Hbp_CxrDate'],
	        components: ['DatePicker'],
	        props: { 0: { placeholder: 'Insured_Hbp_CxrDate' } },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_CxrResultNormal'],
	        questions: ['Insured_Hbp_CxrResultNormal'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Normal' }, { value: 'N', label: 'Abnormal' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_CxrHospital'],
	        questions: ['Insured_Hbp_CxrHospital'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_HospitalClinic' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hbp_HasEkg'],
	        questions: ['Insured_Hbp_HasEkg'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_EkgDate'],
	        questions: ['Insured_Hbp_EkgDate'],
	        components: ['DatePicker'],
	        props: { 0: { placeholder: 'Insured_Hbp_EkgDate' } },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hbp_EkgResultNormal'],
	        questions: ['Insured_Hbp_EkgResultNormal'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Normal' }, { value: 'N', label: 'Abnormal' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_EkgHospital'],
	        questions: ['Insured_Hbp_EkgHospital'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hbp_EkgHospital' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_Recommendation'],
	        questions: ['Insured_Hbp_Recommendation'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hepatitis_Diagnoseds_Other' }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hbp_SmokeFlag'],
	        questions: ['Insured_Hbp_SmokeFlag'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'SmokeEver' }, { value: 'N', label: 'SmokeNever' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_SmokeQuantity'],
	        questions: ['Insured_Hbp_SmokeQuantity'],
	        components: ['NumPad'],
	        props: {
	            0: (_ = {
	                placeholder: 'Insured_Hbp_SmokeQuantity',
	                type: 'number'
	            }, _defineProperty(_, 'placeholder', '0'), _defineProperty(_, 'title', ''), _defineProperty(_, 'unitLabel', 'Insured_SmokeQuantity_Mass'), _defineProperty(_, 'style', { maxWidth: '40%', marginLeft: '30%' }), _)
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_SmokePeriod'],
	        questions: ['Insured_Hbp_SmokePeriod'],
	        components: ['NumPad'],
	        props: {
	            0: (_2 = {
	                placeholder: 'Insured_Hbp_SmokePeriod',
	                type: 'number'
	            }, _defineProperty(_2, 'placeholder', '0'), _defineProperty(_2, 'title', ''), _defineProperty(_2, 'unitLabel', 'years_lb'), _defineProperty(_2, 'style', { maxWidth: '30%', marginLeft: '35%' }), _2)
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_SmokeQuitDate'],
	        questions: ['Insured_Hbp_SmokeQuitDate'],
	        components: ['DatePicker'],
	        props: { 0: { placeholder: 'Insured_Hbp_SmokeQuitDate' } },
	        isInFooter: true,
	        hideFooter: true
	    },
	    ///////////  Hepatitis
	
	    {
	        labels: ['Insured_Hepatitis_DiagnosedDate'],
	        questions: ['Insured_Hepatitis_DiagnosedDate'],
	        components: ['DatePicker'],
	        props: { 0: { placeholder: 'Insured_Hepatitis_DiagnosedDate' } },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hepatitis_Jaundice'],
	        questions: ['Insured_Hepatitis_Jaundice'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hepatitis_Nausea'],
	        questions: ['Insured_Hepatitis_Nausea'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hepatitis_Heptatomegaly'],
	        questions: ['Insured_Hepatitis_Heptatomegaly'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hepatitis_HepatoFrom'],
	        questions: ['Insured_Hepatitis_HepatoFrom'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 0, label: 'การตรวจร่างกาย' }, { value: 1, label: 'การทำอัลตราซาวด์' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hepatitis_AbnormalLiver'],
	        questions: ['Insured_Hepatitis_AbnormalLiver'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hepatitis_BloodTest'],
	        questions: ['Insured_Hepatitis_BloodTest'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_Hepatitis_BloodTest'],
	        labels: ['Insured_Hepatitis_BloodTestDate'],
	        questions: ['Insured_Hepatitis_BloodTestDate'],
	        components: ['DatePicker'],
	        props: { 0: { placeholder: 'Insured_Hepatitis_BloodTestDate' } },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        title: ['Insured_Hepatitis_BloodTest'],
	        labels: ['Insured_Hepatitis_BloodTestReason'],
	        questions: ['Insured_Hepatitis_BloodTestReason'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hepatitis_Diagnoseds_Other' }
	        },
	        hideFooter: true
	    }, {
	        title: ['Insured_Hepatitis_BloodTest'],
	        labels: ['Insured_Hepatitis_BloodTestHospital'],
	        questions: ['Insured_Hepatitis_BloodTestHospital'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hepatitis_Diagnoseds_Other' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hepatitis_UltrasoundTest'],
	        questions: ['Insured_Hepatitis_UltrasoundTest'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_Hepatitis_UltrasoundTest'],
	        labels: ['Insured_Hepatitis_UltrasoundTestDate'],
	        questions: ['Insured_Hepatitis_UltrasoundTestDate'],
	        components: ['DatePicker'],
	        props: { 0: { placeholder: 'Insured_Hepatitis_UltrasoundTestDate' } },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        title: ['Insured_Hepatitis_UltrasoundTest'],
	        labels: ['Insured_Hepatitis_UltrasoundTestReason'],
	        questions: ['Insured_Hepatitis_UltrasoundTestReason'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_Hepatitis_Diagnoseds_Other' } },
	        hideFooter: true
	    }, {
	        title: ['Insured_Hepatitis_UltrasoundTest'],
	        labels: ['Insured_Hepatitis_UltrasoundHospital'],
	        questions: ['Insured_Hepatitis_UltrasoundHospital'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_Hepatitis_Diagnoseds_Other' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hepatitis_Diagnoseds_DiagnosedCause'],
	        questions: ['Insured_Hepatitis_Diagnoseds'],
	        type: 'MultipleOption',
	        list: [{
	            value: 0,
	            label: 'ไวรัสตับอักเสบเอ',
	            DiagnosedCauseId: 0,
	            DiagnosedCauseFlag: 'Y',
	            DiagnosedCauseLabel: 'ไวรัสตับอักเสบเอ'
	        }, {
	            value: 1,
	            label: 'ไวรัสตับอักเสบบี',
	            DiagnosedCauseId: 1,
	            DiagnosedCauseFlag: 'Y',
	            DiagnosedCauseLabel: 'ไวรัสตับอักเสบบี'
	        }, {
	            value: 2,
	            label: 'ไวรัสตับอักเสบซี',
	            DiagnosedCauseId: 2,
	            DiagnosedCauseFlag: 'Y',
	            DiagnosedCauseLabel: 'ไวรัสตับอักเสบซี'
	        }, {
	            value: 3,
	            label: 'การดื่มสุรา',
	            DiagnosedCauseId: 3,
	            DiagnosedCauseFlag: 'Y',
	            DiagnosedCauseLabel: 'การดื่มสุรา'
	        }, {
	            value: 4,
	            label: 'การใช้ยา',
	            DiagnosedCauseId: 4,
	            DiagnosedCauseFlag: 'Y',
	            DiagnosedCauseLabel: 'การใช้ยา'
	        }, {
	            value: 5,
	            label: 'อื่นๆ',
	            DiagnosedCauseId: 5,
	            DiagnosedCauseFlag: 'Y',
	            DiagnosedCauseLabel: 'อื่นๆ'
	        }],
	        columns: 3,
	        hideFooter: true
	    }, {
	        title: ['Insured_Hepatitis_Diagnoseds_DiagnosedCause'],
	        labels: ['Insured_Hepatitis_Diagnoseds_Other'],
	        questions: ['Insured_Hepatitis_Diagnoseds_Other'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_Hepatitis_Diagnoseds_Other' } },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hepatitis_AlcoholFlag'],
	        questions: ['Insured_Hepatitis_AlcoholFlag'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hepatitis_AlcoholQuantity'],
	        questions: ['Insured_Hepatitis_AlcoholQuantity'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hepatitis_AlcoholQuantity' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hepatitis_AlcoholWithdrawnWhen'],
	        questions: ['Insured_Hepatitis_AlcoholWithdrawnWhen'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hepatitis_AlcoholWithdrawnWhen' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hepatitis_AlcoholWithdrawnReason'],
	        questions: ['Insured_Hepatitis_AlcoholWithdrawnReason'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hepatitis_AlcoholWithdrawnReason' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hepatitis_CurrentLastVisit'],
	        questions: ['Insured_Hepatitis_CurrentLastVisit'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hepatitis_CurrentLastVisit' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hepatitis_Reason'],
	        questions: ['Insured_Hepatitis_Reason'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hepatitis_Reason' }
	        },
	        hideFooter: true
	    },
	
	    ////////// Tumor
	    {
	        labels: ['Insured_Tumor_Location'],
	        questions: ['Insured_Tumor_Location'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_Location' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Tumor_DiscoveryMethod'],
	        questions: ['Insured_Tumor_DiscoveryMethod'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_DiscoveryMethod' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Tumor_DiscoveryDate'],
	        questions: ['Insured_Tumor_DiscoveryDate'],
	        components: ['DatePicker'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_DiscoveryDate' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Tumor_DiscoveryHospital'],
	        questions: ['Insured_Tumor_DiscoveryHospital'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_DiscoveryHospital' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Tumor_DiagnosedAsMalicious'],
	        questions: ['Insured_Tumor_DiagnosedAsMalicious'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'HasMalicious' }, { value: 'N', label: 'NotHasMalicious' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Tumor_DiagnosedDetail'],
	        questions: ['Insured_Tumor_DiagnosedDetail'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_DiagnosedDetail' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Tumor_BeenOperated'],
	        questions: ['Insured_Tumor_BeenOperated'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Tumor_Followup'],
	        questions: ['Insured_Tumor_Followup'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Have' }, { value: 'N', label: 'NotHave' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Tumor_FollowupDate'],
	        questions: ['Insured_Tumor_FollowupDate'],
	        components: ['DatePicker'],
	        props: { 0: { placeholder: 'Select_Please' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Tumor_Treatment'],
	        questions: ['Insured_Tumor_Treatments'],
	        type: 'MultipleOption',
	        list: [{
	            value: 0,
	            label: 'Radioisotope_therapy',
	            TreatmentId: '0',
	            TreatmentLabel: 'Radioisotope_therapy'
	        }, {
	            value: 1,
	            label: 'Chemo_therapy',
	            TreatmentId: '1',
	            TreatmentLabel: 'Chemo_therapy'
	        }, {
	            value: 2,
	            label: 'Insured_Tumor_OtherTreatmentDetails',
	            TreatmentId: '2',
	            TreatmentLabel: 'Insured_Tumor_OtherTreatmentDetails'
	        }],
	        columns: 2,
	        hideFooter: true
	    }, {
	        title: ['Insured_Tumor_Treatments'],
	        labels: ['Radioisotope_therapy'],
	        questions: ['Insured_Tumor_Treatments_TreatmentStarted_Radio'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_Treatments_TreatmentStarted_Radio' }
	        },
	        hideFooter: true
	    }, {
	        title: ['Insured_Tumor_Treatments'],
	        labels: ['Radioisotope_therapy'],
	        questions: ['Insured_Tumor_Treatments_LastTreatment_Radio'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_Treatments_LastTreatment_Radio' }
	        },
	        hideFooter: true
	    }, {
	        title: ['Insured_Tumor_Treatments'],
	        labels: ['Chemo_therapy'],
	        questions: ['Insured_Tumor_Treatments_TreatmentStarted_Chemo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_Treatments_TreatmentStarted_Chemo' }
	        },
	        hideFooter: true
	    }, {
	        title: ['Insured_Tumor_Treatments'],
	        labels: ['Chemo_therapy'],
	        questions: ['Insured_Tumor_Treatments_LastTreatment_Chemo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_Treatments_LastTreatment_Chemo' }
	        },
	        hideFooter: true
	    }, {
	        title: ['Insured_Tumor_Treatments'],
	        labels: ['Insured_Tumor_OtherTreatmentDetails'],
	        questions: ['Insured_Tumor_OtherTreatmentDetails'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_OtherTreatmentDetails' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Tumor_SpecialTreatment'],
	        questions: ['Insured_Tumor_SpecialTreatment'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Have' }, { value: 'N', label: 'NotHave' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_Tumor_SpecialTreatment'],
	        labels: ['Insured_Tumor_SpecialTreatmentDetails'],
	        questions: ['Insured_Tumor_SpecialTreatmentDetails'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_SpecialTreatmentDetails' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Tumor_Recurrence'],
	        questions: ['Insured_Tumor_Recurrence'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Have' }, { value: 'N', label: 'NotHave' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_Tumor_Recurrence'],
	        labels: ['Insured_Tumor_RecurredWhen'],
	        questions: ['Insured_Tumor_RecurredWhen'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_RecurredWhen' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Tumor_DischargedWhen'],
	        questions: ['Insured_Tumor_DischargedWhen'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_DischargedWhen' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['LastedPage'],
	        questions: ['LastedPage'],
	        type: 'LastedPage',
	        hideFooter: true
	    }],
	    pa: [{
	        labels: ['Insured_IdType'],
	        questions: ['Insured_IdType'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initIdent'],
	                autoInitMaster: false,
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: true
	        // need image of label
	    }, {
	        labels: ['Insured_IdNo'],
	        questions: ['Insured_IdNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X - X X X X - X X X X X - X X - X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_LaserCode'],
	        questions: ['Insured_LaserCode'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_LaserCode' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_ThName'],
	        questions: ['Insured_ThName_Title', 'Insured_ThName_First', 'Insured_ThName_Last'],
	        components: ['Dropdown', 'TextBox', 'TextBox'],
	        props: {
	            0: {
	                initMaster: ['initTitle'],
	                autoInitMaster: false,
	                placeholder: 'Insured_ThName_Title',
	                setWidth: { width: '70%' }
	            },
	            1: { placeholder: 'Insured_ThName_First' },
	            2: { placeholder: 'Insured_ThName_Last' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_BirthDate'],
	        questions: ['Insured_BirthDate'],
	        components: ['DatePicker'],
	        props: {
	            0: { placeholder: 'Select_Please', maxDate: moment().format('YYYY-MM-DD') }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_FormerName'],
	        questions: ['Insured_FormerName_First', 'Insured_FormerName_Last'],
	        components: ['TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: 'Insured_FormerName_First' },
	            1: { placeholder: 'Insured_FormerName_Last' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Nationality'],
	        questions: ['Insured_Nationality'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initNationality'],
	                autoInitMaster: false,
	                placeholder: 'Select_Nationality'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_Province'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initProvince'],
	                autoInitMaster: false,
	                placeholder: 'Insured_CurrentAddress_Province'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_District'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initDistrict', 'Insured_CurrentAddress_Province'],
	                autoInitMaster: false,
	                placeholder: 'Insured_CurrentAddress_District',
	                extraLabel: [{
	                    value: 'Insured_CurrentAddress_Province',
	                    label: 'Insured_CurrentAddress_Province'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_SubDistrict'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initSubDistrict', 'Insured_CurrentAddress_Province', 'Insured_CurrentAddress_District'],
	                autoInitMaster: false,
	                placeholder: 'Insured_CurrentAddress_SubDistrict',
	                extraLabel: [{
	                    value: 'Insured_CurrentAddress_Province',
	                    label: 'Insured_CurrentAddress_Province'
	                }, {
	                    value: 'Insured_CurrentAddress_District',
	                    label: 'Insured_CurrentAddress_District'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_HouseNo', 'Insured_CurrentAddress_Mooban', 'Insured_CurrentAddress_Arkan'],
	        components: ['TextBox', 'TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: ['Insured_CurrentAddress_HouseNo'] },
	            1: { placeholder: ['Insured_CurrentAddress_Mooban'] },
	            2: { placeholder: ['Insured_CurrentAddress_Arkan'] }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_Moo', 'Insured_CurrentAddress_Soi', 'Insured_CurrentAddress_Street'],
	        components: ['TextBox', 'TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: ['Insured_CurrentAddress_Moo'] },
	            1: { placeholder: ['Insured_CurrentAddress_Soi'] },
	            2: { placeholder: ['Insured_CurrentAddress_Street'] }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        title: ['Insured_CurrentAddress_Postal'],
	        questions: ['Insured_CurrentAddress_Postal'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: '_ _ _ _ _',
	                char: '_'
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_CurrentAddress_TelNo'],
	        title: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_TelNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	        //Show popup Ref Address
	    }, {
	        labels: ['Insured_MobileNo'],
	        questions: ['Insured_MobileNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Email'],
	        questions: ['Insured_Email'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Email' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Occupation_Occupation'],
	        questions: ['Insured_Occupation1_Occupation'],
	        components: ['JobDropdown'],
	        props: {
	            0: {
	                initMaster: ['initOccupation'],
	                autoInitMaster: false,
	                placeholder: 'Occupation_Search'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Responsibility'],
	        questions: ['Insured_Occupation1_Responsibility'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: ['Insured_Occupation_Responsibility'] } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Income'],
	        questions: ['Insured_Occupation1_Income'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'currency',
	                placeholder: 'Insured_Occupation_Income',
	                unitLabel: 'Baht',
	                style: { maxWidth: '70%', margin: '0 auto' },
	                maxLength: 9
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Occupation_WorkPlace'],
	        questions: ['Insured_Occupation1_WorkPlace'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: ['Specify_Company'] } },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HasAnotherOccupation'],
	        questions: ['Insured_HasAnotherOccupation'],
	        components: ['Option'],
	        props: { 0: { initMaster: ['initYesNo'], placeholder: 'Select_Please' } },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Occupation2_Occupation'],
	        questions: ['Insured_Occupation2_Occupation'],
	        components: ['JobDropdown'],
	        props: {
	            0: {
	                initMaster: ['initOccupation'],
	                autoInitMaster: false,
	                placeholder: 'Occupation_Search'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Responsibility'],
	        questions: ['Insured_Occupation2_Responsibility'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Responsibility' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Income'],
	        questions: ['Insured_Occupation2_Income'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'currency',
	                placeholder: '0',
	                unitLabel: 'Baht',
	                style: { maxWidth: '70%', margin: '0 auto' },
	                maxLength: 9
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Occupation_WorkPlace'],
	        questions: ['Insured_Occupation2_WorkPlace'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Company' } },
	        hideFooter: true
	    },
	    //// Payer Info
	    {
	        labels: ['Payer_RelationToInsured'],
	        questions: ['Payer_RelationToInsured'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initPayerRelationJuv'],
	                placeholder: 'Payer_RelationToInsured'
	            }
	        },
	        hideFooter: true
	    }, {
	        title: ['Payer_RelationToInsured'],
	        labels: ['Another'],
	        questions: ['Payer_RelationOtherToInsured'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'ระบุความสัมพันธ์กับผู้เอาประกัน' } },
	        hideFooter: false
	    }, {
	        labels: ['Payer_IdNo'],
	        questions: ['Payer_IdNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'IDcard',
	                format: 'X - X X X X - X X X X X - X X - X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_ThName'],
	        questions: ['Payer_ThName_Title', 'Payer_ThName_First', 'Payer_ThName_Last'],
	        components: ['Dropdown', 'TextBox', 'TextBox'],
	        props: {
	            0: {
	                initMaster: ['initTitle'],
	                autoInitMaster: false,
	                placeholder: 'Payer_ThName_Title',
	                setWidth: { width: '70%' }
	            },
	            1: { placeholder: 'Payer_ThName_First' },
	            2: { placeholder: 'Payer_ThName_Last' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_BirthDate'],
	        questions: ['Payer_BirthDate'],
	        components: ['DatePicker'],
	        props: { 0: { placeholder: 'Select_Please', maxDate: moment().format('YYYY-MM-DD') } },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Payer_Nationality'],
	        questions: ['Payer_Nationality'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initNationality'],
	                autoInitMaster: false,
	                placeholder: 'Select_Nationality'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_Province'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initProvince'],
	                autoInitMaster: false,
	                placeholder: 'Payer_CurrentAddress_Province'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_District'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initDistrict', 'Payer_CurrentAddress_Province'],
	                autoInitMaster: false,
	                placeholder: 'Payer_CurrentAddress_District',
	                extraLabel: [{
	                    value: 'Payer_CurrentAddress_Province',
	                    label: 'Payer_CurrentAddress_Province'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_SubDistrict'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initSubDistrict', 'Payer_CurrentAddress_Province', 'Payer_CurrentAddress_District'],
	                autoInitMaster: false,
	                placeholder: 'Payer_CurrentAddress_SubDistrict',
	                extraLabel: [{
	                    value: 'Payer_CurrentAddress_Province',
	                    label: 'Payer_CurrentAddress_Province'
	                }, {
	                    value: 'Payer_CurrentAddress_District',
	                    label: 'Payer_CurrentAddress_District'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_HouseNo', 'Payer_CurrentAddress_Mooban', 'Payer_CurrentAddress_Arkan'],
	        components: ['TextBox', 'TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: 'Payer_CurrentAddress_HouseNo' },
	            1: { placeholder: 'Payer_CurrentAddress_Mooban' },
	            2: { placeholder: 'Payer_CurrentAddress_Arkan' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_Moo', 'Payer_CurrentAddress_Soi', 'Payer_CurrentAddress_Street'],
	        components: ['TextBox', 'TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: 'Payer_CurrentAddress_Moo' },
	            1: { placeholder: 'Payer_CurrentAddress_Soi' },
	            2: { placeholder: 'Payer_CurrentAddress_Street' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['fullform_postcode'],
	        title: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_Postal'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: '_ _ _ _ _',
	                char: '_'
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_CurrentAddress_TelNo'],
	        title: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_TelNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_MobileNo'],
	        questions: ['Payer_MobileNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_Email'],
	        questions: ['Payer_Email'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_Email' }
	        },
	        hideFooter: false
	    }, {
	        type: 'Product',
	        questions: ['ProResult'],
	        labels: [''],
	        hideFooter: true
	    }, {
	        labels: ['Beneficiaries'],
	        questions: ['Beneficiaries[i]'],
	        type: 'Beneficiary',
	        initMaster: ['initBeneficiaryRelationship'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HasExistingPolicies'],
	        questions: ['Insured_HasExistingPolicies'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Have' }, { value: 'N', label: 'NotHave' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: ['Insured_ExistingPolicies'],
	        questions: ['Insured_ExistingPolicies[i]'],
	        type: 'Accident',
	        initMaster: ['initCompany'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_InvolvedInNarcotics'],
	        questions: ['Insured_InvolvedInNarcotics'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_DrugFlag'],
	        questions: ['Insured_DrugFlag'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Drung_Had' }, { value: 'N', label: 'Drung_NeverHad' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HealthyFlag'],
	        questions: ['Insured_HealthyFlag'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['LastedPage'],
	        questions: ['LastedPage'],
	        type: 'LastedPage',
	        hideFooter: true
	    }]
	};

/***/ },
/* 53 */
/***/ function(module, exports) {

	'use strict';
	
	var _ref, _, _2;
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	module.exports = {
	    common: [
	    ////// Insured Info
	
	    {
	        labels: ['Insured_IdType'],
	        questions: ['Insured_IdType'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initIdent'],
	                autoInitMaster: false,
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_IdNo'],
	        questions: ['Insured_IdNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'IDcard',
	                format: 'X - X X X X - X X X X X - X X - X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_LaserCode'],
	        questions: ['Insured_LaserCode'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_LaserCode' } },
	        hideFooter: false
	    }, {
	        labels: ['Insured_IdExpiryDate'],
	        questions: ['Insured_IdExpiryDate'],
	        components: ['DatepickerBrowser'],
	        props: { 0: { placeholder: 'Select_Please' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_ThName'],
	        questions: ['Insured_ThName_Title'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initTitle'],
	                autoInitMaster: false,
	                placeholder: 'Insured_ThName_Title',
	                setWidth: { width: '70%' }
	            }
	        }
	    }, {
	        labels: ['Insured_ThName'],
	        questions: ['Insured_ThName_First'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_ThName_First' }
	        }
	    }, {
	        labels: ['Insured_ThName'],
	        questions: ['Insured_ThName_Last'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_ThName_Last' }
	        }
	    }, {
	        labels: ['Insured_BirthDate'],
	        questions: ['Insured_BirthDate'],
	        components: ['DatepickerBrowser'],
	        props: {
	            0: { placeholder: 'Select_Please' }
	        },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Insured_FormerName'],
	        questions: ['Insured_FormerName_First'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_FormerName_First' }
	        }
	    }, {
	        labels: ['Insured_FormerName'],
	        questions: ['Insured_FormerName_Last'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_FormerName_Last' }
	        }
	    }, {
	        labels: ['Insured_Nationality'],
	        questions: ['Insured_Nationality'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initNationality'],
	                autoInitMaster: false,
	                placeholder: 'Select_Nationality'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Race'],
	        questions: ['Insured_Race'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initNationality'],
	                autoInitMaster: false,
	                placeholder: 'Insured_Race'
	            }
	        },
	        hideFooter: true
	    }, {
	        // hoc: 'Marital',
	        labels: ['Insured_MaritalStatus'],
	        questions: ['Insured_MaritalStatus'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initMarital'],
	                autoInitMaster: false,
	                placeholder: 'Select_Please',
	                isInFooter: true
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_SpouseName'],
	        questions: ['Insured_SpouseName_Title'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initTitle'],
	                autoInitMaster: false,
	                placeholder: 'Insured_SpouseName_Title',
	                setWidth: { width: '70%' }
	            }
	        }
	    }, {
	        labels: ['Insured_SpouseName'],
	        questions: ['Insured_SpouseName_First'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_SpouseName_First' }
	        }
	    }, {
	        labels: ['Insured_SpouseName'],
	        questions: ['Insured_SpouseName_Last'],
	        components: ['TextBox'],
	        props: {
	            2: { placeholder: 'Insured_SpouseName_Last' }
	        }
	    }, {
	        hoc: 'YesNo',
	        labels: ['IsStudent'],
	        questions: ['Insured_IsStudent'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'StillStudy' }, { value: 'N', label: 'NotStudy' }],
	                placeholder: 'Select_Please',
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_StudyYear'],
	        questions: ['Insured_StudyYear'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Fillin_StudyYear' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_SchoolName'],
	        questions: ['Insured_SchoolName'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Fillin_School' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_FatherName'],
	        questions: ['Insured_FatherName_Title'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initTitle'],
	                autoInitMaster: false,
	                placeholder: 'Insured_FatherName_Title',
	                setWidth: { width: '70%' }
	            }
	        }
	    }, {
	        labels: ['Insured_FatherName'],
	        questions: ['Insured_FatherName_First'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_FatherName_First' }
	        }
	    }, {
	        labels: ['Insured_FatherName'],
	        questions: ['Insured_FatherName_Last'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_FatherName_Last' }
	        }
	    }, {
	        labels: ['Insured_IsFatherAlive'],
	        questions: ['Insured_IsFatherAlive'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'StillAlive' }, { value: 'N', label: 'Die' }],
	                placeholder: 'Select_Please',
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_MotherName'],
	        questions: ['Insured_MotherName_Title'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initTitle'],
	                autoInitMaster: false,
	                placeholder: 'Insured_MotherName_Title',
	                setWidth: { width: '70%' }
	            }
	        }
	    }, {
	        labels: ['Insured_MotherName'],
	        questions: ['Insured_MotherName_First'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_MotherName_First' }
	        }
	    }, {
	        labels: ['Insured_MotherName'],
	        questions: ['Insured_MotherName_Last'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_MotherName_Last' }
	        }
	    }, {
	        labels: ['Insured_IsMotherAlive'],
	        questions: ['Insured_IsMotherAlive'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'StillAlive' }, { value: 'N', label: 'Die' }],
	                placeholder: 'Select_Please',
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_Province'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initProvince'],
	                autoInitMaster: false,
	                placeholder: 'Insured_CurrentAddress_Province'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_District'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initDistrict', 'Insured_CurrentAddress_Province'],
	                autoInitMaster: false,
	                placeholder: 'Insured_CurrentAddress_District',
	                extraLabel: [{
	                    value: 'Insured_CurrentAddress_Province',
	                    label: 'Insured_CurrentAddress_Province'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_SubDistrict'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initSubDistrict', 'Insured_CurrentAddress_Province', 'Insured_CurrentAddress_District'],
	                autoInitMaster: false,
	                placeholder: 'Insured_CurrentAddress_SubDistrict',
	                extraLabel: [{
	                    value: 'Insured_CurrentAddress_Province',
	                    label: 'Insured_CurrentAddress_Province'
	                }, {
	                    value: 'Insured_CurrentAddress_District',
	                    label: 'Insured_CurrentAddress_District'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_HouseNo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Insured_CurrentAddress_HouseNo'] }
	        }
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_Mooban'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Insured_CurrentAddress_Mooban'] }
	        }
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_Arkan'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Insured_CurrentAddress_Arkan'] }
	        }
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_Moo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Insured_CurrentAddress_Moo'] }
	        }
	    }, {
	        labels: ['Insured_CurrentAddress_Soi'],
	        questions: ['Insured_CurrentAddress_Soi'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Insured_CurrentAddress_Soi'] }
	        }
	    }, {
	        labels: ['Insured_CurrentAddress_Street'],
	        questions: ['Insured_CurrentAddress_Street'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Insured_CurrentAddress_Street'] }
	        }
	    }, {
	        labels: ['Insured_CurrentAddress_Postal'],
	        title: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_Postal'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: '_ _ _ _ _',
	                char: '_'
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_CurrentAddress_TelNo'],
	        title: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_TelNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_MobileNo'],
	        questions: ['Insured_MobileNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Email'],
	        questions: ['Insured_Email'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Email' }
	        },
	        hideFooter: false
	    }, {
	        copyProvince: true,
	        labels: ['Insured_RegAddress'],
	        questions: ['Insured_RegAddress_Province'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initProvince'],
	                autoInitMaster: false,
	                placeholder: 'Insured_RegAddress_Province'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_RegAddress'],
	        questions: ['Insured_RegAddress_District'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initDistrict', 'Insured_RegAddress_Province'],
	                autoInitMaster: false,
	                placeholder: 'Insured_RegAddress_District',
	                extraLabel: [{
	                    value: 'Insured_RegAddress_Province',
	                    label: 'Insured_RegAddress_Province'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_RegAddress'],
	        questions: ['Insured_RegAddress_SubDistrict'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initSubDistrict', 'Insured_RegAddress_Province', 'Insured_RegAddress_District'],
	                autoInitMaster: false,
	                placeholder: 'Insured_RegAddress_SubDistrict',
	                extraLabel: [{
	                    value: 'Insured_RegAddress_Province',
	                    label: 'Insured_RegAddress_Province'
	                }, {
	                    value: 'Insured_RegAddress_District',
	                    label: 'Insured_RegAddress_District'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_RegAddress'],
	        questions: ['Insured_RegAddress_HouseNo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_RegAddress_HouseNo' }
	        }
	    }, {
	        labels: ['Insured_RegAddress'],
	        questions: ['Insured_RegAddress_Mooban'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_RegAddress_Mooban' }
	        }
	    }, {
	        labels: ['Insured_RegAddress'],
	        questions: ['Insured_RegAddress_Arkan'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_RegAddress_Arkan' }
	        }
	    }, {
	        labels: ['Insured_RegAddress'],
	        questions: ['Insured_RegAddress_Moo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_RegAddress_Moo' }
	        }
	    }, {
	        labels: ['Insured_RegAddress'],
	        questions: ['Insured_RegAddress_Soi'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_RegAddress_Soi' }
	        }
	    }, {
	        labels: ['Insured_RegAddress'],
	        questions: ['Insured_RegAddress_Street'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_RegAddress_Street' }
	        }
	
	    }, {
	        labels: ['Insured_RegAddress_Postal'],
	        title: ['Insured_RegAddress'],
	        questions: ['Insured_RegAddress_Postal'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: '_ _ _ _ _',
	                char: '_'
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_RegAddress_TelNo'],
	        title: ['Insured_RegAddress'],
	        questions: ['Insured_RegAddress_TelNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        copyProvince: true,
	        labels: ['Insured_BusinessAddress'],
	        questions: ['Insured_BusinessAddress_Province'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initProvince'],
	                autoInitMaster: false,
	                placeholder: 'Insured_BusinessAddress_Province'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_BusinessAddress'],
	        questions: ['Insured_BusinessAddress_District'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initDistrict', 'Insured_BusinessAddress_Province'],
	                autoInitMaster: false,
	                placeholder: 'Insured_BusinessAddress_District',
	                extraLabel: [{
	                    value: 'Insured_BusinessAddress_Province',
	                    label: 'Insured_BusinessAddress_Province'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_BusinessAddress'],
	        questions: ['Insured_BusinessAddress_SubDistrict'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initSubDistrict', 'Insured_BusinessAddress_Province', 'Insured_BusinessAddress_District'],
	                autoInitMaster: false,
	                placeholder: 'Insured_BusinessAddress_SubDistrict',
	                extraLabel: [{
	                    value: 'Insured_BusinessAddress_Province',
	                    label: 'Insured_BusinessAddress_Province'
	                }, {
	                    value: 'Insured_BusinessAddress_District',
	                    label: 'Insured_BusinessAddress_District'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_BusinessAddress'],
	        questions: ['Insured_BusinessAddress_HouseNo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_BusinessAddress_HouseNo' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_BusinessAddress'],
	        questions: ['Insured_BusinessAddress_Moo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_BusinessAddress_Moo' }
	        }
	    }, {
	        labels: ['Insured_BusinessAddress'],
	        questions: ['Insured_BusinessAddress_Soi'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_BusinessAddress_Soi' }
	        }
	    }, {
	        labels: ['Insured_BusinessAddress'],
	        questions: ['Insured_BusinessAddress_Street'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_BusinessAddress_Street' }
	        }
	    }, {
	        title: ['Insured_BusinessAddress'],
	        labels: ['Insured_BusinessAddress_Postal'],
	        questions: ['Insured_BusinessAddress_Postal'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: '_ _ _ _ _',
	                char: '_'
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_BusinessAddress_TelNo'],
	        title: ['Insured_BusinessAddress'],
	        questions: ['Insured_BusinessAddress_TelNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['contact_information'],
	        questions: ['Insured_ContactAddressId'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: '0', label: 'Insured_CurrentAddress' }, { value: '1', label: 'Insured_RegAddress' }, { value: '2', label: 'Insured_BusinessAddress' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: ['Insured_Occupation_Occupation'],
	        questions: ['Insured_Occupation1_Occupation'],
	        components: ['JobDropdown'],
	        props: {
	            0: {
	                initMaster: ['initOccupation'],
	                autoInitMaster: false,
	                placeholder: 'Occupation_Search'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Position'],
	        questions: ['Insured_Occupation1_Position'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: ['Insured_Occupation_Position'] } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Responsibility'],
	        questions: ['Insured_Occupation1_Responsibility'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: ['Insured_Occupation_Responsibility'] } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_TypeOfBusiness'],
	        questions: ['Insured_Occupation1_TypeOfBusiness'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: ['Insured_Occupation_TypeOfBusiness'] } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Income'],
	        questions: ['Insured_Occupation1_Income'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'currency',
	                placeholder: 'Insured_Occupation_Income',
	                unitLabel: 'Baht',
	                style: { maxWidth: '70%', margin: '0 auto' },
	                maxLength: 9
	            }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HasAnotherOccupation'],
	        questions: ['Insured_HasAnotherOccupation'],
	        components: ['Option'],
	        props: {
	            0: { initMaster: ['initYesNo'], placeholder: 'Select_Please', isInFooter: true }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Occupation2_Occupation'],
	        questions: ['Insured_Occupation2_Occupation'],
	        components: ['JobDropdown'],
	        props: {
	            0: {
	                initMaster: ['initOccupation'],
	                autoInitMaster: false,
	                placeholder: 'Occupation_Search'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Position'],
	        questions: ['Insured_Occupation2_Position'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: ['Insured_Occupation_Position'] } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Responsibility'],
	        questions: ['Insured_Occupation2_Responsibility'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Responsibility' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_TypeOfBusiness'],
	        questions: ['Insured_Occupation2_TypeOfBusiness'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: ['Insured_Occupation_TypeOfBusiness'] } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Income'],
	        questions: ['Insured_Occupation2_Income'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'currency',
	                placeholder: 'Insured_Occupation_Income',
	                unitLabel: 'Baht',
	                style: { maxWidth: '70%', margin: '0 auto' },
	                maxLength: 9
	            }
	        },
	        hideFooter: false
	    }, (_ref = {
	        labels: ['Insured_MotorcycleFlag'],
	        questions: ['Insured_MotorcycleFlag'],
	        components: ['Option'],
	        props: { 0: { initMaster: ['initYesNo'], placeholder: 'Select_Please' } }
	    }, _defineProperty(_ref, 'props', {
	        0: {
	            list: [{ value: 'Y', label: 'Use' }, { value: 'N', label: 'NotUse' }],
	            placeholder: 'Select_Please'
	        }
	    }), _defineProperty(_ref, 'hideFooter', false), _defineProperty(_ref, 'isInFooter', true), _ref),
	
	    //// Payer Info
	    {
	        labels: ['Payer_RelationToInsured'],
	        questions: ['Payer_RelationToInsured'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initPayerRelationJuv'],
	                placeholder: 'Payer_RelationToInsured'
	            }
	        },
	        hideFooter: false
	    }, {
	        title: ['Payer_RelationToInsured'],
	        labels: ['Another'],
	        questions: ['Payer_RelationOtherToInsured'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'ระบุความสัมพันธ์กับผู้เอาประกัน' } },
	        hideFooter: true
	    }, {
	        labels: ['Payer_IdType'],
	        questions: ['Payer_IdType'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initIdent'],
	                autoInitMaster: false,
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_IdNo'],
	        questions: ['Payer_IdNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'IDcard',
	                format: 'X - X X X X - X X X X X - X X - X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_IdExpiryDate'],
	        questions: ['Payer_IdExpiryDate'],
	        components: ['DatepickerBrowser'],
	        props: { 0: { placeholder: 'Select_Please' } },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Payer_ThName'],
	        questions: ['Payer_ThName_Title'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initTitle'],
	                autoInitMaster: false,
	                placeholder: 'Payer_ThName_Title',
	                setWidth: { width: '70%' }
	            }
	        }
	
	    }, {
	        labels: ['Payer_ThName'],
	        questions: ['Payer_ThName_First'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_ThName_First' }
	        }
	
	    }, {
	        labels: ['Payer_ThName'],
	        questions: ['Payer_ThName_Last'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_ThName_Last' }
	        }
	
	    }, {
	        labels: ['Payer_BirthDate'],
	        questions: ['Payer_BirthDate'],
	        components: ['DatepickerBrowser'],
	        props: { 0: { placeholder: 'Select_Please' } },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Payer_FormerName'],
	        questions: ['Payer_FormerName_First'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_FormerName_First' }
	        }
	
	    }, {
	        labels: ['Payer_FormerName'],
	        questions: ['Payer_FormerName_Last'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_FormerName_Last' }
	        }
	
	    }, {
	        labels: ['Payer_Nationality'],
	        questions: ['Payer_Nationality'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initNationality'],
	                autoInitMaster: false,
	                placeholder: 'Select_Nationality'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_Race'],
	        questions: ['Payer_Race'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initNationality'],
	                autoInitMaster: false,
	                placeholder: 'Select_Race'
	            }
	        },
	        hideFooter: true
	    }, {
	        // hoc: 'Marital',
	        labels: ['Payer_MaritalStatus'],
	        questions: ['Payer_MaritalStatus'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initMarital'],
	                autoInitMaster: false,
	                placeholder: 'Select_Please',
	                isInFooter: false
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_SpouseName'],
	        questions: ['Payer_SpouseName_Title'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initTitle'],
	                autoInitMaster: false,
	                placeholder: 'Payer_SpouseName_Title',
	                setWidth: { width: '70%' }
	            }
	        }
	    }, {
	        labels: ['Payer_SpouseName'],
	        questions: ['Payer_SpouseName_First'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_SpouseName_First' }
	        }
	    }, {
	        labels: ['Payer_SpouseName'],
	        questions: ['Payer_SpouseName_Last'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_SpouseName_Last' }
	        }
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_Province'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initProvince'],
	                autoInitMaster: false,
	                placeholder: 'Payer_CurrentAddress_Province'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_District'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initDistrict', 'Payer_CurrentAddress_Province'],
	                autoInitMaster: false,
	                placeholder: 'Payer_CurrentAddress_District',
	                extraLabel: [{
	                    value: 'Payer_CurrentAddress_Province',
	                    label: 'Payer_CurrentAddress_Province'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_SubDistrict'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initSubDistrict', 'Payer_CurrentAddress_Province', 'Payer_CurrentAddress_District'],
	                autoInitMaster: false,
	                placeholder: 'Payer_CurrentAddress_SubDistrict',
	                extraLabel: [{
	                    value: 'Payer_CurrentAddress_Province',
	                    label: 'Payer_CurrentAddress_Province'
	                }, {
	                    value: 'Payer_CurrentAddress_District',
	                    label: 'Payer_CurrentAddress_District'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_HouseNo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Payer_CurrentAddress_HouseNo'] }
	        }
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_Mooban'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Payer_CurrentAddress_Mooban'] }
	        }
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_Arkan'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Payer_CurrentAddress_Arkan'] }
	        }
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_Moo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Payer_CurrentAddress_Moo'] }
	        }
	    }, {
	        labels: ['Payer_CurrentAddress_Soi'],
	        questions: ['Payer_CurrentAddress_Soi'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Payer_CurrentAddress_Soi'] }
	        }
	    }, {
	        labels: ['Payer_CurrentAddress_Street'],
	        questions: ['Payer_CurrentAddress_Street'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Payer_CurrentAddress_Street'] }
	        }
	    }, {
	        labels: ['fullform_postcode'],
	        title: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_Postal'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: '_ _ _ _ _',
	                char: '_'
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_CurrentAddress_TelNo'],
	        title: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_TelNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_MobileNo'],
	        questions: ['Payer_MobileNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_Email'],
	        questions: ['Payer_Email'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_Email' }
	        },
	        hideFooter: false
	    }, {
	        copyProvince: true,
	        labels: ['Payer_RegAddress'],
	        questions: ['Payer_RegAddress_Province'],
	        props: {
	            0: { initMaster: ['initProvince'], placeholder: 'Payer_RegAddress_Province' }
	        },
	        components: ['Dropdown'],
	        hideFooter: true
	    }, {
	        labels: ['Payer_RegAddress'],
	        questions: ['Payer_RegAddress_District'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initDistrict', 'Payer_RegAddress_Province'],
	                autoInitMaster: false,
	                placeholder: 'Payer_RegAddress_District',
	                extraLabel: [{ value: 'Payer_RegAddress_Province', label: 'Payer_RegAddress_Province' }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_RegAddress'],
	        questions: ['Payer_RegAddress_SubDistrict'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initSubDistrict', 'Payer_RegAddress_Province', 'Payer_RegAddress_District'],
	                autoInitMaster: false,
	                placeholder: 'Payer_RegAddress_SubDistrict',
	                extraLabel: [{ value: 'Payer_RegAddress_Province', label: 'Payer_RegAddress_Province' }, { value: 'Payer_RegAddress_District', label: 'Payer_RegAddress_District' }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_RegAddress'],
	        questions: ['Payer_RegAddress_HouseNo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_RegAddress_HouseNo' }
	        }
	    }, {
	        labels: ['Payer_RegAddress'],
	        questions: ['Payer_RegAddress_Mooban'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_RegAddress_Mooban' }
	        }
	    }, {
	        labels: ['Payer_RegAddress'],
	        questions: ['Payer_RegAddress_Arkan'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_RegAddress_Arkan' }
	        }
	    }, {
	        labels: ['Payer_RegAddress'],
	        questions: ['Payer_RegAddress_Moo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_RegAddress_Moo' }
	        }
	    }, {
	        labels: ['Payer_RegAddress'],
	        questions: ['Payer_RegAddress_Soi'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_RegAddress_Soi' }
	        }
	    }, {
	        labels: ['Payer_RegAddress'],
	        questions: ['Payer_RegAddress_Street'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_RegAddress_Street' }
	        }
	
	    }, {
	        title: ['Payer_RegAddress'],
	        labels: ['Payer_RegAddress_Postal'],
	        questions: ['Payer_RegAddress_Postal'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: '_ _ _ _ _',
	                char: '_'
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_RegAddress_TelNo'],
	        title: ['Payer_RegAddress'],
	        questions: ['Payer_RegAddress_TelNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        copyProvince: true,
	        labels: ['Payer_BusinessAddress'],
	        questions: ['Payer_BusinessAddress_Province'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initProvince'],
	                autoInitMaster: false,
	                placeholder: 'Payer_BusinessAddress_Province'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_BusinessAddress'],
	        questions: ['Payer_BusinessAddress_District'],
	        props: {
	            0: {
	                initMaster: ['initDistrict', 'Payer_BusinessAddress_Province'],
	                autoInitMaster: false,
	                placeholder: 'Payer_BusinessAddress_District',
	                extraLabel: [{
	                    value: 'Payer_BusinessAddress_Province',
	                    label: 'Payer_BusinessAddress_Province'
	                }]
	            }
	        },
	        components: ['Dropdown'],
	        hideFooter: true
	    }, {
	        labels: ['Payer_BusinessAddress'],
	        questions: ['Payer_BusinessAddress_SubDistrict'],
	        props: {
	            0: {
	                initMaster: ['initSubDistrict', 'Payer_BusinessAddress_Province', 'Payer_BusinessAddress_District'],
	                autoInitMaster: false,
	                placeholder: 'Payer_BusinessAddress_SubDistrict',
	                extraLabel: [{
	                    value: 'Payer_BusinessAddress_Province',
	                    label: 'Payer_BusinessAddress_Province'
	                }, {
	                    value: 'Payer_BusinessAddress_District',
	                    label: 'Payer_BusinessAddress_District'
	                }]
	            }
	        },
	        components: ['Dropdown'],
	        hideFooter: true
	    }, {
	        labels: ['Payer_BusinessAddress'],
	        questions: ['Payer_BusinessAddress_HouseNo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_BusinessAddress_HouseNo' }
	        }
	    }, {
	        labels: ['Payer_BusinessAddress'],
	        questions: ['Payer_BusinessAddress_Moo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_BusinessAddress_Moo' }
	        }
	    }, {
	        labels: ['Payer_BusinessAddress'],
	        questions: ['Payer_BusinessAddress_Soi'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_BusinessAddress_Soi' }
	        }
	    }, {
	        labels: ['Payer_BusinessAddress'],
	        questions: ['Payer_BusinessAddress_Street'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_BusinessAddress_Street' }
	        }
	    }, {
	        title: ['Payer_BusinessAddress'],
	        labels: ['Payer_BusinessAddress_Postal'],
	        questions: ['Payer_BusinessAddress_Postal'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: '_ _ _ _ _',
	                char: '_'
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_BusinessAddress_TelNo'],
	        title: ['Payer_BusinessAddress'],
	        questions: ['Payer_BusinessAddress_TelNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['contact_information'],
	        questions: ['Payer_ContactAddressId'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 0, label: 'Insured_CurrentAddress' }, { value: 1, label: 'Insured_RegAddress' }, { value: 2, label: 'Insured_BusinessAddress' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: ['Payer_Occupation_Occupation'],
	        questions: ['Payer_Occupation1_Occupation'],
	        components: ['JobDropdown'],
	        props: {
	            0: {
	                initMaster: ['initOccupation'],
	                autoInitMaster: false,
	                placeholder: 'Occupation_Search'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_Occupation_Position'],
	        questions: ['Payer_Occupation1_Position'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Position' } },
	        hideFooter: true
	    }, {
	        labels: ['Payer_Occupation_Responsibility'],
	        questions: ['Payer_Occupation1_Responsibility'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Responsibility' } },
	        hideFooter: true
	    }, {
	        labels: ['Payer_Occupation_TypeOfBusiness'],
	        questions: ['Payer_Occupation1_TypeOfBusiness'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Payer_Occupation_TypeOfBusiness' } },
	        hideFooter: true
	    }, {
	        labels: ['Payer_Occupation_Income'],
	        questions: ['Payer_Occupation1_Income'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'currency',
	                placeholder: '0',
	                unitLabel: 'Baht',
	                style: { maxWidth: '70%', margin: '0 auto' },
	                maxLength: 9
	            }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Payer_HasAnotherOccupation'],
	        questions: ['Payer_HasAnotherOccupation'],
	        components: ['Option'],
	        props: { 0: { initMaster: ['initYesNo'], placeholder: 'Select_Please' } },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: ['Payer_Occupation2_Occupation'],
	        questions: ['Payer_Occupation2_Occupation'],
	        components: ['JobDropdown'],
	        props: {
	            0: {
	                initMaster: ['initOccupation'],
	                autoInitMaster: false,
	                placeholder: 'Occupation_Search'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_Occupation_Position'],
	        questions: ['Payer_Occupation2_Position'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Position' } },
	        hideFooter: true
	    }, {
	        labels: ['Payer_Occupation_Responsibility'],
	        questions: ['Payer_Occupation2_Responsibility'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Responsibility' } },
	        hideFooter: true
	    }, {
	        labels: ['Payer_Occupation_TypeOfBusiness'],
	        questions: ['Payer_Occupation2_TypeOfBusiness'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Payer_Occupation_TypeOfBusiness' } },
	        hideFooter: true
	    }, {
	        labels: ['Payer_Occupation_Income'],
	        questions: ['Payer_Occupation2_Income'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'currency',
	                placeholder: '0',
	                unitLabel: 'Baht',
	                style: { maxWidth: '70%', margin: '0 auto' },
	                maxLength: 9
	            }
	        },
	        hideFooter: false
	    },
	    // Product
	    {
	        type: 'Product',
	        questions: ['ProResult'],
	        labels: [''],
	        hideFooter: true
	    }, {
	        labels: ['Dividend_PaymentOption'],
	        questions: ['Dividend_PaymentOption'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 0, label: 'BankTransfer' }, { value: 1, label: 'Cheque' }, { value: 2, label: 'PayPremium' }]
	            },
	            placeholder: 'Dividend_PaymentOption'
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: ['Beneficiaries'],
	        questions: ['Beneficiaries[i]'],
	        type: 'Beneficiary',
	        initMaster: ['initBeneficiaryRelationship'],
	        hideFooter: true
	    },
	    //// Insured Health Question
	    {
	        hoc: 'YesNo',
	        bigLabel: ['HasDiagnosisFiveYear'],
	        labels: ['Insured_HasDiagnosis'],
	        questions: ['Insured_HasDiagnosis_CutOut'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Diagnosises_CutOut[i]'],
	        questions: ['Insured_Diagnosises_CutOut[i]'],
	        type: 'InsuredDiagnosis',
	        initMaster: ['initDiagnosis'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        bigLabel: ['HasDiagnosisFiveYear'],
	        labels: ['Insured_HasTreatment'],
	        questions: ['Insured_HasTreatment_CutOut'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Treatments[i]'],
	        questions: ['Insured_Treatments_CutOut[i]'],
	        type: 'InsuredTreatment',
	        initMaster: ['initTreatment'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HealthyFlag'],
	        questions: ['Insured_HealthyFlag'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_HealthyDetail'],
	        questions: ['Insured_HealthyDetail'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'FillinInfo' } },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Previous'],
	        questions: ['Insured_HasExistingPolicies'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Have' }, { value: 'N', label: 'NotHave' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: ['Insured_Previous'],
	        questions: ['Insured_ExistingPolicies[i]'],
	        type: 'Previous',
	        initMaster: ['initCompany'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HasBeenRejected'],
	        questions: ['Insured_HasBeenRejected'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: ['Insured_Rejected'],
	        questions: ['Insured_Rejecteds[i]'],
	        type: 'RejectForm',
	        initMaster: ['initCompany'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_InvolvedInNarcotics'],
	        questions: ['Insured_InvolvedInNarcotics'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_DrugFlag'],
	        questions: ['Insured_DrugFlag'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Drung_Had' }, { value: 'N', label: 'Drung_NeverHad' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_DrugFlag'],
	        labels: ['Insured_DrugType'],
	        questions: ['Insured_DrugType'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Drug' } },
	        hideFooter: true
	    }, {
	        title: ['Insured_DrugFlag'],
	        labels: ['Insured_DrugQuantity'],
	        questions: ['Insured_DrugQuantity'],
	        components: ['TextBox'],
	        // props: {
	        //     0: {
	        //         // type: 'number',
	        //         placeholder: 'Insured_DrugQuantity',
	        //         // title: 'Insured_DrugQuantity',
	        //         // unitLabel: ' ',
	        //         // style: { paddingLeft: '1rem' }
	        //     },
	        // },
	        hideFooter: true
	    }, {
	        title: ['Insured_DrugFlag'],
	        labels: [''],
	        questions: ['Insured_DrugFrequency'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_DrugFrequency',
	                unitLabel: 'Frequency_TimeWeek',
	                style: { paddingLeft: '1rem' }
	            }
	        },
	        hideFooter: false
	    }, {
	        title: ['Insured_DrugFlag'],
	        labels: [''],
	        questions: ['Insured_DrugPeriod'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                value: 30,
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_DrugPeriod',
	                unitLabel: 'years_lb',
	                style: { paddingLeft: '1rem' }
	            }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        title: ['Insured_DrugFlag'],
	        labels: ['Insured_DrugWithdrawn'],
	        questions: ['Insured_DrugWithdrawn'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_DrugFlag'],
	        labels: ['Insured_DrugWhen'],
	        questions: ['Insured_DrugWhen'],
	        components: ['TextBox'],
	        props: {
	            0: {
	                list: [{ value: 1, label: 'NotDrungLess3Y' }, { value: 2, label: 'NotDrungMore3Y' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_AlcoholFlag'],
	        questions: ['Insured_AlcoholFlag'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'AlcoholEver' }, { value: 'N', label: 'AlcoholNever' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_AlcoholFlag'],
	        labels: ['Insured_AlcoholType'],
	        questions: ['Insured_AlcoholType'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Alcohol' } },
	        hideFooter: true
	    }, {
	        title: ['Insured_AlcoholFlag'],
	        labels: [''],
	        questions: ['Insured_AlcoholQuantity', 'Insured_AlcoholQuantityUnit'],
	        components: ['NumPad', 'Dropdown'],
	        props: {
	            0: {
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_AlcoholQuantity',
	                unitLabel: ' ',
	                style: { paddingLeft: '1rem' }
	            },
	            1: {
	                list: [{ value: '0', label: { en: 'Can/Time', th: 'กระป๋อง/ครั้ง' } }, { value: '1', label: { en: 'Bottle/Time', th: 'ขวด/ครั้ง' } }],
	                placeholder: 'Select_Please',
	                hideBorder: true
	            }
	        },
	        hideFooter: false
	    }, {
	        title: ['Insured_AlcoholFlag'],
	        labels: [''],
	        questions: ['Insured_AlcoholFrequency'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_AlcoholFrequency',
	                unitLabel: 'Frequency_TimeWeek',
	                style: { paddingLeft: '1rem' }
	            }
	        },
	        hideFooter: false
	    }, {
	        title: ['Insured_AlcoholFlag'],
	        labels: [''],
	        questions: ['Insured_AlcoholPeriod'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                value: 30,
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_AlcoholPeriod',
	                unitLabel: 'years_lb',
	                style: { paddingLeft: '1rem' }
	            }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        title: ['Insured_AlcoholFlag'],
	        labels: ['Insured_AlcoholWithdrawn'],
	        questions: ['Insured_AlcoholWithdrawn'],
	        components: ['Option'],
	        props: { 0: { initMaster: ['initYesNo'] } },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_AlcoholFlag'],
	        labels: ['Insured_AlcoholWhenOption'],
	        questions: ['Insured_AlcoholWhenOption'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                list: [{
	                    value: '0',
	                    label: { en: 'เลิกดื่ม น้อยกว่า 3 ปี', th: 'เลิกดื่ม น้อยกว่า 3 ปี' }
	                }, {
	                    value: '1',
	                    label: { en: 'เลิกดื่ม มากกว่า 3 ปี', th: 'เลิกดื่ม มากกว่า 3 ปี' }
	                }],
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_SmokeFlag'],
	        questions: ['Insured_SmokeFlag'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'SmokeEver' }, { value: 'N', label: 'SmokeNever' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_SmokeFlag'],
	        labels: ['Insured_SmokeFlag'],
	        questions: ['Insured_SmokeQuantity'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_SmokeQuantity',
	                unitLabel: 'Insured_SmokeQuantity_Mass'
	            }
	        },
	        hideFooter: false
	    }, {
	        title: ['Insured_SmokeFlag'],
	        labels: ['Insured_SmokeFlag'],
	        questions: ['Insured_SmokePeriod'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                value: 30,
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_SmokePeriod',
	                unitLabel: 'years_lb'
	            }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        title: ['Insured_SmokeFlag'],
	        labels: ['Insured_SmokeWithdrawn'],
	        questions: ['Insured_SmokeWithdrawn'],
	        components: ['Option'],
	        props: { 0: { initMaster: ['initYesNo'] } },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_SmokeFlag'],
	        labels: ['Insured_SmokeWithdrawnWhenOption'],
	        questions: ['Insured_SmokeWithdrawnWhenOption'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                list: [{
	                    value: '0',
	                    label: { en: 'เลิกสูบ น้อยกว่า 3 ปี', th: 'เลิกสูบ น้อยกว่า 3 ปี' }
	                }, {
	                    value: '1',
	                    label: { en: 'เลิกสูบ มากกว่า 3 ปี', th: 'เลิกสูบ มากกว่า 3 ปี' }
	                }],
	                placeholder: 'Select_Please'
	            }
	        },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Insured_Height_Weight'],
	        questions: ['Insured_Weight'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_Weight',
	                unitLabel: 'Kilogram',
	                style: { width: '80%', float: 'right' }
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Height_Weight'],
	        questions: ['Insured_Height'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_Height',
	                unitLabel: 'Centimeter',
	                style: { width: '80%' }
	            }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HasWeightChange'],
	        questions: ['Insured_HasWeightChange'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Change' }, { value: 'N', label: 'NotChange_shrot' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_WeightChangeType'],
	        questions: ['Insured_WeightChangeType'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'I', label: 'Insured_WeightChangeQuantityUp' }, { value: 'D', label: 'Insured_WeightChangeQuantityDown' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_WeightChangeQuantity'],
	        questions: ['Insured_WeightChangeQuantity'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_Weight',
	                unitLabel: 'Kilogram',
	                style: { maxWidth: '70%', margin: '0 auto' }
	            }
	        },
	        hideFooter: false
	    }, {
	        // hoc: 'YesNo',
	        title: ['Insured_HasWeightChange'],
	        labels: ['Insured_WeightChangeReason'],
	        questions: ['Insured_WeightChangeReason'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{
	                    value: 1,
	                    label: { th: 'ควบคุมอาหารและออกกำลังกาย', en: 'Diet/Exercise' },
	                    Id: '1'
	                }, {
	                    value: 2,
	                    label: {
	                        th: 'คลอดบุตร (เฉพาะสตรี)',
	                        en: 'Gave birth (For Female only)'
	                    },
	                    Id: '2'
	                }, { value: 0, label: { th: 'อื่นๆ', en: 'Another' }, Id: '0' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        title: ['Insured_HasWeightChange'],
	        labels: ['Insured_WeightChangeReason'],
	        questions: ['Insured_WeightChangeOtherReason'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_WeightChangeOtherReason' } },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HasFamilyHistory'],
	        questions: ['Insured_HasFamilyHistory'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Has' }, { value: 'N', label: 'IsNot' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: [''],
	        questions: ['Insured_FamilyHistories[i]'],
	        type: 'FamilyHistory',
	        initMaster: ['initRelationFamily', 'initIllness'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HasSpouseLiverHiv'],
	        questions: ['Insured_HasSpouseLiverHiv'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Has' }, { value: 'N', label: 'IsNot' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        isInFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HasSpouseHiv'],
	        questions: ['Insured_HasSpouseHiv'],
	        components: ['Option'],
	        props: { 0: { initMaster: ['initYesNo'] } },
	        isInFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HasSpouseLiver'],
	        questions: ['Insured_HasSpouseLiver'],
	        components: ['Option'],
	        props: { 0: { initMaster: ['initYesNo'] } },
	        isInFooter: true
	    },
	    ////Payer Health Question
	    {
	        hoc: 'YesNo',
	        labels: ['Payer_HasBeenRejected'],
	        questions: ['Payer_HasBeenRejected'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: ['Payer_Rejected'],
	        questions: ['Payer_Rejecteds[i]'],
	        type: 'RejectForm',
	        initMaster: ['initCompany'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Payer_InvolvedInNarcotics'],
	        questions: ['Payer_InvolvedInNarcotics'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Payer_DrugFlag'],
	        questions: ['Payer_DrugFlag'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'DrugEver' }, { value: 'N', label: 'DrugNever' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Payer_DrugFlag'],
	        labels: ['Payer_DrugType'],
	        questions: ['Payer_DrugType'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Drug' } },
	        hideFooter: true
	    }, {
	        title: ['Payer_DrugFlag'],
	        labels: ['Payer_DrugQuantity'],
	        questions: ['Payer_DrugQuantity'],
	        components: ['TextBox'],
	        hideFooter: true
	    }, {
	        title: ['Payer_DrugFlag'],
	        labels: [''],
	        questions: ['Payer_DrugFrequency'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_DrugFrequency',
	                unitLabel: 'Frequency_TimeWeek',
	                style: { paddingLeft: '1rem' }
	            }
	        },
	        hideFooter: false
	    }, {
	        title: ['Payer_DrugFlag'],
	        labels: [''],
	        questions: ['Payer_DrugPeriod'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                value: 30,
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_DrugPeriod',
	                unitLabel: 'years_lb',
	                style: { paddingLeft: '1rem' }
	            }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        title: ['Payer_DrugFlag'],
	        labels: ['Payer_DrugWithdrawn'],
	        questions: ['Payer_DrugWithdrawn'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Payer_DrugFlag'],
	        labels: ['Payer_DrugWhen'],
	        questions: ['Payer_DrugWhen'],
	        components: ['TextBox'],
	        props: {
	            0: {
	                list: [{ value: 1, label: 'NotDrungLess3Y' }, { value: 2, label: 'NotDrungMore3Y' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Payer_Height_Weight'],
	        questions: ['Payer_Weight'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'number',
	                placeholder: ['0'],
	                title: 'Payer_Weight',
	                unitLabel: 'Kilogram',
	                style: { width: '80%', float: 'right' }
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_Height_Weight'],
	        questions: ['Payer_Height'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'number',
	                title: 'Payer_Height',
	                placeholder: ['0'],
	                unitLabel: 'Centimeter',
	                style: { width: '80%' }
	            }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Payer_HasWeightChange'],
	        questions: ['Payer_HasWeightChange'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Change' }, { value: 'N', label: 'NotChange_shrot' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_WeightChangeType'],
	        questions: ['Payer_WeightChangeType'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'I', label: 'Insured_WeightChangeQuantityUp' }, { value: 'D', label: 'Insured_WeightChangeQuantityDown' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        title: ['Payer_HasWeightChange'],
	        labels: ['Payer_WeightChangeQuantity'],
	        questions: ['Payer_WeightChangeQuantity'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'number',
	                placeholder: '0',
	                title: 'Insured_Weight',
	                unitLabel: 'Kilogram',
	                style: { maxWidth: '70%', margin: '0 auto' }
	            }
	        },
	        hideFooter: false
	    }, {
	        // hoc: 'YesNo',
	        title: ['Payer_HasWeightChange'],
	        labels: ['Payer_WeightChangeReason'],
	        questions: ['Payer_WeightChangeReason'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{
	                    value: 1,
	                    label: { th: 'ควบคุมอาหารและออกกำลังกาย', en: 'Diet/Exercise' },
	                    Id: '1'
	                }, {
	                    value: 2,
	                    label: {
	                        th: 'คลอดบุตร (เฉพาะสตรี)',
	                        en: 'Gave birth (For Female only)'
	                    },
	                    Id: '2'
	                }, { value: 0, label: { th: 'อื่นๆ', en: 'Another' }, Id: '0' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        title: ['Payer_HasWeightChange'],
	        labels: ['Payer_WeightChangeReason'],
	        questions: ['Payer_WeightChangeOtherReason'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_WeightChangeOtherReason' } },
	        hideFooter: true
	    },
	
	    // ////// Insured Health
	    {
	        labels: ['Insured_HasPastIllness'],
	        questions: ['Insured_HasPastIllness'],
	        type: 'MultipleOption',
	        initMaster: ['initPastIllness'],
	        hasUncheckAll: true,
	        columns: 3,
	        hideFooter: true
	    }, {
	        labels: ['Insured_HasSymptom'],
	        questions: ['Insured_HasSymptom_Main'],
	        type: 'MultipleOption',
	        initMaster: ['initSymptom'],
	        hasUncheckAll: true,
	        columns: 3,
	        hideFooter: true
	    }, {
	        labels: ['Insured_HasSymptom'],
	        labels2: ['InSixMonth'],
	        questions: ['Insured_HasSymptom_PastSixMonth'],
	        type: 'MultipleOption',
	        initMaster: ['initSymptomPastSixMonth'],
	        hasUncheckAll: true,
	        columns: 3,
	        hideFooter: true
	    }, {
	        labels: ['Insured_HasSymptom'],
	        labels2: ['ForFemale'],
	        questions: ['Insured_HasSymptom_Female'],
	        type: 'MultipleOption',
	        initMaster: ['initSymptomFemale'],
	        hasUncheckAll: true,
	        columns: 3,
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        bigLabel: ['HasDiagnosisFiveYear'],
	        labels: ['Insured_HasDiagnosis'],
	        questions: ['Insured_HasDiagnosis'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Diagnosises[i]'],
	        questions: ['Insured_Diagnosises[i]'],
	        type: 'InsuredDiagnosis',
	        initMaster: ['initDiagnosis'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        bigLabel: ['HasDiagnosisFiveYear'],
	        labels: ['Insured_HasTreatment'],
	        questions: ['Insured_HasTreatment'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Treatments[i]'],
	        questions: ['Insured_Treatments[i]'],
	        type: 'InsuredTreatment',
	        initMaster: ['initTreatment'],
	        hideFooter: true
	    }, {
	        labels: ['Insured_HasCiPastIllness'],
	        questions: ['Insured_HasCiPastIllness'],
	        type: 'MultipleOption',
	        initMaster: ['initCiPastIllness'],
	        hasUncheckAll: true,
	        columns: 3,
	        hideFooter: true
	    }, {
	        labels: ['Payer_HasPastIllness'],
	        questions: ['Payer_HasPastIllness'],
	        type: 'MultipleOption',
	        initMaster: ['initPastIllness'],
	        hasUncheckAll: true,
	        columns: 3,
	        hideFooter: true
	    }, {
	        labels: ['Payer_HasSymptom'],
	        questions: ['Payer_HasSymptom_Main'],
	        type: 'MultipleOption',
	        initMaster: ['initSymptom'],
	        hasUncheckAll: true,
	        columns: 3,
	        hideFooter: true
	    }, {
	        labels: ['Payer_HasSymptom'],
	        labels2: ['InSixMonth'],
	        questions: ['Payer_HasSymptom_PastSixMonth'],
	        type: 'MultipleOption',
	        initMaster: ['initSymptomPastSixMonth'],
	        hasUncheckAll: true,
	        columns: 3,
	        hideFooter: true
	    }, {
	        labels: ['Payer_HasSymptom'],
	        labels2: ['ForFemale'],
	        questions: ['Payer_HasSymptom_Female'],
	        type: 'MultipleOption',
	        initMaster: ['initSymptomFemale'],
	        hasUncheckAll: true,
	        columns: 3,
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        bigLabel: ['HasDiagnosisFiveYear'],
	        labels: ['Payer_HasDiagnosis'],
	        questions: ['Payer_HasDiagnosis'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_Diagnosises[i]'],
	        questions: ['Payer_Diagnosises[i]'],
	        type: 'PayerDiagnosis',
	        initMaster: ['initDiagnosis'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        bigLabel: ['HasDiagnosisFiveYear'],
	        labels: ['Payer_HasTreatment'],
	        questions: ['Payer_HasTreatment'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: [''],
	        questions: ['Payer_Treatments[i]'],
	        type: 'PayerTreatment',
	        initMaster: ['initTreatment'],
	        hideFooter: true
	    },
	    ////// FATCA
	    {
	        labels: ['Insured_IsPreferEPolicy'],
	        questions: ['Insured_IsPreferEPolicy'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Prefer' }, { value: 'N', label: 'Dont_Prefer' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        title: [''],
	        labels: ['Insured_MoreDetails'],
	        questions: ['Insured_MoreDetails'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Fillin_Please' } },
	        hideFooter: true
	    }, {
	        labels: ['Fatca_Q1'],
	        questions: ['Fatca_Q1'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Agree_Fatc_Q1' }, { value: 'N', label: 'DisAgree_Fatc_Q1' }],
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Fatca_Q2'],
	        titleFatca: ['Fatca_Q2_Title'],
	        sublabels: ['Fatca_Q2_Details1', 'Fatca_Q2_Details2'],
	        questions: ['Fatca_Q2'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{
	                    value: 'Y',
	                    id: 0,
	                    label: 'ยินยอมและไม่มีหน้าที่เสียภาษีให้แก่กรมสรรพากรประเทศสหรัฐฯและได้แนบ (1) แบบ W-8 BEN และ (2) เอกสารประกอบ/ชี้แจงเพิ่มเติม'
	                }, {
	                    value: 'N',
	                    id: 1,
	                    label: 'ยินยอมและมีหน้าที่เสียภาษีให้แก่กรมสรรพากรประเทศสหรัฐฯและได้แนบ (1) เอกสาร W-9 BEN หรือ (2) เอกสารยืนยันการเสียภาษี'
	                }],
	                columns: 2,
	                fatca: true
	            }
	        },
	        hideFooter: true
	    },
	    ////////  4 page insert
	
	    ////Diabetes
	    {
	        hoc: 'YesNo',
	        labels: ['Insured_Diabetes_HasFamily'],
	        questions: ['Insured_Diabetes_HasFamily'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Have' }, { value: 'N', label: 'NotHave' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_Diabetes_HasFamily'],
	        labels: ['Insured_Diabetes_FamiliyMember'],
	        questions: ['Insured_Diabetes_FamiliyMember'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Diabetes_FamiliyMember' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Diabetes_Diagnosed'],
	        questions: ['Insured_Diabetes_Diagnosed'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_Please' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Diabetes_TreatmentStarted'],
	        questions: ['Insured_Diabetes_TreatmentStarted'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_Please' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Diabetes_DoctorFirstName'],
	        questions: ['Insured_Diabetes_DoctorFirstName'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'fullform_fname' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Diabetes_DoctorLastName'],
	        questions: ['Insured_Diabetes_DoctorLastName'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Diabetes_DoctorLastName' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Diabetes_Hospital'],
	        questions: ['Insured_Diabetes_Hospital'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_Hospital' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Diabetes_PatientId'],
	        questions: ['Insured_Diabetes_PatientId'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_IdPatient' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Diabetes_TreatmentFrequency'],
	        questions: ['Insured_Diabetes_TreatmentFrequency'],
	        components: ['NumPad'],
	
	        props: {
	            0: {
	                type: 'number',
	                placeholder: '0',
	                title: '',
	                unitLabel: ' ',
	                style: { paddingLeft: '16rem' }
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: ['Insured_Diabetes_TreatmentFrequency'],
	        questions: ['Insured_Diabetes_TreatmentFrequencyUnit'],
	        components: ['Dropdown'],
	
	        props: {
	            0: {
	                list: [{ value: '0', label: { en: 'Day', th: 'วัน' } }, { value: '1', label: { en: 'Week', th: 'สัปดาห์' } }, { value: '2', label: { en: 'Month', th: 'เดือน' } }, { value: '3', label: { en: 'Year', th: 'ปี' } }, {
	                    value: '4',
	                    label: {
	                        en: 'Have not seen doctor in 1 year',
	                        th: 'ไม่ได้พบแพทย์มากกว่า 1 ปี'
	                    }
	                }],
	                style: { transform: 'translateY(-20px)' },
	                placeholder: 'Select_Please',
	                hideBorder: true
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: ['Insured_Diabetes_LastTreatment'],
	        questions: ['Insured_Diabetes_LastTreatment'],
	        components: ['DatepickerBrowser'],
	        props: {
	            0: { placeholder: 'Insured_Diabetes_LastTreatment' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Diabetes_Treatment'],
	        questions: ['Insured_Diabetes_Treatments'],
	        type: 'MultipleOption',
	        list: [{
	            value: 0,
	            label: 'InjectInsulin',
	            TreatmentId: 0,
	            TreatmentLabel: 'InjectInsulin'
	        }, { value: 1, label: 'TakePill', TreatmentId: 1, TreatmentLabel: 'TakePill' }, { value: 2, label: 'Another', TreatmentId: 2, TreatmentLabel: 'Another' }],
	        columns: 2,
	        hideFooter: true
	    }, {
	        title: ['Insured_Diabetes_Treatment'],
	        labels: ['TakePill'],
	        questions: ['Insured_Diabetes_Treatments_TreatmentDetail_1'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Diabetes_Treatments_TreatmentDetail_1' }
	        },
	        hideFooter: true
	    }, {
	        title: ['Insured_Diabetes_Treatment'],
	        labels: ['Another'],
	        questions: ['Insured_Diabetes_Treatments_TreatmentDetail_2'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Diabetes_Treatments_TreatmentDetail_2' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Diabetes_RoutineUrineTest'],
	        questions: ['Insured_Diabetes_RoutineUrineTest'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'สม่ำเสมอ' }, { value: 'N', label: 'ไม่สม่ำเสมอ' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Diabetes_LastUrineTest'],
	        questions: ['Insured_Diabetes_LastUrineTest'],
	        components: ['DatepickerBrowser'],
	        props: {
	            0: { placeholder: 'Insured_Diabetes_LastUrineTest' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Diabetes_UrineTestResult'],
	        questions: ['Insured_Diabetes_UrineTestResult'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 0, label: 'UrineTestResultDetail_FoundAnother' }, { value: 1, label: 'UrineTestResultDetail_FoundEver' }, { value: 2, label: 'UrineTestResultDetail_Sometime' }, { value: 3, label: 'UrineTestResultDetail_NotFound' }],
	                columns: 2,
	                isInFooter: true
	            }
	        },
	        hideFooter: false
	    }, {
	        title: ['Insured_Diabetes_UrineTestResult'],
	        labels: ['Insured_Diabetes_UrineTestResultDetail'],
	        questions: ['Insured_Diabetes_UrineTestResultDetail'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_UrineTest' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Diabetes_BloodTest'],
	        questions: ['Insured_Diabetes_BloodTest'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_Diabetes_BloodTest_title'],
	        labels: ['Insured_Diabetes_BloodTestResult'],
	        questions: ['Insured_Diabetes_BloodTestResult'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_Diabetes_BloodTestResult' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Diabetes_Symptoms'],
	        questions: ['Insured_Diabetes_Symptoms'],
	        type: 'MultipleOption',
	        initMaster: ['initDiabetes'],
	        columns: 3,
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Diabetes_HasCxr'],
	        questions: ['Insured_Diabetes_HasCxr'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_Diabetes_HasCxr_title'],
	        labels: ['Insured_Diabetes_CxrDate'],
	        questions: ['Insured_Diabetes_CxrDate'],
	        components: ['DatepickerBrowser'],
	        props: { 0: { placeholder: 'Select_Please' } },
	        // isInFooter: true,
	        hideFooter: true
	    }, {
	        title: ['Insured_Diabetes_HasCxr_title'],
	        hoc: 'YesNo',
	        labels: ['Insured_Diabetes_CxrResultNormal'],
	        questions: ['Insured_Diabetes_CxrResultNormal'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Normal' }, { value: 'N', label: 'Abnormal' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_Diabetes_HasCxr_title'],
	        labels: ['Insured_Diabetes_CxrHospital'],
	        questions: ['Insured_Diabetes_CxrHospital'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_Hospital' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Diabetes_HasEkg'],
	        questions: ['Insured_Diabetes_HasEkg'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_Diabetes_HasEkg_title'],
	        labels: ['Insured_Diabetes_EkgDate'],
	        questions: ['Insured_Diabetes_EkgDate'],
	        components: ['DatepickerBrowser'],
	        props: { 0: { placeholder: 'Select_Please' } },
	        hideFooter: true
	    }, {
	        title: ['Insured_Diabetes_HasEkg_title'],
	        hoc: 'YesNo',
	        labels: ['Insured_Diabetes_EkgResultNormal'],
	        questions: ['Insured_Diabetes_EkgResultNormal'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Normal' }, { value: 'N', label: 'Abnormal' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_Diabetes_HasEkg_title'],
	        labels: ['Insured_Diabetes_EkgHospital'],
	        questions: ['Insured_Diabetes_EkgHospital'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_HospitalClinic' }
	        },
	        hideFooter: true
	    },
	
	    //////Hbp
	    {
	        labels: ['Insured_Hbp_TreatmentStartedDate'],
	        questions: ['Insured_Hbp_TreatmentStartedDate'],
	        components: ['DatepickerBrowser'],
	        props: { 0: { placeholder: 'Fillin_Date' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_DiagnosedDate'],
	        questions: ['Insured_Hbp_DiagnosedDate'],
	        components: ['DatepickerBrowser'],
	        props: { 0: { placeholder: 'Fillin_Date' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_CurrentDoctorName'],
	        questions: ['Insured_Hbp_DoctorFirstName', 'Insured_Hbp_DoctorLastName'],
	        components: ['TextBox', 'TextBox'],
	        props: {
	            0: { placeholder: 'fullform_fname' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_DoctorLastName'],
	        questions: ['Insured_Hbp_DoctorLastName'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Diabetes_DoctorLastName' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_Hospital'],
	        questions: ['Insured_Hbp_Hospital'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_Hospital' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_Patient'],
	        questions: ['Insured_Hbp_PatientId'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_IdPatient' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_PretreatedBp'],
	        questions: ['Insured_Hbp_PretreatedBp'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_Hbp_PretreatedBp' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_PretreatedBpDate'],
	        questions: ['Insured_Hbp_PretreatedBpDate'],
	        components: ['DatepickerBrowser'],
	        props: { 0: { placeholder: 'Insured_Hbp_LastBpDate' } },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_LastBp'],
	        questions: ['Insured_Hbp_LastBp'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_Hbp_PretreatedBp' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_LastBpDate'],
	        questions: ['Insured_Hbp_LastBpDate'],
	        components: ['DatepickerBrowser'],
	        props: { 0: { placeholder: 'Insured_Hbp_PretreatedBpDate' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_Medicine'],
	        questions: ['Insured_Hbp_Medicine'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_Hbp_Medicine' } },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hbp_CurrentInTreatment'],
	        questions: ['Insured_Hbp_CurrentInTreatment'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'InTreatment' }, { value: 'N', label: 'NotInTreatment' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_CurrentDoctorName'],
	        questions: ['Insured_Hbp_CurrentDoctorName'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hbp_CurrentDoctorName' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_CurrentHospital'],
	        questions: ['Insured_Hbp_CurrentHospital'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hbp_CurrentHospital' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_CurrentLastVisit'],
	        questions: ['Insured_Hbp_CurrentLastVisit'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_Hbp_CurrentLastVisit' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_CurrentFirstVisitDate'],
	        questions: ['Insured_Hbp_CurrentFirstVisitDate'],
	        components: ['DatepickerBrowser'],
	        props: { 0: { placeholder: 'Insured_Hbp_CurrentFirstVisitDate' } },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hbp_HasCxr'],
	        questions: ['Insured_Hbp_HasCxr'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_CxrDate'],
	        questions: ['Insured_Hbp_CxrDate'],
	        components: ['DatepickerBrowser'],
	        props: { 0: { placeholder: 'Insured_Hbp_CxrDate' } },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hbp_CxrResultNormal'],
	        questions: ['Insured_Hbp_CxrResultNormal'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Normal' }, { value: 'N', label: 'Abnormal' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_CxrHospital'],
	        questions: ['Insured_Hbp_CxrHospital'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Fillin_HospitalClinic' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hbp_HasEkg'],
	        questions: ['Insured_Hbp_HasEkg'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_EkgDate'],
	        questions: ['Insured_Hbp_EkgDate'],
	        components: ['DatepickerBrowser'],
	        props: { 0: { placeholder: 'Insured_Hbp_EkgDate' } },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hbp_EkgResultNormal'],
	        questions: ['Insured_Hbp_EkgResultNormal'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Normal' }, { value: 'N', label: 'Abnormal' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_EkgHospital'],
	        questions: ['Insured_Hbp_EkgHospital'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hbp_EkgHospital' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_Recommendation'],
	        questions: ['Insured_Hbp_Recommendation'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hepatitis_Diagnoseds_Other' }
	        },
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hbp_SmokeFlag'],
	        questions: ['Insured_Hbp_SmokeFlag'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'SmokeEver' }, { value: 'N', label: 'SmokeNever' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_SmokeQuantity'],
	        questions: ['Insured_Hbp_SmokeQuantity'],
	        components: ['NumPad'],
	        props: {
	            0: (_ = {
	                placeholder: 'Insured_Hbp_SmokeQuantity',
	                type: 'number'
	            }, _defineProperty(_, 'placeholder', '0'), _defineProperty(_, 'title', ''), _defineProperty(_, 'unitLabel', 'Insured_SmokeQuantity_Mass'), _defineProperty(_, 'style', { maxWidth: '40%', marginLeft: '30%' }), _)
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_SmokePeriod'],
	        questions: ['Insured_Hbp_SmokePeriod'],
	        components: ['NumPad'],
	        props: {
	            0: (_2 = {
	                placeholder: 'Insured_Hbp_SmokePeriod',
	                type: 'number'
	            }, _defineProperty(_2, 'placeholder', '0'), _defineProperty(_2, 'title', ''), _defineProperty(_2, 'unitLabel', 'years_lb'), _defineProperty(_2, 'style', { maxWidth: '30%', marginLeft: '35%' }), _2)
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hbp_SmokeQuitDate'],
	        questions: ['Insured_Hbp_SmokeQuitDate'],
	        components: ['DatepickerBrowser'],
	        props: { 0: { placeholder: 'Insured_Hbp_SmokeQuitDate' } },
	        isInFooter: true,
	        hideFooter: true
	    },
	    ///////////  Hepatitis
	
	    {
	        labels: ['Insured_Hepatitis_DiagnosedDate'],
	        questions: ['Insured_Hepatitis_DiagnosedDate'],
	        components: ['DatepickerBrowser'],
	        props: { 0: { placeholder: 'Insured_Hepatitis_DiagnosedDate' } },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hepatitis_Jaundice'],
	        questions: ['Insured_Hepatitis_Jaundice'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hepatitis_Nausea'],
	        questions: ['Insured_Hepatitis_Nausea'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hepatitis_Heptatomegaly'],
	        questions: ['Insured_Hepatitis_Heptatomegaly'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hepatitis_HepatoFrom'],
	        questions: ['Insured_Hepatitis_HepatoFrom'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 0, label: 'physicalExamination' }, { value: 1, label: 'Ultrasound' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hepatitis_AbnormalLiver'],
	        questions: ['Insured_Hepatitis_AbnormalLiver'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hepatitis_BloodTest'],
	        questions: ['Insured_Hepatitis_BloodTest'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_Hepatitis_BloodTest'],
	        labels: ['Insured_Hepatitis_BloodTestDate'],
	        questions: ['Insured_Hepatitis_BloodTestDate'],
	        components: ['DatepickerBrowser'],
	        props: { 0: { placeholder: 'Insured_Hepatitis_BloodTestDate' } },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        title: ['Insured_Hepatitis_BloodTest'],
	        labels: ['Insured_Hepatitis_BloodTestReason'],
	        questions: ['Insured_Hepatitis_BloodTestReason'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hepatitis_Diagnoseds_Other' }
	        },
	        hideFooter: true
	    }, {
	        title: ['Insured_Hepatitis_BloodTest'],
	        labels: ['Insured_Hepatitis_BloodTestHospital'],
	        questions: ['Insured_Hepatitis_BloodTestHospital'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hepatitis_Diagnoseds_Other' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hepatitis_UltrasoundTest'],
	        questions: ['Insured_Hepatitis_UltrasoundTest'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_Hepatitis_UltrasoundTest'],
	        labels: ['Insured_Hepatitis_UltrasoundTestDate'],
	        questions: ['Insured_Hepatitis_UltrasoundTestDate'],
	        components: ['DatepickerBrowser'],
	        props: { 0: { placeholder: 'Insured_Hepatitis_UltrasoundTestDate' } },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        title: ['Insured_Hepatitis_UltrasoundTest'],
	        labels: ['Insured_Hepatitis_UltrasoundTestReason'],
	        questions: ['Insured_Hepatitis_UltrasoundTestReason'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_Hepatitis_Diagnoseds_Other' } },
	        hideFooter: true
	    }, {
	        title: ['Insured_Hepatitis_UltrasoundTest'],
	        labels: ['Insured_Hepatitis_UltrasoundHospital'],
	        questions: ['Insured_Hepatitis_UltrasoundHospital'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_Hepatitis_Diagnoseds_Other' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hepatitis_Diagnoseds_DiagnosedCause'],
	        questions: ['Insured_Hepatitis_Diagnoseds'],
	        type: 'MultipleOption',
	        list: [{
	            value: 0,
	            label: 'ไวรัสตับอักเสบเอ',
	            DiagnosedCauseId: 0,
	            DiagnosedCauseFlag: 'Y',
	            DiagnosedCauseLabel: 'ไวรัสตับอักเสบเอ'
	        }, {
	            value: 1,
	            label: 'ไวรัสตับอักเสบบี',
	            DiagnosedCauseId: 1,
	            DiagnosedCauseFlag: 'Y',
	            DiagnosedCauseLabel: 'ไวรัสตับอักเสบบี'
	        }, {
	            value: 2,
	            label: 'ไวรัสตับอักเสบซี',
	            DiagnosedCauseId: 2,
	            DiagnosedCauseFlag: 'Y',
	            DiagnosedCauseLabel: 'ไวรัสตับอักเสบซี'
	        }, {
	            value: 3,
	            label: 'การดื่มสุรา',
	            DiagnosedCauseId: 3,
	            DiagnosedCauseFlag: 'Y',
	            DiagnosedCauseLabel: 'การดื่มสุรา'
	        }, {
	            value: 4,
	            label: 'การใช้ยา',
	            DiagnosedCauseId: 4,
	            DiagnosedCauseFlag: 'Y',
	            DiagnosedCauseLabel: 'การใช้ยา'
	        }, {
	            value: 5,
	            label: 'อื่นๆ',
	            DiagnosedCauseId: 5,
	            DiagnosedCauseFlag: 'Y',
	            DiagnosedCauseLabel: 'อื่นๆ'
	        }],
	        columns: 3,
	        hideFooter: true
	    }, {
	        title: ['Insured_Hepatitis_Diagnoseds_DiagnosedCause'],
	        labels: ['Insured_Hepatitis_Diagnoseds_Other'],
	        questions: ['Insured_Hepatitis_Diagnoseds_Other'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_Hepatitis_Diagnoseds_Other' } },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Hepatitis_AlcoholFlag'],
	        questions: ['Insured_Hepatitis_AlcoholFlag'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Hepatitis_AlcoholQuantity'],
	        questions: ['Insured_Hepatitis_AlcoholQuantity'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hepatitis_AlcoholQuantity' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hepatitis_AlcoholWithdrawnWhen'],
	        questions: ['Insured_Hepatitis_AlcoholWithdrawnWhen'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hepatitis_AlcoholWithdrawnWhen' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hepatitis_AlcoholWithdrawnReason'],
	        questions: ['Insured_Hepatitis_AlcoholWithdrawnReason'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hepatitis_AlcoholWithdrawnReason' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hepatitis_CurrentLastVisit'],
	        questions: ['Insured_Hepatitis_CurrentLastVisit'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hepatitis_CurrentLastVisit' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Hepatitis_Reason'],
	        questions: ['Insured_Hepatitis_Reason'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Hepatitis_Reason' }
	        },
	        hideFooter: true
	    },
	
	    ////////// Tumor
	    {
	        labels: ['Insured_Tumor_Location'],
	        questions: ['Insured_Tumor_Location'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_Location' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Tumor_DiscoveryMethod'],
	        questions: ['Insured_Tumor_DiscoveryMethod'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_DiscoveryMethod' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Tumor_DiscoveryDate'],
	        questions: ['Insured_Tumor_DiscoveryDate'],
	        components: ['DatepickerBrowser'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_DiscoveryDate' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Tumor_DiscoveryHospital'],
	        questions: ['Insured_Tumor_DiscoveryHospital'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_DiscoveryHospital' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Tumor_DiagnosedAsMalicious'],
	        questions: ['Insured_Tumor_DiagnosedAsMalicious'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'HasMalicious' }, { value: 'N', label: 'NotHasMalicious' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Tumor_DiagnosedDetail'],
	        questions: ['Insured_Tumor_DiagnosedDetail'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_DiagnosedDetail' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Tumor_BeenOperated'],
	        questions: ['Insured_Tumor_BeenOperated'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Tumor_Followup'],
	        questions: ['Insured_Tumor_Followup'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Have' }, { value: 'N', label: 'NotHave' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Tumor_FollowupDate'],
	        questions: ['Insured_Tumor_FollowupDate'],
	        components: ['DatepickerBrowser'],
	        props: { 0: { placeholder: 'Select_Please' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Tumor_Treatment'],
	        questions: ['Insured_Tumor_Treatments'],
	        type: 'MultipleOption',
	        list: [{
	            value: 0,
	            label: 'Radioisotope_therapy',
	            TreatmentId: '0',
	            TreatmentLabel: 'Radioisotope_therapy'
	        }, {
	            value: 1,
	            label: 'Chemo_therapy',
	            TreatmentId: '1',
	            TreatmentLabel: 'Chemo_therapy'
	        }, {
	            value: 2,
	            label: 'Insured_Tumor_OtherTreatmentDetails',
	            TreatmentId: '2',
	            TreatmentLabel: 'Insured_Tumor_OtherTreatmentDetails'
	        }],
	        columns: 2,
	        hideFooter: true
	    }, {
	        title: ['Insured_Tumor_Treatments'],
	        labels: ['Radioisotope_therapy'],
	        questions: ['Insured_Tumor_Treatments_TreatmentStarted_Radio'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_Treatments_TreatmentStarted_Radio' }
	        },
	        hideFooter: true
	    }, {
	        title: ['Insured_Tumor_Treatments'],
	        labels: ['Radioisotope_therapy'],
	        questions: ['Insured_Tumor_Treatments_LastTreatment_Radio'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_Treatments_LastTreatment_Radio' }
	        },
	        hideFooter: true
	    }, {
	        title: ['Insured_Tumor_Treatments'],
	        labels: ['Chemo_therapy'],
	        questions: ['Insured_Tumor_Treatments_TreatmentStarted_Chemo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_Treatments_TreatmentStarted_Chemo' }
	        },
	        hideFooter: true
	    }, {
	        title: ['Insured_Tumor_Treatments'],
	        labels: ['Chemo_therapy'],
	        questions: ['Insured_Tumor_Treatments_LastTreatment_Chemo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_Treatments_LastTreatment_Chemo' }
	        },
	        hideFooter: true
	    }, {
	        title: ['Insured_Tumor_Treatments'],
	        labels: ['Insured_Tumor_OtherTreatmentDetails'],
	        questions: ['Insured_Tumor_OtherTreatmentDetails'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_OtherTreatmentDetails' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Tumor_SpecialTreatment'],
	        questions: ['Insured_Tumor_SpecialTreatment'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Have' }, { value: 'N', label: 'NotHave' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_Tumor_SpecialTreatment'],
	        labels: ['Insured_Tumor_SpecialTreatmentDetails'],
	        questions: ['Insured_Tumor_SpecialTreatmentDetails'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_SpecialTreatmentDetails' }
	        },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_Tumor_Recurrence'],
	        questions: ['Insured_Tumor_Recurrence'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Have' }, { value: 'N', label: 'NotHave' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        title: ['Insured_Tumor_Recurrence'],
	        labels: ['Insured_Tumor_RecurredWhen'],
	        questions: ['Insured_Tumor_RecurredWhen'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_RecurredWhen' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Tumor_DischargedWhen'],
	        questions: ['Insured_Tumor_DischargedWhen'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Tumor_DischargedWhen' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['LastedPage'],
	        questions: ['LastedPage'],
	        type: 'LastedPage',
	        hideFooter: true
	    }],
	    pa: [{
	        labels: ['Insured_IdType'],
	        questions: ['Insured_IdType'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initIdent'],
	                autoInitMaster: false,
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_IdNo'],
	        questions: ['Insured_IdNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X - X X X X - X X X X X - X X - X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_LaserCode'],
	        questions: ['Insured_LaserCode'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Insured_LaserCode' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_ThName'],
	        questions: ['Insured_ThName_Title'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initTitle'],
	                autoInitMaster: false,
	                placeholder: 'Insured_ThName_Title',
	                setWidth: { width: '70%' }
	            }
	        }
	    }, {
	        labels: ['Insured_ThName'],
	        questions: ['Insured_ThName_First'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_ThName_First' }
	        }
	    }, {
	        labels: ['Insured_ThName'],
	        questions: ['Insured_ThName_Last'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_ThName_Last' }
	        }
	    }, {
	        labels: ['Insured_BirthDate'],
	        questions: ['Insured_BirthDate'],
	        components: ['DatepickerBrowser'],
	        props: {
	            0: { placeholder: 'Select_Please' }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_FormerName'],
	        questions: ['Insured_FormerName_First'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_FormerName_First' }
	        }
	    }, {
	        labels: ['Insured_FormerName'],
	        questions: ['Insured_FormerName_Last'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_FormerName_Last' }
	        }
	    }, {
	        labels: ['Insured_Nationality'],
	        questions: ['Insured_Nationality'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initNationality'],
	                autoInitMaster: false,
	                placeholder: 'Select_Nationality'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_Province'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initProvince'],
	                autoInitMaster: false,
	                placeholder: 'Insured_CurrentAddress_Province'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_District'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initDistrict', 'Insured_CurrentAddress_Province'],
	                autoInitMaster: false,
	                placeholder: 'Insured_CurrentAddress_District',
	                extraLabel: [{
	                    value: 'Insured_CurrentAddress_Province',
	                    label: 'Insured_CurrentAddress_Province'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_SubDistrict'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initSubDistrict', 'Insured_CurrentAddress_Province', 'Insured_CurrentAddress_District'],
	                autoInitMaster: false,
	                placeholder: 'Insured_CurrentAddress_SubDistrict',
	                extraLabel: [{
	                    value: 'Insured_CurrentAddress_Province',
	                    label: 'Insured_CurrentAddress_Province'
	                }, {
	                    value: 'Insured_CurrentAddress_District',
	                    label: 'Insured_CurrentAddress_District'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_HouseNo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Insured_CurrentAddress_HouseNo'] }
	        }
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_Mooban'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Insured_CurrentAddress_Mooban'] }
	        }
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_Arkan'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Insured_CurrentAddress_Arkan'] }
	        }
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_Moo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Insured_CurrentAddress_Moo'] }
	        }
	    }, {
	        labels: ['Insured_CurrentAddress_Soi'],
	        questions: ['Insured_CurrentAddress_Soi'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Insured_CurrentAddress_Soi'] }
	        }
	    }, {
	        labels: ['Insured_CurrentAddress_Street'],
	        questions: ['Insured_CurrentAddress_Street'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Insured_CurrentAddress_Street'] }
	        }
	    }, {
	        labels: ['Insured_CurrentAddress'],
	        title: ['Insured_CurrentAddress_Postal'],
	        questions: ['Insured_CurrentAddress_Postal'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: '_ _ _ _ _',
	                char: '_'
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_CurrentAddress_TelNo'],
	        title: ['Insured_CurrentAddress'],
	        questions: ['Insured_CurrentAddress_TelNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_MobileNo'],
	        questions: ['Insured_MobileNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Email'],
	        questions: ['Insured_Email'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Insured_Email' }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Occupation_Occupation'],
	        questions: ['Insured_Occupation1_Occupation'],
	        components: ['JobDropdown'],
	        props: {
	            0: {
	                initMaster: ['initOccupation'],
	                autoInitMaster: false,
	                placeholder: 'Occupation_Search'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Responsibility'],
	        questions: ['Insured_Occupation1_Responsibility'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: ['Insured_Occupation_Responsibility'] } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Income'],
	        questions: ['Insured_Occupation1_Income'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'currency',
	                placeholder: 'Insured_Occupation_Income',
	                unitLabel: 'Baht',
	                style: { maxWidth: '70%', margin: '0 auto' },
	                maxLength: 9
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Occupation_WorkPlace'],
	        questions: ['Insured_Occupation1_WorkPlace'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: ['Specify_Company'] } },
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HasAnotherOccupation'],
	        questions: ['Insured_HasAnotherOccupation'],
	        components: ['Option'],
	        props: { 0: { initMaster: ['initYesNo'], placeholder: 'Select_Please' } },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['Insured_Occupation2_Occupation'],
	        questions: ['Insured_Occupation2_Occupation'],
	        components: ['JobDropdown'],
	        props: {
	            0: {
	                initMaster: ['initOccupation'],
	                autoInitMaster: false,
	                placeholder: 'Occupation_Search'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Responsibility'],
	        questions: ['Insured_Occupation2_Responsibility'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Responsibility' } },
	        hideFooter: true
	    }, {
	        labels: ['Insured_Occupation_Income'],
	        questions: ['Insured_Occupation2_Income'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'currency',
	                placeholder: '0',
	                unitLabel: 'Baht',
	                style: { maxWidth: '70%', margin: '0 auto' },
	                maxLength: 9
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Insured_Occupation_WorkPlace'],
	        questions: ['Insured_Occupation2_WorkPlace'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'Specify_Company' } },
	        hideFooter: true
	    },
	    //// Payer Info
	    {
	        labels: ['Payer_RelationToInsured'],
	        questions: ['Payer_RelationToInsured'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initPayerRelationJuv'],
	                placeholder: 'Payer_RelationToInsured'
	            }
	        },
	        hideFooter: false
	    }, {
	        title: ['Payer_RelationToInsured'],
	        labels: ['Another'],
	        questions: ['Payer_RelationOtherToInsured'],
	        components: ['TextBox'],
	        props: { 0: { placeholder: 'ระบุความสัมพันธ์กับผู้เอาประกัน' } },
	        hideFooter: true
	    }, {
	        labels: ['Payer_IdNo'],
	        questions: ['Payer_IdNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'IDcard',
	                format: 'X - X X X X - X X X X X - X X - X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_ThName'],
	        questions: ['Payer_ThName_Title'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initTitle'],
	                autoInitMaster: false,
	                placeholder: 'Payer_ThName_Title',
	                setWidth: { width: '70%' }
	            }
	        }
	
	    }, {
	        labels: ['Payer_ThName'],
	        questions: ['Payer_ThName_First'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_ThName_First' }
	        }
	
	    }, {
	        labels: ['Payer_ThName'],
	        questions: ['Payer_ThName_Last'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_ThName_Last' }
	        }
	
	    }, {
	        labels: ['Payer_BirthDate'],
	        questions: ['Payer_BirthDate'],
	        components: ['DatepickerBrowser'],
	        props: { 0: { placeholder: 'Select_Please' } },
	        isInFooter: true,
	        hideFooter: true
	    }, {
	        labels: ['Payer_Nationality'],
	        questions: ['Payer_Nationality'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initNationality'],
	                autoInitMaster: false,
	                placeholder: 'Select_Nationality'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_Province'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initProvince'],
	                autoInitMaster: false,
	                placeholder: 'Payer_CurrentAddress_Province'
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_District'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initDistrict', 'Payer_CurrentAddress_Province'],
	                autoInitMaster: false,
	                placeholder: 'Payer_CurrentAddress_District',
	                extraLabel: [{
	                    value: 'Payer_CurrentAddress_Province',
	                    label: 'Payer_CurrentAddress_Province'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_SubDistrict'],
	        components: ['Dropdown'],
	        props: {
	            0: {
	                initMaster: ['initSubDistrict', 'Payer_CurrentAddress_Province', 'Payer_CurrentAddress_District'],
	                autoInitMaster: false,
	                placeholder: 'Payer_CurrentAddress_SubDistrict',
	                extraLabel: [{
	                    value: 'Payer_CurrentAddress_Province',
	                    label: 'Payer_CurrentAddress_Province'
	                }, {
	                    value: 'Payer_CurrentAddress_District',
	                    label: 'Payer_CurrentAddress_District'
	                }]
	            }
	        },
	        hideFooter: true
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_HouseNo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Payer_CurrentAddress_HouseNo'] }
	        }
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_Mooban'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Payer_CurrentAddress_Mooban'] }
	        }
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_Arkan'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Payer_CurrentAddress_Arkan'] }
	        }
	    }, {
	        labels: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_Moo'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Payer_CurrentAddress_Moo'] }
	        }
	    }, {
	        labels: ['Payer_CurrentAddress_Soi'],
	        questions: ['Payer_CurrentAddress_Soi'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Payer_CurrentAddress_Soi'] }
	        }
	    }, {
	        labels: ['Payer_CurrentAddress_Street'],
	        questions: ['Payer_CurrentAddress_Street'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: ['Payer_CurrentAddress_Street'] }
	        }
	    }, {
	        labels: ['fullform_postcode'],
	        title: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_Postal'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: '_ _ _ _ _',
	                char: '_'
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_CurrentAddress_TelNo'],
	        title: ['Payer_CurrentAddress'],
	        questions: ['Payer_CurrentAddress_TelNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_MobileNo'],
	        questions: ['Payer_MobileNo'],
	        components: ['NumPad'],
	        props: {
	            0: {
	                type: 'string',
	                format: 'X X X - X X X - X X X X',
	                char: 'X',
	                hasUnderline: true
	            }
	        },
	        hideFooter: false
	    }, {
	        labels: ['Payer_Email'],
	        questions: ['Payer_Email'],
	        components: ['TextBox'],
	        props: {
	            0: { placeholder: 'Payer_Email' }
	        },
	        hideFooter: false
	    }, {
	        type: 'Product',
	        questions: ['ProResult'],
	        labels: [''],
	        hideFooter: true
	    }, {
	        labels: ['Beneficiaries'],
	        questions: ['Beneficiaries[i]'],
	        type: 'Beneficiary',
	        initMaster: ['initBeneficiaryRelationship'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HasExistingPolicies'],
	        questions: ['Insured_HasExistingPolicies'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Have' }, { value: 'N', label: 'NotHave' }],
	                placeholder: 'Select_Please'
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        labels: ['Insured_ExistingPolicies'],
	        questions: ['Insured_ExistingPolicies[i]'],
	        type: 'Accident',
	        initMaster: ['initCompany'],
	        hideFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_InvolvedInNarcotics'],
	        questions: ['Insured_InvolvedInNarcotics'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Ever' }, { value: 'N', label: 'Never' }]
	            }
	        },
	        hideFooter: false,
	        isInFooter: true
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_DrugFlag'],
	        questions: ['Insured_DrugFlag'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Drung_Had' }, { value: 'N', label: 'Drung_NeverHad' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        hoc: 'YesNo',
	        labels: ['Insured_HealthyFlag'],
	        questions: ['Insured_HealthyFlag'],
	        components: ['Option'],
	        props: {
	            0: {
	                list: [{ value: 'Y', label: 'Yes' }, { value: 'N', label: 'No' }]
	            }
	        },
	        isInFooter: true,
	        hideFooter: false
	    }, {
	        labels: ['LastedPage'],
	        questions: ['LastedPage'],
	        type: 'LastedPage',
	        hideFooter: true
	    }]
	};

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _fp = __webpack_require__(3);
	
	var PROPS = [(0, _fp.isEqual)('appId'), (0, _fp.isEqual)('Created'), (0, _fp.isEqual)('Submitted'), (0, _fp.isEqual)('QuotationId'), (0, _fp.isEqual)('AgentCreator'), (0, _fp.isEqual)('Payment'), (0, _fp.startsWith)('AgentInfo')];
	
	exports.default = function (state) {
	    return _(state).pickBy(function (value, key) {
	        return _.some(PROPS, function (fn) {
	            return fn(key);
	        });
	    }).mapValues(function (value, key) {
	        if (key === 'Payment') {
	            return _.filter(value, function (payment) {
	                return _.get(payment, 'ObjectiveCode') === '111';
	            });
	        }
	
	        return value;
	    }).value();
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function () {
	  var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	  var defaultValue = '';
	
	  var AppNo = _.get(form, 'appNo', defaultValue);
	  var PolicyNo = _.get(form, 'PolicyNo', defaultValue);
	
	  var Insured_BirthDate = _.get(form, ['Insured_BirthDate'], defaultValue);
	  var Insured_MobileNo = _.get(form, ['Insured_MobileNo'], defaultValue);
	  var Insured = {
	    'Name': _.get(form, ['Insured_ThName_First'], '', defaultValue) + ' ' + _.get(form, ['Insured_ThName_Last'], '', defaultValue),
	    'BirthDate': _.isObject(Insured_BirthDate) ? _.get(Insured_BirthDate, 'value', defaultValue) : Insured_BirthDate,
	    'MobileNo': _.isObject(Insured_MobileNo) ? _.get(Insured_MobileNo, 'value', defaultValue) : Insured_MobileNo,
	    'Email': _.get(form, 'Insured_Email', defaultValue)
	  };
	
	  var Insured_RoundedAge = _.get(form, 'Insured_RoundedAge', defaultValue);
	  var Payer_BirthDate = _.get(form, ['Payer_BirthDate'], defaultValue);
	  var Payer_MobileNo = _.get(form, ['Payer_MobileNo'], defaultValue);
	  var Owner = Insured_RoundedAge > 16 ? Insured : {
	    'Name': _.get(form, 'Payer_ThName_First', '', defaultValue) + ' ' + _.get(form, 'Payer_ThName_Last', '', defaultValue),
	    'BirthDate': _.isObject(Payer_BirthDate) ? _.get(Payer_BirthDate, 'value', defaultValue) : Payer_BirthDate,
	    'MobileNo': _.isObject(Payer_MobileNo) ? _.get(Payer_MobileNo, 'value', defaultValue) : Payer_MobileNo,
	    'Email': _.get(form, 'Payer_Email', defaultValue)
	  };
	
	  var Agent = {
	    'Name': _.get(form, 'AgentInfo_AgentName', defaultValue),
	    'BirthDate': _.get(form, 'AgentInfo_AgentBirthDate', defaultValue),
	    'MobileNo': _.get(form, 'AgentInfo_MobileNo', defaultValue),
	    'Email': _.get(form, 'AgentInfo_Email', defaultValue)
	  };
	
	  var isAgentLeader = _.get(form, 'AgentInfo_AgentRole') === 'AL';
	  var AgentLeader = isAgentLeader ? Agent : {
	    'Name': defaultValue,
	    'BirthDate': defaultValue,
	    'MobileNo': defaultValue,
	    'Email': defaultValue
	  };
	
	  return {
	    'AppNo': AppNo,
	    'PolicyNo': PolicyNo,
	    'Insured': Insured,
	    'Owner': Owner,
	    'Agent': Agent,
	    'AgentLeader': AgentLeader
	  };
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _template = __webpack_require__(51);
	
	var _template2 = _interopRequireDefault(_template);
	
	var _selectors = __webpack_require__(34);
	
	var Selector = _interopRequireWildcard(_selectors);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	    var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	    var appId = _.get(app, 'appId');
	    var state = {
	        eapp: {
	            form: {
	                currentId: appId,
	                currentIndex: 0,
	                list: [app]
	            }
	        }
	    };
	    var questions = _.get(_template2.default, 'question', {});
	    var sections = _.get(_template2.default, 'sections', {});
	    var conditions = _.chain(questions).map('condition').compact().flatten().uniq().value();
	
	    var isShow = function isShow(condition) {
	        if (condition === undefined) {
	            return true;
	        }
	        if (_.isBoolean(condition)) {
	            return condition;
	        }
	        if (_.isString(condition)) {
	            return _.get(Selector, condition, function (f) {
	                return true;
	            })(state);
	        }
	        if (_.isArray(condition)) {
	            return _.every(condition, function (c) {
	                return _.get(Selector, c, function (f) {
	                    return true;
	                })(state);
	            });
	        }
	    };
	
	    var isAdult = Selector.isAdult(state);
	
	    var sectionNotShow = _.chain(sections).filter(function (val) {
	        return !isShow(val.condition);
	    }).map('id').value();
	
	    var questionNotShow = _.chain(questions).map(function (val, question) {
	        return _extends({}, val, {
	            question: question,
	            condition: isShow(val.condition)
	        });
	    }).filter(function (val) {
	        if (!val.condition) {
	            return true;
	        }
	        return _.includes(sectionNotShow, val.sectionId);
	    }).map(function (_ref) {
	        var question = _ref.question;
	        return _.replace(question, '[i]', '');
	    }).value();
	
	    var form = Selector.getForm(state);
	
	    if (isAdult) {
	        return _.chain(form).omit(questionNotShow).omitBy(function (val, key) {
	            return _.startsWith(key, 'Payer_');
	        }).value();
	    } else {
	        var _ret = function () {
	            var expectList = ['Insured_Occupation1_Occupation', 'Insured_Occupation1_Income'];
	            var _questionNotShow = _.filter(questionNotShow, function (val) {
	                return !_.includes(expectList, val);
	            });
	            return {
	                v: _.omit(form, _questionNotShow)
	            };
	        }();
	
	        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	    }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }
/******/ ]);
//# sourceMappingURL=reducer.js.map
